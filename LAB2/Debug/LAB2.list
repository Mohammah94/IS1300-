
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006608  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068bc  080068bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080068bc  080068bc  000168bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c4  080068c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080068cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df8  20000010  080068dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e08  080068dc  00021e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc43  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bf  00000000  00000000  0003cc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00040448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00041ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a30  00000000  00000000  00043030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187f4  00000000  00000000  0006ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd6d2  00000000  00000000  00084254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e8c  00000000  00000000  0018197c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006780 	.word	0x08006780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006780 	.word	0x08006780

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	xSemaphore = xSemaphoreCreateBinary();
 80004cc:	2203      	movs	r2, #3
 80004ce:	2100      	movs	r1, #0
 80004d0:	2001      	movs	r0, #1
 80004d2:	f003 fbad 	bl	8003c30 <xQueueGenericCreate>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a11      	ldr	r2, [pc, #68]	; (8000520 <MX_FREERTOS_Init+0x58>)
 80004da:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <MX_FREERTOS_Init+0x5c>)
 80004de:	2100      	movs	r1, #0
 80004e0:	4811      	ldr	r0, [pc, #68]	; (8000528 <MX_FREERTOS_Init+0x60>)
 80004e2:	f003 f92f 	bl	8003744 <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a10      	ldr	r2, [pc, #64]	; (800052c <MX_FREERTOS_Init+0x64>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* creation of Blink1Task */
  Blink1TaskHandle = osThreadNew(Blink1, NULL, &Blink1Task_attributes);
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_FREERTOS_Init+0x68>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4810      	ldr	r0, [pc, #64]	; (8000534 <MX_FREERTOS_Init+0x6c>)
 80004f2:	f003 f927 	bl	8003744 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <MX_FREERTOS_Init+0x70>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* creation of TriggTask */
  TriggTaskHandle = osThreadNew(Trigg, NULL, &TriggTask_attributes);
 80004fc:	4a0f      	ldr	r2, [pc, #60]	; (800053c <MX_FREERTOS_Init+0x74>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480f      	ldr	r0, [pc, #60]	; (8000540 <MX_FREERTOS_Init+0x78>)
 8000502:	f003 f91f 	bl	8003744 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <MX_FREERTOS_Init+0x7c>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of UserbuttonTask */
  UserbuttonTaskHandle = osThreadNew(Userbutton, NULL, &UserbuttonTask_attributes);
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <MX_FREERTOS_Init+0x80>)
 800050e:	2100      	movs	r1, #0
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <MX_FREERTOS_Init+0x84>)
 8000512:	f003 f917 	bl	8003744 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <MX_FREERTOS_Init+0x88>)
 800051a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20001ce4 	.word	0x20001ce4
 8000524:	080067e4 	.word	0x080067e4
 8000528:	08000555 	.word	0x08000555
 800052c:	20001ce0 	.word	0x20001ce0
 8000530:	08006808 	.word	0x08006808
 8000534:	08000565 	.word	0x08000565
 8000538:	20001cec 	.word	0x20001cec
 800053c:	0800682c 	.word	0x0800682c
 8000540:	080005b1 	.word	0x080005b1
 8000544:	20001ce8 	.word	0x20001ce8
 8000548:	08006850 	.word	0x08006850
 800054c:	080005d9 	.word	0x080005d9
 8000550:	20001cf0 	.word	0x20001cf0

08000554 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f003 f983 	bl	8003868 <osDelay>
 8000562:	e7fb      	b.n	800055c <StartDefaultTask+0x8>

08000564 <Blink1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink1 */
void Blink1(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink1 */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(100) ; // ms to ticks
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000570:	f004 fc2e 	bl	8004dd0 <xTaskGetTickCount>
 8000574:	4603      	mov	r3, r0
 8000576:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake (xSemaphore, 0)  == pdPASS){
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <Blink1+0x48>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fe2e 	bl	80041e0 <xQueueSemaphoreTake>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d108      	bne.n	800059c <Blink1+0x38>
			ToggleLed();
 800058a:	f000 f875 	bl	8000678 <ToggleLed>
			xSemaphoreGive(xSemaphore);
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <Blink1+0x48>)
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	f003 fba8 	bl	8003cec <xQueueGenericSend>
		}
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	68f9      	ldr	r1, [r7, #12]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fa50 	bl	8004a48 <vTaskDelayUntil>
		if(xSemaphoreTake (xSemaphore, 0)  == pdPASS){
 80005a8:	e7e6      	b.n	8000578 <Blink1+0x14>
 80005aa:	bf00      	nop
 80005ac:	20001ce4 	.word	0x20001ce4

080005b0 <Trigg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Trigg */
void Trigg(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Trigg */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(200);	//ms to ticks
 80005b8:	23c8      	movs	r3, #200	; 0xc8
 80005ba:	60fb      	str	r3, [r7, #12]
	//Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80005bc:	f004 fc08 	bl	8004dd0 <xTaskGetTickCount>
 80005c0:	4603      	mov	r3, r0
 80005c2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    vTaskDelayUntil( &xLastWakeTime, xPeriod);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	68f9      	ldr	r1, [r7, #12]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fa3c 	bl	8004a48 <vTaskDelayUntil>
    wait_cycles(10);
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 f83b 	bl	800064c <wait_cycles>
    vTaskDelayUntil( &xLastWakeTime, xPeriod);
 80005d6:	e7f5      	b.n	80005c4 <Trigg+0x14>

080005d8 <Userbutton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Userbutton */
void Userbutton(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Userbutton */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20);
 80005e0:	2314      	movs	r3, #20
 80005e2:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80005e4:	f004 fbf4 	bl	8004dd0 <xTaskGetTickCount>
 80005e8:	4603      	mov	r3, r0
 80005ea:	60bb      	str	r3, [r7, #8]
	xSemaphoreGive(xSemaphore);
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <Userbutton+0x68>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fb79 	bl	8003cec <xQueueGenericSend>

	/* Infinite loop */
	for(;;)
	{
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET)
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <Userbutton+0x6c>)
 8000600:	f000 fd78 	bl	80010f4 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <Userbutton+0x46>
		{
			xSemaphoreTake(xSemaphore, 10);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <Userbutton+0x68>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	210a      	movs	r1, #10
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fde5 	bl	80041e0 <xQueueSemaphoreTake>
			varBlink1 = 1;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <Userbutton+0x70>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	e009      	b.n	8000632 <Userbutton+0x5a>
		}
		else{
			xSemaphoreGive(xSemaphore);
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <Userbutton+0x68>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	f003 fb60 	bl	8003cec <xQueueGenericSend>
			varBlink1 = 0;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <Userbutton+0x70>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	68f9      	ldr	r1, [r7, #12]
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fa05 	bl	8004a48 <vTaskDelayUntil>
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET)
 800063e:	e7dc      	b.n	80005fa <Userbutton+0x22>
 8000640:	20001ce4 	.word	0x20001ce4
 8000644:	48000800 	.word	0x48000800
 8000648:	2000002c 	.word	0x2000002c

0800064c <wait_cycles>:
  /* USER CODE END Userbutton */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void wait_cycles( uint32_t n) {
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	uint32_t l = n/3;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <wait_cycles+0x28>)
 8000658:	fba2 2303 	umull	r2, r3, r2, r3
 800065c:	085b      	lsrs	r3, r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
	asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3b01      	subs	r3, #1
 8000664:	d1fd      	bne.n	8000662 <wait_cycles+0x16>
 8000666:	60fb      	str	r3, [r7, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	aaaaaaab 	.word	0xaaaaaaab

08000678 <ToggleLed>:

void ToggleLed(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800067c:	2120      	movs	r1, #32
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f000 fd67 	bl	8001154 <HAL_GPIO_TogglePin>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a24      	ldr	r2, [pc, #144]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f000 fd0b 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_GPIO_Init+0xc8>)
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_GPIO_Init+0xcc>)
 8000724:	f000 fb3c 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f000 fb2d 	bl	8000da0 <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	; 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	10210000 	.word	0x10210000
 8000758:	48000800 	.word	0x48000800

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 f9fc 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f80b 	bl	800077e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f7ff ff90 	bl	800068c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076c:	f000 f940 	bl	80009f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000770:	f002 ff9e 	bl	80036b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000774:	f7ff fea8 	bl	80004c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000778:	f002 ffbe 	bl	80036f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077c:	e7fe      	b.n	800077c <main+0x20>

0800077e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b096      	sub	sp, #88	; 0x58
 8000782:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2244      	movs	r2, #68	; 0x44
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f005 ffef 	bl	8006770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a4:	f000 fcfe 	bl	80011a4 <HAL_PWREx_ControlVoltageScaling>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ae:	f000 f849 	bl	8000844 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007cc:	230a      	movs	r3, #10
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007d0:	2307      	movs	r3, #7
 80007d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fd35 	bl	8001250 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ec:	f000 f82a 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2303      	movs	r3, #3
 80007f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2104      	movs	r1, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f001 f907 	bl	8001a1c <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000814:	f000 f816 	bl	8000844 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3758      	adds	r7, #88	; 0x58
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 f9b3 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_MspInit+0x4c>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	; 0x60
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_MspInit+0x4c>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_MspInit+0x4c>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	; 0x58
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 fa5d 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	2019      	movs	r0, #25
 80008b6:	f000 fa49 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008ba:	2019      	movs	r0, #25
 80008bc:	f000 fa62 	bl	8000d84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <HAL_InitTick+0x9c>)
 80008c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_InitTick+0x9c>)
 80008c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ca:	6613      	str	r3, [r2, #96]	; 0x60
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <HAL_InitTick+0x9c>)
 80008ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fa40 	bl	8001d68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008e8:	f001 fa28 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80008ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <HAL_InitTick+0xa0>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3b01      	subs	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_InitTick+0xa4>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <HAL_InitTick+0xa8>)
 8000900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_InitTick+0xa4>)
 8000904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000908:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_InitTick+0xa4>)
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_InitTick+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_InitTick+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_InitTick+0xa4>)
 800091e:	f001 ff71 	bl	8002804 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <HAL_InitTick+0xa4>)
 800092a:	f001 ffcd 	bl	80028c8 <HAL_TIM_Base_Start_IT>
 800092e:	4603      	mov	r3, r0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	431bde83 	.word	0x431bde83
 8000944:	20001cf4 	.word	0x20001cf4
 8000948:	40012c00 	.word	0x40012c00

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800097e:	f002 f813 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20001cf4 	.word	0x20001cf4

0800098c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <SystemInit+0x5c>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <SystemInit+0x5c>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <SystemInit+0x60>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <SystemInit+0x60>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <SystemInit+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <SystemInit+0x60>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <SystemInit+0x60>)
 80009b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <SystemInit+0x60>)
 80009c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <SystemInit+0x60>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a07      	ldr	r2, [pc, #28]	; (80009ec <SystemInit+0x60>)
 80009d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SystemInit+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	40021000 	.word	0x40021000

080009f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <MX_USART2_UART_Init+0x5c>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a34:	f002 f9b8 	bl	8002da8 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f7ff ff01 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20001d40 	.word	0x20001d40
 8000a4c:	40004400 	.word	0x40004400

08000a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ac      	sub	sp, #176	; 0xb0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2288      	movs	r2, #136	; 0x88
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fe7d 	bl	8006770 <memset>
  if(uartHandle->Instance==USART2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <HAL_UART_MspInit+0xb0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d13b      	bne.n	8000af8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 f9fd 	bl	8001e8c <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff fed4 	bl	8000844 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_UART_MspInit+0xb4>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0xb4>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000acc:	230c      	movs	r3, #12
 8000ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f000 f954 	bl	8000da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000af8:	bf00      	nop
 8000afa:	37b0      	adds	r7, #176	; 0xb0
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40021000 	.word	0x40021000

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff ff3e 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b12:	e003      	b.n	8000b1c <LoopCopyDataInit>

08000b14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b1a:	3104      	adds	r1, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b24:	d3f6      	bcc.n	8000b14 <CopyDataInit>
	ldr	r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b28:	e002      	b.n	8000b30 <LoopFillZerobss>

08000b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b2c:	f842 3b04 	str.w	r3, [r2], #4

08000b30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <LoopForever+0x16>)
	cmp	r2, r3
 8000b32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b34:	d3f9      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f005 fde9 	bl	800670c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fe0f 	bl	800075c <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b44:	080068cc 	.word	0x080068cc
	ldr	r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b4c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b50:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b54:	20001e08 	.word	0x20001e08

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_Init+0x3c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_Init+0x3c>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 f8df 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f7ff fe91 	bl	80008a0 <HAL_InitTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	e001      	b.n	8000b8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8a:	f7ff fe61 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20001dc4 	.word	0x20001dc4

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20001dc4 	.word	0x20001dc4

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	e17f      	b.n	80010b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8171 	beq.w	80010aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d00b      	beq.n	8000de8 <HAL_GPIO_Init+0x48>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ddc:	2b11      	cmp	r3, #17
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b12      	cmp	r3, #18
 8000de6:	d130      	bne.n	8000e4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1e:	2201      	movs	r2, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	f003 0201 	and.w	r2, r3, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d118      	bne.n	8000e88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	f003 0201 	and.w	r2, r3, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x128>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b12      	cmp	r3, #18
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	6939      	ldr	r1, [r7, #16]
 8000f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0203 	and.w	r2, r3, #3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80ac 	beq.w	80010aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <HAL_GPIO_Init+0x330>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a5e      	ldr	r2, [pc, #376]	; (80010d0 <HAL_GPIO_Init+0x330>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <HAL_GPIO_Init+0x330>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6a:	4a5a      	ldr	r2, [pc, #360]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f94:	d025      	beq.n	8000fe2 <HAL_GPIO_Init+0x242>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_GPIO_Init+0x338>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01f      	beq.n	8000fde <HAL_GPIO_Init+0x23e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4e      	ldr	r2, [pc, #312]	; (80010dc <HAL_GPIO_Init+0x33c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x23a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x340>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x236>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <HAL_GPIO_Init+0x344>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x232>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <HAL_GPIO_Init+0x348>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x22e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <HAL_GPIO_Init+0x34c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x22a>
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e00c      	b.n	8000fe4 <HAL_GPIO_Init+0x244>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e00a      	b.n	8000fe4 <HAL_GPIO_Init+0x244>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x244>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x244>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x244>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x244>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x244>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff4:	4937      	ldr	r1, [pc, #220]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001002:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <HAL_GPIO_Init+0x350>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001026:	4a32      	ldr	r2, [pc, #200]	; (80010f0 <HAL_GPIO_Init+0x350>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_GPIO_Init+0x350>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001050:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <HAL_GPIO_Init+0x350>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_GPIO_Init+0x350>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800107a:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <HAL_GPIO_Init+0x350>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_GPIO_Init+0x350>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_GPIO_Init+0x350>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f47f ae78 	bne.w	8000db0 <HAL_GPIO_Init+0x10>
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48001000 	.word	0x48001000
 80010e8:	48001400 	.word	0x48001400
 80010ec:	48001800 	.word	0x48001800
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001140:	e002      	b.n	8001148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43d9      	mvns	r1, r3
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	400b      	ands	r3, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40007000 	.word	0x40007000

080011a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b2:	d130      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c0:	d038      	beq.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2232      	movs	r2, #50	; 0x32
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e8:	e002      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fc:	d102      	bne.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f2      	bne.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001210:	d110      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e00f      	b.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001222:	d007      	beq.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40007000 	.word	0x40007000
 8001248:	20000000 	.word	0x20000000
 800124c:	431bde83 	.word	0x431bde83

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e3d4      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001262:	4ba1      	ldr	r3, [pc, #644]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800126c:	4b9e      	ldr	r3, [pc, #632]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80e4 	beq.w	800144c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_RCC_OscConfig+0x4a>
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	2b0c      	cmp	r3, #12
 800128e:	f040 808b 	bne.w	80013a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8087 	bne.w	80013a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800129a:	4b93      	ldr	r3, [pc, #588]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x62>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e3ac      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1a      	ldr	r2, [r3, #32]
 80012b6:	4b8c      	ldr	r3, [pc, #560]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <HAL_RCC_OscConfig+0x7c>
 80012c2:	4b89      	ldr	r3, [pc, #548]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ca:	e005      	b.n	80012d8 <HAL_RCC_OscConfig+0x88>
 80012cc:	4b86      	ldr	r3, [pc, #536]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80012ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d8:	4293      	cmp	r3, r2
 80012da:	d223      	bcs.n	8001324 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fd73 	bl	8001dcc <RCC_SetFlashLatencyFromMSIRange>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e38d      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f0:	4b7d      	ldr	r3, [pc, #500]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a7c      	ldr	r2, [pc, #496]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b7a      	ldr	r3, [pc, #488]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4977      	ldr	r1, [pc, #476]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4972      	ldr	r1, [pc, #456]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
 8001322:	e025      	b.n	8001370 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001324:	4b70      	ldr	r3, [pc, #448]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a6f      	ldr	r2, [pc, #444]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	496a      	ldr	r1, [pc, #424]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001342:	4b69      	ldr	r3, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	4965      	ldr	r1, [pc, #404]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fd33 	bl	8001dcc <RCC_SetFlashLatencyFromMSIRange>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e34d      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001370:	f000 fc36 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 030f 	and.w	r3, r3, #15
 8001380:	495a      	ldr	r1, [pc, #360]	; (80014ec <HAL_RCC_OscConfig+0x29c>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <HAL_RCC_OscConfig+0x2a0>)
 800138e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001390:	4b58      	ldr	r3, [pc, #352]	; (80014f4 <HAL_RCC_OscConfig+0x2a4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fa83 	bl	80008a0 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d052      	beq.n	800144a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	e331      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d032      	beq.n	8001416 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013b0:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc02 	bl	8000bc4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c4:	f7ff fbfe 	bl	8000bc4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e31a      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	493b      	ldr	r1, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	4936      	ldr	r1, [pc, #216]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
 8001414:	e01a      	b.n	800144c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001416:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001422:	f7ff fbcf 	bl	8000bc4 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142a:	f7ff fbcb 	bl	8000bc4 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e2e7      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x1da>
 8001448:	e000      	b.n	800144c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d074      	beq.n	8001542 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b08      	cmp	r3, #8
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x21a>
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d10e      	bne.n	8001482 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d10b      	bne.n	8001482 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d064      	beq.n	8001540 <HAL_RCC_OscConfig+0x2f0>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d160      	bne.n	8001540 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e2c4      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x24a>
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e01d      	b.n	80014d6 <HAL_RCC_OscConfig+0x286>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x26e>
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e00b      	b.n	80014d6 <HAL_RCC_OscConfig+0x286>
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_RCC_OscConfig+0x298>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01c      	beq.n	8001518 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fb71 	bl	8000bc4 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e4:	e011      	b.n	800150a <HAL_RCC_OscConfig+0x2ba>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	08006874 	.word	0x08006874
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb64 	bl	8000bc4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e280      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	4baf      	ldr	r3, [pc, #700]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2a8>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb54 	bl	8000bc4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fb50 	bl	8000bc4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e26c      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001532:	4ba5      	ldr	r3, [pc, #660]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d0>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d060      	beq.n	8001610 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x310>
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d119      	bne.n	800158e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d116      	bne.n	800158e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001560:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_OscConfig+0x328>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e249      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b93      	ldr	r3, [pc, #588]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	4990      	ldr	r1, [pc, #576]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158c:	e040      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d023      	beq.n	80015de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001596:	4b8c      	ldr	r3, [pc, #560]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a8b      	ldr	r2, [pc, #556]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb0f 	bl	8000bc4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb0b 	bl	8000bc4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e227      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015bc:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	497c      	ldr	r1, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e018      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	4b7a      	ldr	r3, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a79      	ldr	r2, [pc, #484]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff faeb 	bl	8000bc4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fae7 	bl	8000bc4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e203      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001604:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d03c      	beq.n	8001696 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01c      	beq.n	800165e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	4a67      	ldr	r2, [pc, #412]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fac6 	bl	8000bc4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fac2 	bl	8000bc4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1de      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164e:	4b5e      	ldr	r3, [pc, #376]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ef      	beq.n	800163c <HAL_RCC_OscConfig+0x3ec>
 800165c:	e01b      	b.n	8001696 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001664:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff faa9 	bl	8000bc4 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff faa5 	bl	8000bc4 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1c1      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ef      	bne.n	8001676 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80a6 	beq.w	80017f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016a8:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b4:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	4a43      	ldr	r2, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016be:	6593      	str	r3, [r2, #88]	; 0x58
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016cc:	2301      	movs	r3, #1
 80016ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d0:	4b3e      	ldr	r3, [pc, #248]	; (80017cc <HAL_RCC_OscConfig+0x57c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d118      	bne.n	800170e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x57c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <HAL_RCC_OscConfig+0x57c>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fa6c 	bl	8000bc4 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f0:	f7ff fa68 	bl	8000bc4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e184      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <HAL_RCC_OscConfig+0x57c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_RCC_OscConfig+0x4d8>
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001726:	e024      	b.n	8001772 <HAL_RCC_OscConfig+0x522>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d110      	bne.n	8001752 <HAL_RCC_OscConfig+0x502>
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001736:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001750:	e00f      	b.n	8001772 <HAL_RCC_OscConfig+0x522>
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800176a:	f023 0304 	bic.w	r3, r3, #4
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d016      	beq.n	80017a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff fa23 	bl	8000bc4 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fa1f 	bl	8000bc4 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e139      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x578>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ed      	beq.n	8001782 <HAL_RCC_OscConfig+0x532>
 80017a6:	e01a      	b.n	80017de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fa0c 	bl	8000bc4 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ae:	e00f      	b.n	80017d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff fa08 	bl	8000bc4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d906      	bls.n	80017d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e122      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d0:	4b90      	ldr	r3, [pc, #576]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e8      	bne.n	80017b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a8a      	ldr	r2, [pc, #552]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80017ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8108 	beq.w	8001a0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	2b02      	cmp	r3, #2
 8001800:	f040 80d0 	bne.w	80019a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001804:	4b83      	ldr	r3, [pc, #524]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	429a      	cmp	r2, r3
 8001816:	d130      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	3b01      	subs	r3, #1
 8001824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d127      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001834:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d11f      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001844:	2a07      	cmp	r2, #7
 8001846:	bf14      	ite	ne
 8001848:	2201      	movne	r2, #1
 800184a:	2200      	moveq	r2, #0
 800184c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184e:	4293      	cmp	r3, r2
 8001850:	d113      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	3b01      	subs	r3, #1
 8001860:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d109      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d06e      	beq.n	8001958 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b0c      	cmp	r3, #12
 800187e:	d069      	beq.n	8001954 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001880:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800188c:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b7      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800189c:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a5c      	ldr	r2, [pc, #368]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80018a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a8:	f7ff f98c 	bl	8000bc4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f988 	bl	8000bc4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0a4      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c2:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ce:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <HAL_RCC_OscConfig+0x7c8>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018de:	3a01      	subs	r2, #1
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018e8:	0212      	lsls	r2, r2, #8
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018f0:	0852      	lsrs	r2, r2, #1
 80018f2:	3a01      	subs	r2, #1
 80018f4:	0552      	lsls	r2, r2, #21
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018fc:	0852      	lsrs	r2, r2, #1
 80018fe:	3a01      	subs	r2, #1
 8001900:	0652      	lsls	r2, r2, #25
 8001902:	4311      	orrs	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001908:	0912      	lsrs	r2, r2, #4
 800190a:	0452      	lsls	r2, r2, #17
 800190c:	430a      	orrs	r2, r1
 800190e:	4941      	ldr	r1, [pc, #260]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3e      	ldr	r2, [pc, #248]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4a3b      	ldr	r2, [pc, #236]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800192c:	f7ff f94a 	bl	8000bc4 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f946 	bl	8000bc4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e062      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001952:	e05a      	b.n	8001a0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e059      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d152      	bne.n	8001a0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2a      	ldr	r2, [pc, #168]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800197c:	f7ff f922 	bl	8000bc4 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff f91e 	bl	8000bc4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e03a      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x734>
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d02d      	beq.n	8001a06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019c8:	f023 0303 	bic.w	r3, r3, #3
 80019cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f8f1 	bl	8000bc4 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f8ed 	bl	8000bc4 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e009      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_OscConfig+0x7c4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x796>
 8001a04:	e001      	b.n	8001a0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	f99d808c 	.word	0xf99d808c

08001a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0c8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d910      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 0207 	bic.w	r2, r3, #7
 8001a46:	4961      	ldr	r1, [pc, #388]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0b0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d04c      	beq.n	8001b06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d121      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e09e      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d115      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e092      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e086      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e07e      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 0203 	bic.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	493f      	ldr	r1, [pc, #252]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad6:	f7ff f875 	bl	8000bc4 <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ade:	f7ff f871 	bl	8000bc4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e066      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 020c 	and.w	r2, r3, #12
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d1eb      	bne.n	8001ade <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b12:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	492c      	ldr	r1, [pc, #176]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d210      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4924      	ldr	r1, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e036      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4910      	ldr	r1, [pc, #64]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b92:	f000 f825 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fe72 	bl	80008a0 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08006874 	.word	0x08006874
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d121      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d11e      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e005      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e004      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d134      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d003      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0xac>
 8001c84:	e005      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c88:	617b      	str	r3, [r7, #20]
      break;
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c8e:	617b      	str	r3, [r7, #20]
      break;
 8001c90:	e002      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	617b      	str	r3, [r7, #20]
      break;
 8001c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	fb02 f203 	mul.w	r2, r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	0e5b      	lsrs	r3, r3, #25
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	0800688c 	.word	0x0800688c
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08006884 	.word	0x08006884

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d40:	f7ff ffda 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4904      	ldr	r1, [pc, #16]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08006884 	.word	0x08006884

08001d68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	220f      	movs	r2, #15
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	08db      	lsrs	r3, r3, #3
 8001da2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCC_GetClockConfig+0x60>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0207 	and.w	r2, r3, #7
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40022000 	.word	0x40022000

08001dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001de4:	f7ff f9d0 	bl	8001188 <HAL_PWREx_GetVoltageRange>
 8001de8:	6178      	str	r0, [r7, #20]
 8001dea:	e014      	b.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e04:	f7ff f9c0 	bl	8001188 <HAL_PWREx_GetVoltageRange>
 8001e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1c:	d10b      	bne.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d919      	bls.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2ba0      	cmp	r3, #160	; 0xa0
 8001e28:	d902      	bls.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e013      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e30:	2301      	movs	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e010      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d902      	bls.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	e00a      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d102      	bne.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	e004      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b70      	cmp	r3, #112	; 0x70
 8001e52:	d101      	bne.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e54:	2301      	movs	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 0207 	bic.w	r2, r3, #7
 8001e60:	4909      	ldr	r1, [pc, #36]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40022000 	.word	0x40022000

08001e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e94:	2300      	movs	r3, #0
 8001e96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d041      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eb0:	d02a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001eb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eb6:	d824      	bhi.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001eb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ebc:	d008      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ebe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ec2:	d81e      	bhi.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ecc:	d010      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ece:	e018      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ed0:	4b86      	ldr	r3, [pc, #536]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a85      	ldr	r2, [pc, #532]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001edc:	e015      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fabb 	bl	8002460 <RCCEx_PLLSAI1_Config>
 8001eea:	4603      	mov	r3, r0
 8001eec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eee:	e00c      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3320      	adds	r3, #32
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fba6 	bl	8002648 <RCCEx_PLLSAI2_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f00:	e003      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	74fb      	strb	r3, [r7, #19]
      break;
 8001f06:	e000      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f1e:	4973      	ldr	r1, [pc, #460]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f26:	e001      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d041      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f40:	d02a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f46:	d824      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f4c:	d008      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f52:	d81e      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f60:	4b62      	ldr	r3, [pc, #392]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a61      	ldr	r2, [pc, #388]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f6c:	e015      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fa73 	bl	8002460 <RCCEx_PLLSAI1_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f7e:	e00c      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3320      	adds	r3, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fb5e 	bl	8002648 <RCCEx_PLLSAI2_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f90:	e003      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	74fb      	strb	r3, [r7, #19]
      break;
 8001f96:	e000      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fa0:	4b52      	ldr	r3, [pc, #328]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fae:	494f      	ldr	r1, [pc, #316]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fb6:	e001      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a0 	beq.w	800210a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	4a40      	ldr	r2, [pc, #256]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800200c:	f7fe fdda 	bl	8000bc4 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002012:	e009      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7fe fdd6 	bl	8000bc4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d902      	bls.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	74fb      	strb	r3, [r7, #19]
        break;
 8002026:	e005      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ef      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d15c      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01f      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	d019      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002062:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a20      	ldr	r2, [pc, #128]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7fe fd95 	bl	8000bc4 <HAL_GetTick>
 800209a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209c:	e00b      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7fe fd91 	bl	8000bc4 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d902      	bls.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	74fb      	strb	r3, [r7, #19]
            break;
 80020b4:	e006      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ec      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020da:	4904      	ldr	r1, [pc, #16]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020e2:	e009      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
 80020e8:	e006      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f8:	7c7b      	ldrb	r3, [r7, #17]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b9e      	ldr	r3, [pc, #632]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	4a9d      	ldr	r2, [pc, #628]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002116:	4b98      	ldr	r3, [pc, #608]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211c:	f023 0203 	bic.w	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	4994      	ldr	r1, [pc, #592]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002138:	4b8f      	ldr	r3, [pc, #572]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 020c 	bic.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	498c      	ldr	r1, [pc, #560]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800215a:	4b87      	ldr	r3, [pc, #540]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002160:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	4983      	ldr	r1, [pc, #524]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800217c:	4b7e      	ldr	r3, [pc, #504]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	497b      	ldr	r1, [pc, #492]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800219e:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	4972      	ldr	r1, [pc, #456]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c0:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	496a      	ldr	r1, [pc, #424]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e2:	4b65      	ldr	r3, [pc, #404]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	4961      	ldr	r1, [pc, #388]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002204:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002212:	4959      	ldr	r1, [pc, #356]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002226:	4b54      	ldr	r3, [pc, #336]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002234:	4950      	ldr	r1, [pc, #320]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	4948      	ldr	r1, [pc, #288]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	493f      	ldr	r1, [pc, #252]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d028      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800228c:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229a:	4937      	ldr	r1, [pc, #220]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022aa:	d106      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b6:	60d3      	str	r3, [r2, #12]
 80022b8:	e011      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c2:	d10c      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	2101      	movs	r1, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f8c8 	bl	8002460 <RCCEx_PLLSAI1_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d028      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	491f      	ldr	r1, [pc, #124]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002308:	d106      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230a:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002314:	60d3      	str	r3, [r2, #12]
 8002316:	e011      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002320:	d10c      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f899 	bl	8002460 <RCCEx_PLLSAI1_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02b      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002366:	d109      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a02      	ldr	r2, [pc, #8]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002372:	60d3      	str	r3, [r2, #12]
 8002374:	e014      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	2101      	movs	r1, #1
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f867 	bl	8002460 <RCCEx_PLLSAI1_Config>
 8002392:	4603      	mov	r3, r0
 8002394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02f      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ba:	4928      	ldr	r1, [pc, #160]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	2102      	movs	r1, #2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f844 	bl	8002460 <RCCEx_PLLSAI1_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d014      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	74bb      	strb	r3, [r7, #18]
 80023e6:	e011      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f0:	d10c      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3320      	adds	r3, #32
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f925 	bl	8002648 <RCCEx_PLLSAI2_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002426:	490d      	ldr	r1, [pc, #52]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244a:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002452:	7cbb      	ldrb	r3, [r7, #18]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800246e:	4b75      	ldr	r3, [pc, #468]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d018      	beq.n	80024ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800247a:	4b72      	ldr	r3, [pc, #456]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d10d      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
       ||
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002492:	4b6c      	ldr	r3, [pc, #432]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
       ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d047      	beq.n	8002536 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e044      	b.n	8002536 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d018      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0x86>
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d825      	bhi.n	8002504 <RCCEx_PLLSAI1_Config+0xa4>
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d002      	beq.n	80024c2 <RCCEx_PLLSAI1_Config+0x62>
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d009      	beq.n	80024d4 <RCCEx_PLLSAI1_Config+0x74>
 80024c0:	e020      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024c2:	4b60      	ldr	r3, [pc, #384]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11d      	bne.n	800250a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d2:	e01a      	b.n	800250a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024d4:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d116      	bne.n	800250e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e4:	e013      	b.n	800250e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024e6:	4b57      	ldr	r3, [pc, #348]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002502:	e006      	b.n	8002512 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      break;
 8002508:	e004      	b.n	8002514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800250a:	bf00      	nop
 800250c:	e002      	b.n	8002514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002512:	bf00      	nop
    }

    if(status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800251a:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	430b      	orrs	r3, r1
 8002530:	4944      	ldr	r1, [pc, #272]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d17d      	bne.n	8002638 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a40      	ldr	r2, [pc, #256]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002548:	f7fe fb3c 	bl	8000bc4 <HAL_GetTick>
 800254c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800254e:	e009      	b.n	8002564 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002550:	f7fe fb38 	bl	8000bc4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	73fb      	strb	r3, [r7, #15]
        break;
 8002562:	e005      	b.n	8002570 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002564:	4b37      	ldr	r3, [pc, #220]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ef      	bne.n	8002550 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d160      	bne.n	8002638 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d111      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6892      	ldr	r2, [r2, #8]
 800258c:	0211      	lsls	r1, r2, #8
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	0912      	lsrs	r2, r2, #4
 8002594:	0452      	lsls	r2, r2, #17
 8002596:	430a      	orrs	r2, r1
 8002598:	492a      	ldr	r1, [pc, #168]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	610b      	str	r3, [r1, #16]
 800259e:	e027      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d112      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	0211      	lsls	r1, r2, #8
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6912      	ldr	r2, [r2, #16]
 80025bc:	0852      	lsrs	r2, r2, #1
 80025be:	3a01      	subs	r2, #1
 80025c0:	0552      	lsls	r2, r2, #21
 80025c2:	430a      	orrs	r2, r1
 80025c4:	491f      	ldr	r1, [pc, #124]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	610b      	str	r3, [r1, #16]
 80025ca:	e011      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	0211      	lsls	r1, r2, #8
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6952      	ldr	r2, [r2, #20]
 80025e2:	0852      	lsrs	r2, r2, #1
 80025e4:	3a01      	subs	r2, #1
 80025e6:	0652      	lsls	r2, r2, #25
 80025e8:	430a      	orrs	r2, r1
 80025ea:	4916      	ldr	r1, [pc, #88]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fae2 	bl	8000bc4 <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002602:	e009      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002604:	f7fe fade 	bl	8000bc4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d902      	bls.n	8002618 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	73fb      	strb	r3, [r7, #15]
          break;
 8002616:	e005      	b.n	8002624 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ef      	beq.n	8002604 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	4904      	ldr	r1, [pc, #16]	; (8002644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000

08002648 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002656:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d018      	beq.n	8002694 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0203 	and.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d10d      	bne.n	800268e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
       ||
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800267a:	4b61      	ldr	r3, [pc, #388]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
       ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d047      	beq.n	800271e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e044      	b.n	800271e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d018      	beq.n	80026ce <RCCEx_PLLSAI2_Config+0x86>
 800269c:	2b03      	cmp	r3, #3
 800269e:	d825      	bhi.n	80026ec <RCCEx_PLLSAI2_Config+0xa4>
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d002      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0x62>
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d009      	beq.n	80026bc <RCCEx_PLLSAI2_Config+0x74>
 80026a8:	e020      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026aa:	4b55      	ldr	r3, [pc, #340]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11d      	bne.n	80026f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ba:	e01a      	b.n	80026f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026bc:	4b50      	ldr	r3, [pc, #320]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d116      	bne.n	80026f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e013      	b.n	80026f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026da:	4b49      	ldr	r3, [pc, #292]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ea:	e006      	b.n	80026fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      break;
 80026f0:	e004      	b.n	80026fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026f2:	bf00      	nop
 80026f4:	e002      	b.n	80026fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10d      	bne.n	800271e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002702:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	430b      	orrs	r3, r1
 8002718:	4939      	ldr	r1, [pc, #228]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d167      	bne.n	80027f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a35      	ldr	r2, [pc, #212]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fe fa48 	bl	8000bc4 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002736:	e009      	b.n	800274c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002738:	f7fe fa44 	bl	8000bc4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d902      	bls.n	800274c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	73fb      	strb	r3, [r7, #15]
        break;
 800274a:	e005      	b.n	8002758 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800274c:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ef      	bne.n	8002738 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d14a      	bne.n	80027f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d111      	bne.n	8002788 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	0211      	lsls	r1, r2, #8
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68d2      	ldr	r2, [r2, #12]
 800277a:	0912      	lsrs	r2, r2, #4
 800277c:	0452      	lsls	r2, r2, #17
 800277e:	430a      	orrs	r2, r1
 8002780:	491f      	ldr	r1, [pc, #124]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	614b      	str	r3, [r1, #20]
 8002786:	e011      	b.n	80027ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6892      	ldr	r2, [r2, #8]
 8002798:	0211      	lsls	r1, r2, #8
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6912      	ldr	r2, [r2, #16]
 800279e:	0852      	lsrs	r2, r2, #1
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0652      	lsls	r2, r2, #25
 80027a4:	430a      	orrs	r2, r1
 80027a6:	4916      	ldr	r1, [pc, #88]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a13      	ldr	r2, [pc, #76]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe fa04 	bl	8000bc4 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027be:	e009      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c0:	f7fe fa00 	bl	8000bc4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d902      	bls.n	80027d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	73fb      	strb	r3, [r7, #15]
          break;
 80027d2:	e005      	b.n	80027e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ef      	beq.n	80027c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4904      	ldr	r1, [pc, #16]	; (8002800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e049      	b.n	80028aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f841 	bl	80028b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 f9f8 	bl	8002c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04f      	b.n	8002980 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a23      	ldr	r2, [pc, #140]	; (800298c <HAL_TIM_Base_Start_IT+0xc4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01d      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x76>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d018      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x76>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_TIM_Base_Start_IT+0xc8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x76>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_TIM_Base_Start_IT+0xcc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00e      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x76>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_TIM_Base_Start_IT+0xd0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x76>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_TIM_Base_Start_IT+0xd4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x76>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d115      	bne.n	800296a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d015      	beq.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002956:	d011      	beq.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002968:	e008      	b.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e000      	b.n	800297e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40013400 	.word	0x40013400
 80029a0:	40014000 	.word	0x40014000
 80029a4:	00010007 	.word	0x00010007

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0202 	mvn.w	r2, #2
 80029d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f905 	bl	8002bfa <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8f7 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f908 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8db 	bl	8002bfa <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8cd 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f8de 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0208 	mvn.w	r2, #8
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f8b1 	bl	8002bfa <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8a3 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f8b4 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f887 	bl	8002bfa <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f879 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f88a 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0201 	mvn.w	r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fe7a 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f914 	bl	8002d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	d10e      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f907 	bl	8002d94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d10e      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d107      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f838 	bl	8002c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d10e      	bne.n	8002bde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0220 	mvn.w	r2, #32
 8002bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f8c7 	bl	8002d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a40      	ldr	r2, [pc, #256]	; (8002d4c <TIM_Base_SetConfig+0x114>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d013      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c56:	d00f      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3d      	ldr	r2, [pc, #244]	; (8002d50 <TIM_Base_SetConfig+0x118>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00b      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3c      	ldr	r2, [pc, #240]	; (8002d54 <TIM_Base_SetConfig+0x11c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <TIM_Base_SetConfig+0x120>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3a      	ldr	r2, [pc, #232]	; (8002d5c <TIM_Base_SetConfig+0x124>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <TIM_Base_SetConfig+0x114>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01f      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d01b      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <TIM_Base_SetConfig+0x118>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d017      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <TIM_Base_SetConfig+0x11c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <TIM_Base_SetConfig+0x120>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00f      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <TIM_Base_SetConfig+0x124>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <TIM_Base_SetConfig+0x128>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <TIM_Base_SetConfig+0x12c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <TIM_Base_SetConfig+0x130>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d108      	bne.n	8002ce4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <TIM_Base_SetConfig+0x114>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00f      	beq.n	8002d30 <TIM_Base_SetConfig+0xf8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <TIM_Base_SetConfig+0x124>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00b      	beq.n	8002d30 <TIM_Base_SetConfig+0xf8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <TIM_Base_SetConfig+0x128>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <TIM_Base_SetConfig+0xf8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <TIM_Base_SetConfig+0x12c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_Base_SetConfig+0xf8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0f      	ldr	r2, [pc, #60]	; (8002d68 <TIM_Base_SetConfig+0x130>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d103      	bne.n	8002d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	615a      	str	r2, [r3, #20]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40013400 	.word	0x40013400
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40014400 	.word	0x40014400
 8002d68:	40014800 	.word	0x40014800

08002d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e040      	b.n	8002e3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fe40 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f82c 	bl	8002e44 <UART_SetConfig>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e022      	b.n	8002e3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 faaa 	bl	8003358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fb31 	bl	800349c <UART_CheckIdleState>
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e44:	b5b0      	push	{r4, r5, r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4bad      	ldr	r3, [pc, #692]	; (8003124 <UART_SetConfig+0x2e0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	69f9      	ldr	r1, [r7, #28]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4aa2      	ldr	r2, [pc, #648]	; (8003128 <UART_SetConfig+0x2e4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a99      	ldr	r2, [pc, #612]	; (800312c <UART_SetConfig+0x2e8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d121      	bne.n	8002f0e <UART_SetConfig+0xca>
 8002eca:	4b99      	ldr	r3, [pc, #612]	; (8003130 <UART_SetConfig+0x2ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d817      	bhi.n	8002f08 <UART_SetConfig+0xc4>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <UART_SetConfig+0x9c>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002efd 	.word	0x08002efd
 8002ee8:	08002ef7 	.word	0x08002ef7
 8002eec:	08002f03 	.word	0x08002f03
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	76fb      	strb	r3, [r7, #27]
 8002ef4:	e0e7      	b.n	80030c6 <UART_SetConfig+0x282>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	76fb      	strb	r3, [r7, #27]
 8002efa:	e0e4      	b.n	80030c6 <UART_SetConfig+0x282>
 8002efc:	2304      	movs	r3, #4
 8002efe:	76fb      	strb	r3, [r7, #27]
 8002f00:	e0e1      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f02:	2308      	movs	r3, #8
 8002f04:	76fb      	strb	r3, [r7, #27]
 8002f06:	e0de      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	76fb      	strb	r3, [r7, #27]
 8002f0c:	e0db      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a88      	ldr	r2, [pc, #544]	; (8003134 <UART_SetConfig+0x2f0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d132      	bne.n	8002f7e <UART_SetConfig+0x13a>
 8002f18:	4b85      	ldr	r3, [pc, #532]	; (8003130 <UART_SetConfig+0x2ec>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d828      	bhi.n	8002f78 <UART_SetConfig+0x134>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <UART_SetConfig+0xe8>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f61 	.word	0x08002f61
 8002f30:	08002f79 	.word	0x08002f79
 8002f34:	08002f79 	.word	0x08002f79
 8002f38:	08002f79 	.word	0x08002f79
 8002f3c:	08002f6d 	.word	0x08002f6d
 8002f40:	08002f79 	.word	0x08002f79
 8002f44:	08002f79 	.word	0x08002f79
 8002f48:	08002f79 	.word	0x08002f79
 8002f4c:	08002f67 	.word	0x08002f67
 8002f50:	08002f79 	.word	0x08002f79
 8002f54:	08002f79 	.word	0x08002f79
 8002f58:	08002f79 	.word	0x08002f79
 8002f5c:	08002f73 	.word	0x08002f73
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e0af      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e0ac      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e0a9      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e0a6      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e0a3      	b.n	80030c6 <UART_SetConfig+0x282>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6d      	ldr	r2, [pc, #436]	; (8003138 <UART_SetConfig+0x2f4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d120      	bne.n	8002fca <UART_SetConfig+0x186>
 8002f88:	4b69      	ldr	r3, [pc, #420]	; (8003130 <UART_SetConfig+0x2ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f92:	2b30      	cmp	r3, #48	; 0x30
 8002f94:	d013      	beq.n	8002fbe <UART_SetConfig+0x17a>
 8002f96:	2b30      	cmp	r3, #48	; 0x30
 8002f98:	d814      	bhi.n	8002fc4 <UART_SetConfig+0x180>
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d009      	beq.n	8002fb2 <UART_SetConfig+0x16e>
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d810      	bhi.n	8002fc4 <UART_SetConfig+0x180>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <UART_SetConfig+0x168>
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d006      	beq.n	8002fb8 <UART_SetConfig+0x174>
 8002faa:	e00b      	b.n	8002fc4 <UART_SetConfig+0x180>
 8002fac:	2300      	movs	r3, #0
 8002fae:	76fb      	strb	r3, [r7, #27]
 8002fb0:	e089      	b.n	80030c6 <UART_SetConfig+0x282>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	76fb      	strb	r3, [r7, #27]
 8002fb6:	e086      	b.n	80030c6 <UART_SetConfig+0x282>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	76fb      	strb	r3, [r7, #27]
 8002fbc:	e083      	b.n	80030c6 <UART_SetConfig+0x282>
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	76fb      	strb	r3, [r7, #27]
 8002fc2:	e080      	b.n	80030c6 <UART_SetConfig+0x282>
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	76fb      	strb	r3, [r7, #27]
 8002fc8:	e07d      	b.n	80030c6 <UART_SetConfig+0x282>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5b      	ldr	r2, [pc, #364]	; (800313c <UART_SetConfig+0x2f8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d120      	bne.n	8003016 <UART_SetConfig+0x1d2>
 8002fd4:	4b56      	ldr	r3, [pc, #344]	; (8003130 <UART_SetConfig+0x2ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fde:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe0:	d013      	beq.n	800300a <UART_SetConfig+0x1c6>
 8002fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe4:	d814      	bhi.n	8003010 <UART_SetConfig+0x1cc>
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d009      	beq.n	8002ffe <UART_SetConfig+0x1ba>
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d810      	bhi.n	8003010 <UART_SetConfig+0x1cc>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <UART_SetConfig+0x1b4>
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d006      	beq.n	8003004 <UART_SetConfig+0x1c0>
 8002ff6:	e00b      	b.n	8003010 <UART_SetConfig+0x1cc>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	76fb      	strb	r3, [r7, #27]
 8002ffc:	e063      	b.n	80030c6 <UART_SetConfig+0x282>
 8002ffe:	2302      	movs	r3, #2
 8003000:	76fb      	strb	r3, [r7, #27]
 8003002:	e060      	b.n	80030c6 <UART_SetConfig+0x282>
 8003004:	2304      	movs	r3, #4
 8003006:	76fb      	strb	r3, [r7, #27]
 8003008:	e05d      	b.n	80030c6 <UART_SetConfig+0x282>
 800300a:	2308      	movs	r3, #8
 800300c:	76fb      	strb	r3, [r7, #27]
 800300e:	e05a      	b.n	80030c6 <UART_SetConfig+0x282>
 8003010:	2310      	movs	r3, #16
 8003012:	76fb      	strb	r3, [r7, #27]
 8003014:	e057      	b.n	80030c6 <UART_SetConfig+0x282>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a49      	ldr	r2, [pc, #292]	; (8003140 <UART_SetConfig+0x2fc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d125      	bne.n	800306c <UART_SetConfig+0x228>
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <UART_SetConfig+0x2ec>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800302e:	d017      	beq.n	8003060 <UART_SetConfig+0x21c>
 8003030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003034:	d817      	bhi.n	8003066 <UART_SetConfig+0x222>
 8003036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303a:	d00b      	beq.n	8003054 <UART_SetConfig+0x210>
 800303c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003040:	d811      	bhi.n	8003066 <UART_SetConfig+0x222>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <UART_SetConfig+0x20a>
 8003046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304a:	d006      	beq.n	800305a <UART_SetConfig+0x216>
 800304c:	e00b      	b.n	8003066 <UART_SetConfig+0x222>
 800304e:	2300      	movs	r3, #0
 8003050:	76fb      	strb	r3, [r7, #27]
 8003052:	e038      	b.n	80030c6 <UART_SetConfig+0x282>
 8003054:	2302      	movs	r3, #2
 8003056:	76fb      	strb	r3, [r7, #27]
 8003058:	e035      	b.n	80030c6 <UART_SetConfig+0x282>
 800305a:	2304      	movs	r3, #4
 800305c:	76fb      	strb	r3, [r7, #27]
 800305e:	e032      	b.n	80030c6 <UART_SetConfig+0x282>
 8003060:	2308      	movs	r3, #8
 8003062:	76fb      	strb	r3, [r7, #27]
 8003064:	e02f      	b.n	80030c6 <UART_SetConfig+0x282>
 8003066:	2310      	movs	r3, #16
 8003068:	76fb      	strb	r3, [r7, #27]
 800306a:	e02c      	b.n	80030c6 <UART_SetConfig+0x282>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2d      	ldr	r2, [pc, #180]	; (8003128 <UART_SetConfig+0x2e4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d125      	bne.n	80030c2 <UART_SetConfig+0x27e>
 8003076:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <UART_SetConfig+0x2ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003084:	d017      	beq.n	80030b6 <UART_SetConfig+0x272>
 8003086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800308a:	d817      	bhi.n	80030bc <UART_SetConfig+0x278>
 800308c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003090:	d00b      	beq.n	80030aa <UART_SetConfig+0x266>
 8003092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003096:	d811      	bhi.n	80030bc <UART_SetConfig+0x278>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <UART_SetConfig+0x260>
 800309c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a0:	d006      	beq.n	80030b0 <UART_SetConfig+0x26c>
 80030a2:	e00b      	b.n	80030bc <UART_SetConfig+0x278>
 80030a4:	2300      	movs	r3, #0
 80030a6:	76fb      	strb	r3, [r7, #27]
 80030a8:	e00d      	b.n	80030c6 <UART_SetConfig+0x282>
 80030aa:	2302      	movs	r3, #2
 80030ac:	76fb      	strb	r3, [r7, #27]
 80030ae:	e00a      	b.n	80030c6 <UART_SetConfig+0x282>
 80030b0:	2304      	movs	r3, #4
 80030b2:	76fb      	strb	r3, [r7, #27]
 80030b4:	e007      	b.n	80030c6 <UART_SetConfig+0x282>
 80030b6:	2308      	movs	r3, #8
 80030b8:	76fb      	strb	r3, [r7, #27]
 80030ba:	e004      	b.n	80030c6 <UART_SetConfig+0x282>
 80030bc:	2310      	movs	r3, #16
 80030be:	76fb      	strb	r3, [r7, #27]
 80030c0:	e001      	b.n	80030c6 <UART_SetConfig+0x282>
 80030c2:	2310      	movs	r3, #16
 80030c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <UART_SetConfig+0x2e4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f040 8087 	bne.w	80031e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030d2:	7efb      	ldrb	r3, [r7, #27]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d837      	bhi.n	8003148 <UART_SetConfig+0x304>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0x29c>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	08003105 	.word	0x08003105
 80030e4:	08003149 	.word	0x08003149
 80030e8:	0800310d 	.word	0x0800310d
 80030ec:	08003149 	.word	0x08003149
 80030f0:	08003113 	.word	0x08003113
 80030f4:	08003149 	.word	0x08003149
 80030f8:	08003149 	.word	0x08003149
 80030fc:	08003149 	.word	0x08003149
 8003100:	0800311b 	.word	0x0800311b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7fe fe04 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8003108:	6178      	str	r0, [r7, #20]
        break;
 800310a:	e022      	b.n	8003152 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <UART_SetConfig+0x300>)
 800310e:	617b      	str	r3, [r7, #20]
        break;
 8003110:	e01f      	b.n	8003152 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003112:	f7fe fd65 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8003116:	6178      	str	r0, [r7, #20]
        break;
 8003118:	e01b      	b.n	8003152 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311e:	617b      	str	r3, [r7, #20]
        break;
 8003120:	e017      	b.n	8003152 <UART_SetConfig+0x30e>
 8003122:	bf00      	nop
 8003124:	efff69f3 	.word	0xefff69f3
 8003128:	40008000 	.word	0x40008000
 800312c:	40013800 	.word	0x40013800
 8003130:	40021000 	.word	0x40021000
 8003134:	40004400 	.word	0x40004400
 8003138:	40004800 	.word	0x40004800
 800313c:	40004c00 	.word	0x40004c00
 8003140:	40005000 	.word	0x40005000
 8003144:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	76bb      	strb	r3, [r7, #26]
        break;
 8003150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80f1 	beq.w	800333c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	429a      	cmp	r2, r3
 8003168:	d305      	bcc.n	8003176 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d902      	bls.n	800317c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	76bb      	strb	r3, [r7, #26]
 800317a:	e0df      	b.n	800333c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4618      	mov	r0, r3
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	020b      	lsls	r3, r1, #8
 800318e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003192:	0202      	lsls	r2, r0, #8
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	6849      	ldr	r1, [r1, #4]
 8003198:	0849      	lsrs	r1, r1, #1
 800319a:	4608      	mov	r0, r1
 800319c:	f04f 0100 	mov.w	r1, #0
 80031a0:	1814      	adds	r4, r2, r0
 80031a2:	eb43 0501 	adc.w	r5, r3, r1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd f80c 	bl	80001d0 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4613      	mov	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c6:	d308      	bcc.n	80031da <UART_SetConfig+0x396>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ce:	d204      	bcs.n	80031da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	e0b0      	b.n	800333c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	76bb      	strb	r3, [r7, #26]
 80031de:	e0ad      	b.n	800333c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e8:	d15c      	bne.n	80032a4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80031ea:	7efb      	ldrb	r3, [r7, #27]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d828      	bhi.n	8003242 <UART_SetConfig+0x3fe>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0x3b4>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003233 	.word	0x08003233
 800320c:	08003243 	.word	0x08003243
 8003210:	08003243 	.word	0x08003243
 8003214:	08003243 	.word	0x08003243
 8003218:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7fe fd78 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8003220:	6178      	str	r0, [r7, #20]
        break;
 8003222:	e013      	b.n	800324c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe fd8a 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8003228:	6178      	str	r0, [r7, #20]
        break;
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4b49      	ldr	r3, [pc, #292]	; (8003354 <UART_SetConfig+0x510>)
 800322e:	617b      	str	r3, [r7, #20]
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003232:	f7fe fcd5 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8003236:	6178      	str	r0, [r7, #20]
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323e:	617b      	str	r3, [r7, #20]
        break;
 8003240:	e004      	b.n	800324c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	76bb      	strb	r3, [r7, #26]
        break;
 800324a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d074      	beq.n	800333c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d916      	bls.n	800329e <UART_SetConfig+0x45a>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d212      	bcs.n	800329e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	b29b      	uxth	r3, r3
 800327c:	f023 030f 	bic.w	r3, r3, #15
 8003280:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	b29b      	uxth	r3, r3
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	b29a      	uxth	r2, r3
 800328e:	89fb      	ldrh	r3, [r7, #14]
 8003290:	4313      	orrs	r3, r2
 8003292:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	89fa      	ldrh	r2, [r7, #14]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	e04e      	b.n	800333c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	76bb      	strb	r3, [r7, #26]
 80032a2:	e04b      	b.n	800333c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a4:	7efb      	ldrb	r3, [r7, #27]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d827      	bhi.n	80032fa <UART_SetConfig+0x4b6>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0x46c>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032fb 	.word	0x080032fb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7fe fd1c 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 80032d8:	6178      	str	r0, [r7, #20]
        break;
 80032da:	e013      	b.n	8003304 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7fe fd2e 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80032e0:	6178      	str	r0, [r7, #20]
        break;
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <UART_SetConfig+0x510>)
 80032e6:	617b      	str	r3, [r7, #20]
        break;
 80032e8:	e00c      	b.n	8003304 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fc79 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 80032ee:	6178      	str	r0, [r7, #20]
        break;
 80032f0:	e008      	b.n	8003304 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	617b      	str	r3, [r7, #20]
        break;
 80032f8:	e004      	b.n	8003304 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	76bb      	strb	r3, [r7, #26]
        break;
 8003302:	bf00      	nop
    }

    if (pclk != 0U)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	085a      	lsrs	r2, r3, #1
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	b29b      	uxth	r3, r3
 800331e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	d908      	bls.n	8003338 <UART_SetConfig+0x4f4>
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d204      	bcs.n	8003338 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e001      	b.n	800333c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003348:	7ebb      	ldrb	r3, [r7, #26]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bdb0      	pop	{r4, r5, r7, pc}
 8003352:	bf00      	nop
 8003354:	00f42400 	.word	0x00f42400

08003358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01a      	beq.n	800346e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003456:	d10a      	bne.n	800346e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034ac:	f7fd fb8a 	bl	8000bc4 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d10e      	bne.n	80034de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f82d 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e023      	b.n	8003526 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d10e      	bne.n	800350a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f817 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e00d      	b.n	8003526 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	e05e      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d05a      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7fd fb3c 	bl	8000bc4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <UART_WaitOnFlagUntilTimeout+0x30>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11b      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800356c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e043      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02c      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b2:	d124      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035bc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	429a      	cmp	r2, r3
 800361a:	d091      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <__NVIC_SetPriority>:
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	2b00      	cmp	r3, #0
 800363a:	db0a      	blt.n	8003652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	490c      	ldr	r1, [pc, #48]	; (8003674 <__NVIC_SetPriority+0x4c>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	0112      	lsls	r2, r2, #4
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	440b      	add	r3, r1
 800364c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003650:	e00a      	b.n	8003668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4908      	ldr	r1, [pc, #32]	; (8003678 <__NVIC_SetPriority+0x50>)
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	3b04      	subs	r3, #4
 8003660:	0112      	lsls	r2, r2, #4
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	440b      	add	r3, r1
 8003666:	761a      	strb	r2, [r3, #24]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000e100 	.word	0xe000e100
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SysTick_Handler+0x1c>)
 8003682:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003684:	f001 feda 	bl	800543c <xTaskGetSchedulerState>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800368e:	f002 fdc3 	bl	8006218 <xPortSysTickHandler>
  }
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	e000e010 	.word	0xe000e010

0800369c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80036a0:	2100      	movs	r1, #0
 80036a2:	f06f 0004 	mvn.w	r0, #4
 80036a6:	f7ff ffbf 	bl	8003628 <__NVIC_SetPriority>
#endif
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b6:	f3ef 8305 	mrs	r3, IPSR
 80036ba:	603b      	str	r3, [r7, #0]
  return(result);
 80036bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80036c2:	f06f 0305 	mvn.w	r3, #5
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	e00c      	b.n	80036e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <osKernelInitialize+0x44>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d105      	bne.n	80036de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <osKernelInitialize+0x44>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036d8:	2300      	movs	r3, #0
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	e002      	b.n	80036e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000030 	.word	0x20000030

080036f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036fe:	f3ef 8305 	mrs	r3, IPSR
 8003702:	603b      	str	r3, [r7, #0]
  return(result);
 8003704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <osKernelStart+0x1a>
    stat = osErrorISR;
 800370a:	f06f 0305 	mvn.w	r3, #5
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	e010      	b.n	8003734 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <osKernelStart+0x48>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d109      	bne.n	800372e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800371a:	f7ff ffbf 	bl	800369c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <osKernelStart+0x48>)
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003724:	f001 fa42 	bl	8004bac <vTaskStartScheduler>
      stat = osOK;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	e002      	b.n	8003734 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003734:	687b      	ldr	r3, [r7, #4]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000030 	.word	0x20000030

08003744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b08e      	sub	sp, #56	; 0x38
 8003748:	af04      	add	r7, sp, #16
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003754:	f3ef 8305 	mrs	r3, IPSR
 8003758:	617b      	str	r3, [r7, #20]
  return(result);
 800375a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800375c:	2b00      	cmp	r3, #0
 800375e:	d17e      	bne.n	800385e <osThreadNew+0x11a>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d07b      	beq.n	800385e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800376a:	2318      	movs	r3, #24
 800376c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d045      	beq.n	800380a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <osThreadNew+0x48>
        name = attr->name;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <osThreadNew+0x6e>
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b38      	cmp	r3, #56	; 0x38
 80037a4:	d805      	bhi.n	80037b2 <osThreadNew+0x6e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <osThreadNew+0x72>
        return (NULL);
 80037b2:	2300      	movs	r3, #0
 80037b4:	e054      	b.n	8003860 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	089b      	lsrs	r3, r3, #2
 80037c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00e      	beq.n	80037ec <osThreadNew+0xa8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b5b      	cmp	r3, #91	; 0x5b
 80037d4:	d90a      	bls.n	80037ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <osThreadNew+0xa8>
        mem = 1;
 80037e6:	2301      	movs	r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e010      	b.n	800380e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10c      	bne.n	800380e <osThreadNew+0xca>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d108      	bne.n	800380e <osThreadNew+0xca>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <osThreadNew+0xca>
          mem = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	e001      	b.n	800380e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d110      	bne.n	8003836 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800381c:	9202      	str	r2, [sp, #8]
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6a3a      	ldr	r2, [r7, #32]
 8003828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 ff6a 	bl	8004704 <xTaskCreateStatic>
 8003830:	4603      	mov	r3, r0
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	e013      	b.n	800385e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d110      	bne.n	800385e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	b29a      	uxth	r2, r3
 8003840:	f107 0310 	add.w	r3, r7, #16
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 ffb5 	bl	80047be <xTaskCreate>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <osThreadNew+0x11a>
            hTask = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800385e:	693b      	ldr	r3, [r7, #16]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003870:	f3ef 8305 	mrs	r3, IPSR
 8003874:	60bb      	str	r3, [r7, #8]
  return(result);
 8003876:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <osDelay+0x1c>
    stat = osErrorISR;
 800387c:	f06f 0305 	mvn.w	r3, #5
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e007      	b.n	8003894 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <osDelay+0x2c>
      vTaskDelay(ticks);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f001 f958 	bl	8004b44 <vTaskDelay>
    }
  }

  return (stat);
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <vApplicationGetIdleTaskMemory+0x2c>)
 80038b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4a06      	ldr	r2, [pc, #24]	; (80038d0 <vApplicationGetIdleTaskMemory+0x30>)
 80038b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	601a      	str	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000034 	.word	0x20000034
 80038d0:	20000090 	.word	0x20000090

080038d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <vApplicationGetTimerTaskMemory+0x2c>)
 80038e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4a06      	ldr	r2, [pc, #24]	; (8003904 <vApplicationGetTimerTaskMemory+0x30>)
 80038ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	20000290 	.word	0x20000290
 8003904:	200002ec 	.word	0x200002ec

08003908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f103 0208 	add.w	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f103 0208 	add.w	r2, r3, #8
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f103 0208 	add.w	r2, r3, #8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d103      	bne.n	80039ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e00c      	b.n	80039e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3308      	adds	r3, #8
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e002      	b.n	80039d8 <vListInsert+0x2e>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d2f6      	bcs.n	80039d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6892      	ldr	r2, [r2, #8]
 8003a32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6852      	ldr	r2, [r2, #4]
 8003a3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d103      	bne.n	8003a50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a9a:	f002 fb2b 	bl	80060f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	441a      	add	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	3b01      	subs	r3, #1
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	441a      	add	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	22ff      	movs	r2, #255	; 0xff
 8003ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	22ff      	movs	r2, #255	; 0xff
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d114      	bne.n	8003b1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01a      	beq.n	8003b2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3310      	adds	r3, #16
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fadf 	bl	80050c0 <xTaskRemoveFromEventList>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <xQueueGenericReset+0xcc>)
 8003b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	e009      	b.n	8003b2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fef2 	bl	8003908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff feed 	bl	8003908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b2e:	f002 fb11 	bl	8006154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08e      	sub	sp, #56	; 0x38
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <xQueueGenericCreateStatic+0x52>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <xQueueGenericCreateStatic+0x56>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <xQueueGenericCreateStatic+0x58>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	623b      	str	r3, [r7, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <xQueueGenericCreateStatic+0x7e>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <xQueueGenericCreateStatic+0x82>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <xQueueGenericCreateStatic+0x84>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	61fb      	str	r3, [r7, #28]
}
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bde:	2350      	movs	r3, #80	; 0x50
 8003be0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d00a      	beq.n	8003bfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	61bb      	str	r3, [r7, #24]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003bfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f83f 	bl	8003ca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3730      	adds	r7, #48	; 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	613b      	str	r3, [r7, #16]
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3350      	adds	r3, #80	; 0x50
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f002 fb65 	bl	8006338 <pvPortMalloc>
 8003c6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d011      	beq.n	8003c9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	3350      	adds	r3, #80	; 0x50
 8003c7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c88:	79fa      	ldrb	r2, [r7, #7]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f805 	bl	8003ca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e002      	b.n	8003cc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	69b8      	ldr	r0, [r7, #24]
 8003cd6:	f7ff fecb 	bl	8003a70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08e      	sub	sp, #56	; 0x38
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <xQueueGenericSend+0x32>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d103      	bne.n	8003d2c <xQueueGenericSend+0x40>
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <xQueueGenericSend+0x44>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <xQueueGenericSend+0x46>
 8003d30:	2300      	movs	r3, #0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <xQueueGenericSend+0x60>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d103      	bne.n	8003d5a <xQueueGenericSend+0x6e>
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <xQueueGenericSend+0x72>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <xQueueGenericSend+0x74>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <xQueueGenericSend+0x8e>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	623b      	str	r3, [r7, #32]
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d7a:	f001 fb5f 	bl	800543c <xTaskGetSchedulerState>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <xQueueGenericSend+0x9e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <xQueueGenericSend+0xa2>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <xQueueGenericSend+0xa4>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <xQueueGenericSend+0xbe>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	61fb      	str	r3, [r7, #28]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003daa:	f002 f9a3 	bl	80060f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <xQueueGenericSend+0xd4>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d129      	bne.n	8003e14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc6:	f000 fb2f 	bl	8004428 <prvCopyDataToQueue>
 8003dca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f971 	bl	80050c0 <xTaskRemoveFromEventList>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003de4:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <xQueueGenericSend+0x1f8>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	e00a      	b.n	8003e0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <xQueueGenericSend+0x1f8>)
 8003dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e0c:	f002 f9a2 	bl	8006154 <vPortExitCritical>
				return pdPASS;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e063      	b.n	8003edc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d103      	bne.n	8003e22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e1a:	f002 f99b 	bl	8006154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e05c      	b.n	8003edc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 f9ab 	bl	8005188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e36:	f002 f98d 	bl	8006154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e3a:	f000 ff1d 	bl	8004c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e3e:	f002 f959 	bl	80060f4 <vPortEnterCritical>
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e48:	b25b      	sxtb	r3, r3
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d103      	bne.n	8003e58 <xQueueGenericSend+0x16c>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d103      	bne.n	8003e6e <xQueueGenericSend+0x182>
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e6e:	f002 f971 	bl	8006154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e72:	1d3a      	adds	r2, r7, #4
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 f99a 	bl	80051b4 <xTaskCheckForTimeOut>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d124      	bne.n	8003ed0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e88:	f000 fbc6 	bl	8004618 <prvIsQueueFull>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d018      	beq.n	8003ec4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	3310      	adds	r3, #16
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f8c0 	bl	8005020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea2:	f000 fb51 	bl	8004548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ea6:	f000 fef5 	bl	8004c94 <xTaskResumeAll>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f47f af7c 	bne.w	8003daa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <xQueueGenericSend+0x1f8>)
 8003eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	e772      	b.n	8003daa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ec6:	f000 fb3f 	bl	8004548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eca:	f000 fee3 	bl	8004c94 <xTaskResumeAll>
 8003ece:	e76c      	b.n	8003daa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ed2:	f000 fb39 	bl	8004548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ed6:	f000 fedd 	bl	8004c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003eda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3738      	adds	r7, #56	; 0x38
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b090      	sub	sp, #64	; 0x40
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <xQueueGenericSendFromISR+0x3c>
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <xQueueGenericSendFromISR+0x40>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <xQueueGenericSendFromISR+0x42>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d103      	bne.n	8003f52 <xQueueGenericSendFromISR+0x6a>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <xQueueGenericSendFromISR+0x6e>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <xQueueGenericSendFromISR+0x70>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	623b      	str	r3, [r7, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f72:	f002 f9a1 	bl	80062b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f76:	f3ef 8211 	mrs	r2, BASEPRI
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	61fa      	str	r2, [r7, #28]
 8003f8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <xQueueGenericSendFromISR+0xbc>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d12f      	bne.n	8004004 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fba:	f000 fa35 	bl	8004428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d112      	bne.n	8003fee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d016      	beq.n	8003ffe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	3324      	adds	r3, #36	; 0x24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 f873 	bl	80050c0 <xTaskRemoveFromEventList>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e007      	b.n	8003ffe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	b25a      	sxtb	r2, r3
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ffe:	2301      	movs	r3, #1
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004002:	e001      	b.n	8004008 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004004:	2300      	movs	r3, #0
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004012:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004016:	4618      	mov	r0, r3
 8004018:	3740      	adds	r7, #64	; 0x40
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	; 0x30
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <xQueueReceive+0x30>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	623b      	str	r3, [r7, #32]
}
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <xQueueReceive+0x3e>
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <xQueueReceive+0x42>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <xQueueReceive+0x44>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xQueueReceive+0x5e>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	61fb      	str	r3, [r7, #28]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800407e:	f001 f9dd 	bl	800543c <xTaskGetSchedulerState>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <xQueueReceive+0x6e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <xQueueReceive+0x72>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <xQueueReceive+0x74>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <xQueueReceive+0x8e>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	61bb      	str	r3, [r7, #24]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ae:	f002 f821 	bl	80060f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01f      	beq.n	80040fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c2:	f000 fa1b 	bl	80044fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00f      	beq.n	80040f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	3310      	adds	r3, #16
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fff0 	bl	80050c0 <xTaskRemoveFromEventList>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <xQueueReceive+0x1bc>)
 80040e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040f6:	f002 f82d 	bl	8006154 <vPortExitCritical>
				return pdPASS;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e069      	b.n	80041d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004104:	f002 f826 	bl	8006154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004108:	2300      	movs	r3, #0
 800410a:	e062      	b.n	80041d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004112:	f107 0310 	add.w	r3, r7, #16
 8004116:	4618      	mov	r0, r3
 8004118:	f001 f836 	bl	8005188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004120:	f002 f818 	bl	8006154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004124:	f000 fda8 	bl	8004c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004128:	f001 ffe4 	bl	80060f4 <vPortEnterCritical>
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004132:	b25b      	sxtb	r3, r3
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d103      	bne.n	8004142 <xQueueReceive+0x122>
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004148:	b25b      	sxtb	r3, r3
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d103      	bne.n	8004158 <xQueueReceive+0x138>
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004158:	f001 fffc 	bl	8006154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800415c:	1d3a      	adds	r2, r7, #4
 800415e:	f107 0310 	add.w	r3, r7, #16
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f825 	bl	80051b4 <xTaskCheckForTimeOut>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d123      	bne.n	80041b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004172:	f000 fa3b 	bl	80045ec <prvIsQueueEmpty>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d017      	beq.n	80041ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	3324      	adds	r3, #36	; 0x24
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f000 ff4b 	bl	8005020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800418a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800418c:	f000 f9dc 	bl	8004548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004190:	f000 fd80 	bl	8004c94 <xTaskResumeAll>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d189      	bne.n	80040ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <xQueueReceive+0x1bc>)
 800419c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	e780      	b.n	80040ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ae:	f000 f9cb 	bl	8004548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041b2:	f000 fd6f 	bl	8004c94 <xTaskResumeAll>
 80041b6:	e77a      	b.n	80040ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ba:	f000 f9c5 	bl	8004548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041be:	f000 fd69 	bl	8004c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c4:	f000 fa12 	bl	80045ec <prvIsQueueEmpty>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f43f af6f 	beq.w	80040ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3730      	adds	r7, #48	; 0x30
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08e      	sub	sp, #56	; 0x38
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	623b      	str	r3, [r7, #32]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	61fb      	str	r3, [r7, #28]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004230:	f001 f904 	bl	800543c <xTaskGetSchedulerState>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <xQueueSemaphoreTake+0x60>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <xQueueSemaphoreTake+0x64>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <xQueueSemaphoreTake+0x66>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	61bb      	str	r3, [r7, #24]
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004260:	f001 ff48 	bl	80060f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	d024      	beq.n	80042ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	1e5a      	subs	r2, r3, #1
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004280:	f001 fa52 	bl	8005728 <pvTaskIncrementMutexHeldCount>
 8004284:	4602      	mov	r2, r0
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00f      	beq.n	80042b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	3310      	adds	r3, #16
 8004296:	4618      	mov	r0, r3
 8004298:	f000 ff12 	bl	80050c0 <xTaskRemoveFromEventList>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042a2:	4b54      	ldr	r3, [pc, #336]	; (80043f4 <xQueueSemaphoreTake+0x214>)
 80042a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042b2:	f001 ff4f 	bl	8006154 <vPortExitCritical>
				return pdPASS;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e097      	b.n	80043ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	617b      	str	r3, [r7, #20]
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80042dc:	f001 ff3a 	bl	8006154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e082      	b.n	80043ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042ea:	f107 030c 	add.w	r3, r7, #12
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 ff4a 	bl	8005188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042f8:	f001 ff2c 	bl	8006154 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042fc:	f000 fcbc 	bl	8004c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004300:	f001 fef8 	bl	80060f4 <vPortEnterCritical>
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430a:	b25b      	sxtb	r3, r3
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d103      	bne.n	800431a <xQueueSemaphoreTake+0x13a>
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004320:	b25b      	sxtb	r3, r3
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d103      	bne.n	8004330 <xQueueSemaphoreTake+0x150>
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004330:	f001 ff10 	bl	8006154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004334:	463a      	mov	r2, r7
 8004336:	f107 030c 	add.w	r3, r7, #12
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 ff39 	bl	80051b4 <xTaskCheckForTimeOut>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d132      	bne.n	80043ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800434a:	f000 f94f 	bl	80045ec <prvIsQueueEmpty>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d026      	beq.n	80043a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800435c:	f001 feca 	bl	80060f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4618      	mov	r0, r3
 8004366:	f001 f887 	bl	8005478 <xTaskPriorityInherit>
 800436a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800436c:	f001 fef2 	bl	8006154 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fe51 	bl	8005020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800437e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004380:	f000 f8e2 	bl	8004548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004384:	f000 fc86 	bl	8004c94 <xTaskResumeAll>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f47f af68 	bne.w	8004260 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004390:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <xQueueSemaphoreTake+0x214>)
 8004392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	e75e      	b.n	8004260 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043a4:	f000 f8d0 	bl	8004548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043a8:	f000 fc74 	bl	8004c94 <xTaskResumeAll>
 80043ac:	e758      	b.n	8004260 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043b0:	f000 f8ca 	bl	8004548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b4:	f000 fc6e 	bl	8004c94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043ba:	f000 f917 	bl	80045ec <prvIsQueueEmpty>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f43f af4d 	beq.w	8004260 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80043cc:	f001 fe92 	bl	80060f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043d2:	f000 f811 	bl	80043f8 <prvGetDisinheritPriorityAfterTimeout>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 f920 	bl	8005624 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80043e4:	f001 feb6 	bl	8006154 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3738      	adds	r7, #56	; 0x38
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	d006      	beq.n	8004416 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e001      	b.n	800441a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800441a:	68fb      	ldr	r3, [r7, #12]
	}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d14d      	bne.n	80044ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f001 f878 	bl	8005548 <xTaskPriorityDisinherit>
 8004458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	e043      	b.n	80044ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d119      	bne.n	800449c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6858      	ldr	r0, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	461a      	mov	r2, r3
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	f002 f96e 	bl	8006754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	441a      	add	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d32b      	bcc.n	80044ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	e026      	b.n	80044ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68d8      	ldr	r0, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	461a      	mov	r2, r3
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	f002 f954 	bl	8006754 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	425b      	negs	r3, r3
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d207      	bcs.n	80044d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	425b      	negs	r3, r3
 80044d2:	441a      	add	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d105      	bne.n	80044ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d018      	beq.n	8004540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	441a      	add	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	d303      	bcc.n	8004530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	461a      	mov	r2, r3
 800453a:	6838      	ldr	r0, [r7, #0]
 800453c:	f002 f90a 	bl	8006754 <memcpy>
	}
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004550:	f001 fdd0 	bl	80060f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800455c:	e011      	b.n	8004582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	2b00      	cmp	r3, #0
 8004564:	d012      	beq.n	800458c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3324      	adds	r3, #36	; 0x24
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fda8 	bl	80050c0 <xTaskRemoveFromEventList>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004576:	f000 fe7f 	bl	8005278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	3b01      	subs	r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	dce9      	bgt.n	800455e <prvUnlockQueue+0x16>
 800458a:	e000      	b.n	800458e <prvUnlockQueue+0x46>
					break;
 800458c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004596:	f001 fddd 	bl	8006154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800459a:	f001 fdab 	bl	80060f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045a6:	e011      	b.n	80045cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d012      	beq.n	80045d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3310      	adds	r3, #16
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fd83 	bl	80050c0 <xTaskRemoveFromEventList>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045c0:	f000 fe5a 	bl	8005278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045c4:	7bbb      	ldrb	r3, [r7, #14]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dce9      	bgt.n	80045a8 <prvUnlockQueue+0x60>
 80045d4:	e000      	b.n	80045d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	22ff      	movs	r2, #255	; 0xff
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045e0:	f001 fdb8 	bl	8006154 <vPortExitCritical>
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045f4:	f001 fd7e 	bl	80060f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e001      	b.n	800460a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800460a:	f001 fda3 	bl	8006154 <vPortExitCritical>

	return xReturn;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004620:	f001 fd68 	bl	80060f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	429a      	cmp	r2, r3
 800462e:	d102      	bne.n	8004636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e001      	b.n	800463a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800463a:	f001 fd8b 	bl	8006154 <vPortExitCritical>

	return xReturn;
 800463e:	68fb      	ldr	r3, [r7, #12]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e014      	b.n	8004682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004658:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <vQueueAddToRegistry+0x50>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004664:	490c      	ldr	r1, [pc, #48]	; (8004698 <vQueueAddToRegistry+0x50>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <vQueueAddToRegistry+0x50>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800467a:	e006      	b.n	800468a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b07      	cmp	r3, #7
 8004686:	d9e7      	bls.n	8004658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20001dc8 	.word	0x20001dc8

0800469c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046ac:	f001 fd22 	bl	80060f4 <vPortEnterCritical>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b6:	b25b      	sxtb	r3, r3
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d103      	bne.n	80046c6 <vQueueWaitForMessageRestricted+0x2a>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d103      	bne.n	80046dc <vQueueWaitForMessageRestricted+0x40>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046dc:	f001 fd3a 	bl	8006154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3324      	adds	r3, #36	; 0x24
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fcb9 	bl	8005068 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046f6:	6978      	ldr	r0, [r7, #20]
 80046f8:	f7ff ff26 	bl	8004548 <prvUnlockQueue>
	}
 80046fc:	bf00      	nop
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08e      	sub	sp, #56	; 0x38
 8004708:	af04      	add	r7, sp, #16
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	623b      	str	r3, [r7, #32]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xTaskCreateStatic+0x46>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61fb      	str	r3, [r7, #28]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800474a:	235c      	movs	r3, #92	; 0x5c
 800474c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b5c      	cmp	r3, #92	; 0x5c
 8004752:	d00a      	beq.n	800476a <xTaskCreateStatic+0x66>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61bb      	str	r3, [r7, #24]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800476a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01e      	beq.n	80047b0 <xTaskCreateStatic+0xac>
 8004772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004780:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	2202      	movs	r2, #2
 8004786:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800478a:	2300      	movs	r3, #0
 800478c:	9303      	str	r3, [sp, #12]
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9302      	str	r3, [sp, #8]
 8004792:	f107 0314 	add.w	r3, r7, #20
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f850 	bl	8004848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047aa:	f000 f8dd 	bl	8004968 <prvAddNewTaskToReadyList>
 80047ae:	e001      	b.n	80047b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047b4:	697b      	ldr	r3, [r7, #20]
	}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b08c      	sub	sp, #48	; 0x30
 80047c2:	af04      	add	r7, sp, #16
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fdb0 	bl	8006338 <pvPortMalloc>
 80047d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047e0:	205c      	movs	r0, #92	; 0x5c
 80047e2:	f001 fda9 	bl	8006338 <pvPortMalloc>
 80047e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
 80047f4:	e005      	b.n	8004802 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047f6:	6978      	ldr	r0, [r7, #20]
 80047f8:	f001 fe6a 	bl	80064d0 <vPortFree>
 80047fc:	e001      	b.n	8004802 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d017      	beq.n	8004838 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004810:	88fa      	ldrh	r2, [r7, #6]
 8004812:	2300      	movs	r3, #0
 8004814:	9303      	str	r3, [sp, #12]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	9302      	str	r3, [sp, #8]
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f80e 	bl	8004848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800482c:	69f8      	ldr	r0, [r7, #28]
 800482e:	f000 f89b 	bl	8004968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e002      	b.n	800483e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800483e:	69bb      	ldr	r3, [r7, #24]
	}
 8004840:	4618      	mov	r0, r3
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	461a      	mov	r2, r3
 8004860:	21a5      	movs	r1, #165	; 0xa5
 8004862:	f001 ff85 	bl	8006770 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004870:	3b01      	subs	r3, #1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	617b      	str	r3, [r7, #20]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01f      	beq.n	80048e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e012      	b.n	80048d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	7819      	ldrb	r1, [r3, #0]
 80048b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	3334      	adds	r3, #52	; 0x34
 80048bc:	460a      	mov	r2, r1
 80048be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d006      	beq.n	80048da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	3301      	adds	r3, #1
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d9e9      	bls.n	80048ac <prvInitialiseNewTask+0x64>
 80048d8:	e000      	b.n	80048dc <prvInitialiseNewTask+0x94>
			{
				break;
 80048da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048e4:	e003      	b.n	80048ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	2b37      	cmp	r3, #55	; 0x37
 80048f2:	d901      	bls.n	80048f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048f4:	2337      	movs	r3, #55	; 0x37
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004902:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	2200      	movs	r2, #0
 8004908:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f81a 	bl	8003948 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	3318      	adds	r3, #24
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff f815 	bl	8003948 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	69b8      	ldr	r0, [r7, #24]
 8004948:	f001 faa4 	bl	8005e94 <pxPortInitialiseStack>
 800494c:	4602      	mov	r2, r0
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800495e:	bf00      	nop
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004970:	f001 fbc0 	bl	80060f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004974:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 800497c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800497e:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004986:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d110      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004994:	f000 fc94 	bl	80052c0 <prvInitialiseTaskLists>
 8004998:	e00d      	b.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <prvAddNewTaskToReadyList+0xcc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d802      	bhi.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049b0:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <prvAddNewTaskToReadyList+0xd4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d903      	bls.n	80049dc <prvAddNewTaskToReadyList+0x74>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <prvAddNewTaskToReadyList+0xd4>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <prvAddNewTaskToReadyList+0xd8>)
 80049ea:	441a      	add	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fe ffb5 	bl	8003962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049f8:	f001 fbac 	bl	8006154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <prvAddNewTaskToReadyList+0xcc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00e      	beq.n	8004a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d207      	bcs.n	8004a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <prvAddNewTaskToReadyList+0xdc>)
 8004a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000bc0 	.word	0x20000bc0
 8004a30:	200006ec 	.word	0x200006ec
 8004a34:	20000bcc 	.word	0x20000bcc
 8004a38:	20000bdc 	.word	0x20000bdc
 8004a3c:	20000bc8 	.word	0x20000bc8
 8004a40:	200006f0 	.word	0x200006f0
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	617b      	str	r3, [r7, #20]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <vTaskDelayUntil+0x46>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	613b      	str	r3, [r7, #16]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	; (8004b38 <vTaskDelayUntil+0xf0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <vTaskDelayUntil+0x64>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	60fb      	str	r3, [r7, #12]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004aac:	f000 f8e4 	bl	8004c78 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004ab0:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <vTaskDelayUntil+0xf4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d20b      	bcs.n	8004ae2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d211      	bcs.n	8004af8 <vTaskDelayUntil+0xb0>
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d90d      	bls.n	8004af8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae0:	e00a      	b.n	8004af8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d303      	bcc.n	8004af4 <vTaskDelayUntil+0xac>
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d901      	bls.n	8004af8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d006      	beq.n	8004b12 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fe1f 	bl	8005750 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004b12:	f000 f8bf 	bl	8004c94 <xTaskResumeAll>
 8004b16:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <vTaskDelayUntil+0xf8>)
 8004b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b2e:	bf00      	nop
 8004b30:	3728      	adds	r7, #40	; 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000be8 	.word	0x20000be8
 8004b3c:	20000bc4 	.word	0x20000bc4
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d017      	beq.n	8004b86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <vTaskDelay+0x60>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <vTaskDelay+0x30>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60bb      	str	r3, [r7, #8]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b74:	f000 f880 	bl	8004c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b78:	2100      	movs	r1, #0
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fde8 	bl	8005750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b80:	f000 f888 	bl	8004c94 <xTaskResumeAll>
 8004b84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d107      	bne.n	8004b9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <vTaskDelay+0x64>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000be8 	.word	0x20000be8
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bba:	463a      	mov	r2, r7
 8004bbc:	1d39      	adds	r1, r7, #4
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fe6c 	bl	80038a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	460a      	mov	r2, r1
 8004bda:	4921      	ldr	r1, [pc, #132]	; (8004c60 <vTaskStartScheduler+0xb4>)
 8004bdc:	4821      	ldr	r0, [pc, #132]	; (8004c64 <vTaskStartScheduler+0xb8>)
 8004bde:	f7ff fd91 	bl	8004704 <xTaskCreateStatic>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <vTaskStartScheduler+0xbc>)
 8004be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004be8:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <vTaskStartScheduler+0xbc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e001      	b.n	8004bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c00:	f000 fdfa 	bl	80057f8 <xTimerCreateTimerTask>
 8004c04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d116      	bne.n	8004c3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	613b      	str	r3, [r7, #16]
}
 8004c1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <vTaskStartScheduler+0xc0>)
 8004c22:	f04f 32ff 	mov.w	r2, #4294967295
 8004c26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c28:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <vTaskStartScheduler+0xc4>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <vTaskStartScheduler+0xc8>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c34:	f001 f9bc 	bl	8005fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c38:	e00e      	b.n	8004c58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d10a      	bne.n	8004c58 <vTaskStartScheduler+0xac>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60fb      	str	r3, [r7, #12]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <vTaskStartScheduler+0xaa>
}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	080067cc 	.word	0x080067cc
 8004c64:	08005291 	.word	0x08005291
 8004c68:	20000be4 	.word	0x20000be4
 8004c6c:	20000be0 	.word	0x20000be0
 8004c70:	20000bcc 	.word	0x20000bcc
 8004c74:	20000bc4 	.word	0x20000bc4

08004c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c7c:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <vTaskSuspendAll+0x18>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <vTaskSuspendAll+0x18>)
 8004c84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000be8 	.word	0x20000be8

08004c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ca2:	4b42      	ldr	r3, [pc, #264]	; (8004dac <xTaskResumeAll+0x118>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	603b      	str	r3, [r7, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cc0:	f001 fa18 	bl	80060f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <xTaskResumeAll+0x118>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	4a38      	ldr	r2, [pc, #224]	; (8004dac <xTaskResumeAll+0x118>)
 8004ccc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <xTaskResumeAll+0x118>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d162      	bne.n	8004d9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <xTaskResumeAll+0x11c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d05e      	beq.n	8004d9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cde:	e02f      	b.n	8004d40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce0:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <xTaskResumeAll+0x120>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3318      	adds	r3, #24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe fe95 	bl	8003a1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fe90 	bl	8003a1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <xTaskResumeAll+0x124>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d903      	bls.n	8004d10 <xTaskResumeAll+0x7c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <xTaskResumeAll+0x124>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <xTaskResumeAll+0x128>)
 8004d1e:	441a      	add	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe fe1b 	bl	8003962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <xTaskResumeAll+0x12c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <xTaskResumeAll+0x130>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <xTaskResumeAll+0x120>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1cb      	bne.n	8004ce0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d4e:	f000 fb55 	bl	80053fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d52:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <xTaskResumeAll+0x134>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d010      	beq.n	8004d80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d5e:	f000 f847 	bl	8004df0 <xTaskIncrementTick>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <xTaskResumeAll+0x130>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f1      	bne.n	8004d5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <xTaskResumeAll+0x134>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <xTaskResumeAll+0x130>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <xTaskResumeAll+0x138>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d9c:	f001 f9da 	bl	8006154 <vPortExitCritical>

	return xAlreadyYielded;
 8004da0:	68bb      	ldr	r3, [r7, #8]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000be8 	.word	0x20000be8
 8004db0:	20000bc0 	.word	0x20000bc0
 8004db4:	20000b80 	.word	0x20000b80
 8004db8:	20000bc8 	.word	0x20000bc8
 8004dbc:	200006f0 	.word	0x200006f0
 8004dc0:	200006ec 	.word	0x200006ec
 8004dc4:	20000bd4 	.word	0x20000bd4
 8004dc8:	20000bd0 	.word	0x20000bd0
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <xTaskGetTickCount+0x1c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ddc:	687b      	ldr	r3, [r7, #4]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000bc4 	.word	0x20000bc4

08004df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	; (8004f38 <xTaskIncrementTick+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 808f 	bne.w	8004f22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e04:	4b4d      	ldr	r3, [pc, #308]	; (8004f3c <xTaskIncrementTick+0x14c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e0c:	4a4b      	ldr	r2, [pc, #300]	; (8004f3c <xTaskIncrementTick+0x14c>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d120      	bne.n	8004e5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e18:	4b49      	ldr	r3, [pc, #292]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	603b      	str	r3, [r7, #0]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xTaskIncrementTick+0x46>
 8004e38:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <xTaskIncrementTick+0x154>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <xTaskIncrementTick+0x154>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <xTaskIncrementTick+0x158>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3301      	adds	r3, #1
 8004e52:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <xTaskIncrementTick+0x158>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	f000 fad1 	bl	80053fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e5a:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <xTaskIncrementTick+0x15c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d349      	bcc.n	8004ef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e64:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e6e:	4b37      	ldr	r3, [pc, #220]	; (8004f4c <xTaskIncrementTick+0x15c>)
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	601a      	str	r2, [r3, #0]
					break;
 8004e76:	e03f      	b.n	8004ef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e78:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d203      	bcs.n	8004e98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e90:	4a2e      	ldr	r2, [pc, #184]	; (8004f4c <xTaskIncrementTick+0x15c>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e96:	e02f      	b.n	8004ef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fdbd 	bl	8003a1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fdb4 	bl	8003a1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <xTaskIncrementTick+0x160>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d903      	bls.n	8004ec8 <xTaskIncrementTick+0xd8>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <xTaskIncrementTick+0x160>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <xTaskIncrementTick+0x164>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fe fd3f 	bl	8003962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <xTaskIncrementTick+0x168>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3b8      	bcc.n	8004e64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	e7b5      	b.n	8004e64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <xTaskIncrementTick+0x168>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efe:	4915      	ldr	r1, [pc, #84]	; (8004f54 <xTaskIncrementTick+0x164>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d901      	bls.n	8004f14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <xTaskIncrementTick+0x16c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e004      	b.n	8004f2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <xTaskIncrementTick+0x170>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <xTaskIncrementTick+0x170>)
 8004f2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f2c:	697b      	ldr	r3, [r7, #20]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000be8 	.word	0x20000be8
 8004f3c:	20000bc4 	.word	0x20000bc4
 8004f40:	20000b78 	.word	0x20000b78
 8004f44:	20000b7c 	.word	0x20000b7c
 8004f48:	20000bd8 	.word	0x20000bd8
 8004f4c:	20000be0 	.word	0x20000be0
 8004f50:	20000bc8 	.word	0x20000bc8
 8004f54:	200006f0 	.word	0x200006f0
 8004f58:	200006ec 	.word	0x200006ec
 8004f5c:	20000bd4 	.word	0x20000bd4
 8004f60:	20000bd0 	.word	0x20000bd0

08004f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f6a:	4b28      	ldr	r3, [pc, #160]	; (800500c <vTaskSwitchContext+0xa8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f72:	4b27      	ldr	r3, [pc, #156]	; (8005010 <vTaskSwitchContext+0xac>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f78:	e041      	b.n	8004ffe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004f7a:	4b25      	ldr	r3, [pc, #148]	; (8005010 <vTaskSwitchContext+0xac>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f80:	4b24      	ldr	r3, [pc, #144]	; (8005014 <vTaskSwitchContext+0xb0>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e010      	b.n	8004faa <vTaskSwitchContext+0x46>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vTaskSwitchContext+0x3e>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	491b      	ldr	r1, [pc, #108]	; (8005018 <vTaskSwitchContext+0xb4>)
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0e4      	beq.n	8004f88 <vTaskSwitchContext+0x24>
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <vTaskSwitchContext+0xb4>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d104      	bne.n	8004fee <vTaskSwitchContext+0x8a>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a09      	ldr	r2, [pc, #36]	; (800501c <vTaskSwitchContext+0xb8>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4a06      	ldr	r2, [pc, #24]	; (8005014 <vTaskSwitchContext+0xb0>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6013      	str	r3, [r2, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000be8 	.word	0x20000be8
 8005010:	20000bd4 	.word	0x20000bd4
 8005014:	20000bc8 	.word	0x20000bc8
 8005018:	200006f0 	.word	0x200006f0
 800501c:	200006ec 	.word	0x200006ec

08005020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <vTaskPlaceOnEventList+0x44>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3318      	adds	r3, #24
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fe fcab 	bl	80039aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005054:	2101      	movs	r1, #1
 8005056:	6838      	ldr	r0, [r7, #0]
 8005058:	f000 fb7a 	bl	8005750 <prvAddCurrentTaskToDelayedList>
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200006ec 	.word	0x200006ec

08005068 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	617b      	str	r3, [r7, #20]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3318      	adds	r3, #24
 8005096:	4619      	mov	r1, r3
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7fe fc62 	bl	8003962 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68b8      	ldr	r0, [r7, #8]
 80050ae:	f000 fb4f 	bl	8005750 <prvAddCurrentTaskToDelayedList>
	}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200006ec 	.word	0x200006ec

080050c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	3318      	adds	r3, #24
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fc93 	bl	8003a1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050f6:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <xTaskRemoveFromEventList+0xb0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11d      	bne.n	800513a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3304      	adds	r3, #4
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fc8a 	bl	8003a1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <xTaskRemoveFromEventList+0xb4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d903      	bls.n	800511c <xTaskRemoveFromEventList+0x5c>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	4a16      	ldr	r2, [pc, #88]	; (8005174 <xTaskRemoveFromEventList+0xb4>)
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4a13      	ldr	r2, [pc, #76]	; (8005178 <xTaskRemoveFromEventList+0xb8>)
 800512a:	441a      	add	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7fe fc15 	bl	8003962 <vListInsertEnd>
 8005138:	e005      	b.n	8005146 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3318      	adds	r3, #24
 800513e:	4619      	mov	r1, r3
 8005140:	480e      	ldr	r0, [pc, #56]	; (800517c <xTaskRemoveFromEventList+0xbc>)
 8005142:	f7fe fc0e 	bl	8003962 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <xTaskRemoveFromEventList+0xc0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	429a      	cmp	r2, r3
 8005152:	d905      	bls.n	8005160 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005154:	2301      	movs	r3, #1
 8005156:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <xTaskRemoveFromEventList+0xc4>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e001      	b.n	8005164 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005164:	697b      	ldr	r3, [r7, #20]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000be8 	.word	0x20000be8
 8005174:	20000bc8 	.word	0x20000bc8
 8005178:	200006f0 	.word	0x200006f0
 800517c:	20000b80 	.word	0x20000b80
 8005180:	200006ec 	.word	0x200006ec
 8005184:	20000bd4 	.word	0x20000bd4

08005188 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005190:	4b06      	ldr	r3, [pc, #24]	; (80051ac <vTaskInternalSetTimeOutState+0x24>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <vTaskInternalSetTimeOutState+0x28>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	605a      	str	r2, [r3, #4]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	20000bd8 	.word	0x20000bd8
 80051b0:	20000bc4 	.word	0x20000bc4

080051b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	613b      	str	r3, [r7, #16]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80051f6:	f000 ff7d 	bl	80060f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <xTaskCheckForTimeOut+0xbc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d102      	bne.n	800521a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e023      	b.n	8005262 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b15      	ldr	r3, [pc, #84]	; (8005274 <xTaskCheckForTimeOut+0xc0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d007      	beq.n	8005236 <xTaskCheckForTimeOut+0x82>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005230:	2301      	movs	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e015      	b.n	8005262 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	429a      	cmp	r2, r3
 800523e:	d20b      	bcs.n	8005258 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff9b 	bl	8005188 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	e004      	b.n	8005262 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800525e:	2301      	movs	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005262:	f000 ff77 	bl	8006154 <vPortExitCritical>

	return xReturn;
 8005266:	69fb      	ldr	r3, [r7, #28]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000bc4 	.word	0x20000bc4
 8005274:	20000bd8 	.word	0x20000bd8

08005278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <vTaskMissedYield+0x14>)
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000bd4 	.word	0x20000bd4

08005290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005298:	f000 f852 	bl	8005340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <prvIdleTask+0x28>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d9f9      	bls.n	8005298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <prvIdleTask+0x2c>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052b4:	e7f0      	b.n	8005298 <prvIdleTask+0x8>
 80052b6:	bf00      	nop
 80052b8:	200006f0 	.word	0x200006f0
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052c6:	2300      	movs	r3, #0
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	e00c      	b.n	80052e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <prvInitialiseTaskLists+0x60>)
 80052d8:	4413      	add	r3, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fb14 	bl	8003908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3301      	adds	r3, #1
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b37      	cmp	r3, #55	; 0x37
 80052ea:	d9ef      	bls.n	80052cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052ec:	480d      	ldr	r0, [pc, #52]	; (8005324 <prvInitialiseTaskLists+0x64>)
 80052ee:	f7fe fb0b 	bl	8003908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052f2:	480d      	ldr	r0, [pc, #52]	; (8005328 <prvInitialiseTaskLists+0x68>)
 80052f4:	f7fe fb08 	bl	8003908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052f8:	480c      	ldr	r0, [pc, #48]	; (800532c <prvInitialiseTaskLists+0x6c>)
 80052fa:	f7fe fb05 	bl	8003908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052fe:	480c      	ldr	r0, [pc, #48]	; (8005330 <prvInitialiseTaskLists+0x70>)
 8005300:	f7fe fb02 	bl	8003908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005304:	480b      	ldr	r0, [pc, #44]	; (8005334 <prvInitialiseTaskLists+0x74>)
 8005306:	f7fe faff 	bl	8003908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <prvInitialiseTaskLists+0x78>)
 800530c:	4a05      	ldr	r2, [pc, #20]	; (8005324 <prvInitialiseTaskLists+0x64>)
 800530e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <prvInitialiseTaskLists+0x7c>)
 8005312:	4a05      	ldr	r2, [pc, #20]	; (8005328 <prvInitialiseTaskLists+0x68>)
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	200006f0 	.word	0x200006f0
 8005324:	20000b50 	.word	0x20000b50
 8005328:	20000b64 	.word	0x20000b64
 800532c:	20000b80 	.word	0x20000b80
 8005330:	20000b94 	.word	0x20000b94
 8005334:	20000bac 	.word	0x20000bac
 8005338:	20000b78 	.word	0x20000b78
 800533c:	20000b7c 	.word	0x20000b7c

08005340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005346:	e019      	b.n	800537c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005348:	f000 fed4 	bl	80060f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534c:	4b10      	ldr	r3, [pc, #64]	; (8005390 <prvCheckTasksWaitingTermination+0x50>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fb5f 	bl	8003a1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <prvCheckTasksWaitingTermination+0x54>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	4a0b      	ldr	r2, [pc, #44]	; (8005394 <prvCheckTasksWaitingTermination+0x54>)
 8005366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <prvCheckTasksWaitingTermination+0x58>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3b01      	subs	r3, #1
 800536e:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <prvCheckTasksWaitingTermination+0x58>)
 8005370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005372:	f000 feef 	bl	8006154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f810 	bl	800539c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <prvCheckTasksWaitingTermination+0x58>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e1      	bne.n	8005348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000b94 	.word	0x20000b94
 8005394:	20000bc0 	.word	0x20000bc0
 8005398:	20000ba8 	.word	0x20000ba8

0800539c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d108      	bne.n	80053c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 f88c 	bl	80064d0 <vPortFree>
				vPortFree( pxTCB );
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 f889 	bl	80064d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053be:	e018      	b.n	80053f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d103      	bne.n	80053d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 f880 	bl	80064d0 <vPortFree>
	}
 80053d0:	e00f      	b.n	80053f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d00a      	beq.n	80053f2 <prvDeleteTCB+0x56>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60fb      	str	r3, [r7, #12]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <prvDeleteTCB+0x54>
	}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <prvResetNextTaskUnblockTime+0x38>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <prvResetNextTaskUnblockTime+0x3c>)
 800540e:	f04f 32ff 	mov.w	r2, #4294967295
 8005412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005414:	e008      	b.n	8005428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <prvResetNextTaskUnblockTime+0x38>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <prvResetNextTaskUnblockTime+0x3c>)
 8005426:	6013      	str	r3, [r2, #0]
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	20000b78 	.word	0x20000b78
 8005438:	20000be0 	.word	0x20000be0

0800543c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <xTaskGetSchedulerState+0x34>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800544a:	2301      	movs	r3, #1
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	e008      	b.n	8005462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <xTaskGetSchedulerState+0x38>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005458:	2302      	movs	r3, #2
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	e001      	b.n	8005462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800545e:	2300      	movs	r3, #0
 8005460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005462:	687b      	ldr	r3, [r7, #4]
	}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000bcc 	.word	0x20000bcc
 8005474:	20000be8 	.word	0x20000be8

08005478 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d051      	beq.n	8005532 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005492:	4b2a      	ldr	r3, [pc, #168]	; (800553c <xTaskPriorityInherit+0xc4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	429a      	cmp	r2, r3
 800549a:	d241      	bcs.n	8005520 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db06      	blt.n	80054b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <xTaskPriorityInherit+0xc4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6959      	ldr	r1, [r3, #20]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <xTaskPriorityInherit+0xc8>)
 80054c4:	4413      	add	r3, r2
 80054c6:	4299      	cmp	r1, r3
 80054c8:	d122      	bne.n	8005510 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe faa4 	bl	8003a1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <xTaskPriorityInherit+0xc4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4b18      	ldr	r3, [pc, #96]	; (8005544 <xTaskPriorityInherit+0xcc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d903      	bls.n	80054f2 <xTaskPriorityInherit+0x7a>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <xTaskPriorityInherit+0xcc>)
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <xTaskPriorityInherit+0xc8>)
 8005500:	441a      	add	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7fe fa2a 	bl	8003962 <vListInsertEnd>
 800550e:	e004      	b.n	800551a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <xTaskPriorityInherit+0xc4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800551a:	2301      	movs	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e008      	b.n	8005532 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <xTaskPriorityInherit+0xc4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d201      	bcs.n	8005532 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800552e:	2301      	movs	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005532:	68fb      	ldr	r3, [r7, #12]
	}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	200006ec 	.word	0x200006ec
 8005540:	200006f0 	.word	0x200006f0
 8005544:	20000bc8 	.word	0x20000bc8

08005548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d056      	beq.n	800560c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800555e:	4b2e      	ldr	r3, [pc, #184]	; (8005618 <xTaskPriorityDisinherit+0xd0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d00a      	beq.n	800557e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60fb      	str	r3, [r7, #12]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60bb      	str	r3, [r7, #8]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d02c      	beq.n	800560c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d128      	bne.n	800560c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fa2c 	bl	8003a1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <xTaskPriorityDisinherit+0xd4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d903      	bls.n	80055ec <xTaskPriorityDisinherit+0xa4>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <xTaskPriorityDisinherit+0xd4>)
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <xTaskPriorityDisinherit+0xd8>)
 80055fa:	441a      	add	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7fe f9ad 	bl	8003962 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800560c:	697b      	ldr	r3, [r7, #20]
	}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	200006ec 	.word	0x200006ec
 800561c:	20000bc8 	.word	0x20000bc8
 8005620:	200006f0 	.word	0x200006f0

08005624 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005632:	2301      	movs	r3, #1
 8005634:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d06a      	beq.n	8005712 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d902      	bls.n	800566a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	e002      	b.n	8005670 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	429a      	cmp	r2, r3
 8005678:	d04b      	beq.n	8005712 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	429a      	cmp	r2, r3
 8005682:	d146      	bne.n	8005712 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	429a      	cmp	r2, r3
 800568c:	d10a      	bne.n	80056a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	60bb      	str	r3, [r7, #8]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	db04      	blt.n	80056c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4a13      	ldr	r2, [pc, #76]	; (8005720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80056d2:	4413      	add	r3, r2
 80056d4:	4299      	cmp	r1, r3
 80056d6:	d11c      	bne.n	8005712 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe f99d 	bl	8003a1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d903      	bls.n	80056f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4a07      	ldr	r2, [pc, #28]	; (8005720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005704:	441a      	add	r2, r3
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fe f928 	bl	8003962 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005712:	bf00      	nop
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200006ec 	.word	0x200006ec
 8005720:	200006f0 	.word	0x200006f0
 8005724:	20000bc8 	.word	0x20000bc8

08005728 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <pvTaskIncrementMutexHeldCount+0x24>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <pvTaskIncrementMutexHeldCount+0x24>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800573a:	3201      	adds	r2, #1
 800573c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800573e:	4b03      	ldr	r3, [pc, #12]	; (800574c <pvTaskIncrementMutexHeldCount+0x24>)
 8005740:	681b      	ldr	r3, [r3, #0]
	}
 8005742:	4618      	mov	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	200006ec 	.word	0x200006ec

08005750 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800575a:	4b21      	ldr	r3, [pc, #132]	; (80057e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005760:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe f958 	bl	8003a1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d10a      	bne.n	800578a <prvAddCurrentTaskToDelayedList+0x3a>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800577a:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3304      	adds	r3, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4819      	ldr	r0, [pc, #100]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005784:	f7fe f8ed 	bl	8003962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005788:	e026      	b.n	80057d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4413      	add	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005792:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d209      	bcs.n	80057b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7fe f8fb 	bl	80039aa <vListInsert>
}
 80057b4:	e010      	b.n	80057d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7fe f8f1 	bl	80039aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d202      	bcs.n	80057d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057d2:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6013      	str	r3, [r2, #0]
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20000bc4 	.word	0x20000bc4
 80057e4:	200006ec 	.word	0x200006ec
 80057e8:	20000bac 	.word	0x20000bac
 80057ec:	20000b7c 	.word	0x20000b7c
 80057f0:	20000b78 	.word	0x20000b78
 80057f4:	20000be0 	.word	0x20000be0

080057f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005802:	f000 fb07 	bl	8005e14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005806:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <xTimerCreateTimerTask+0x80>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d021      	beq.n	8005852 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005816:	1d3a      	adds	r2, r7, #4
 8005818:	f107 0108 	add.w	r1, r7, #8
 800581c:	f107 030c 	add.w	r3, r7, #12
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe f857 	bl	80038d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	9202      	str	r2, [sp, #8]
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	2302      	movs	r3, #2
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	460a      	mov	r2, r1
 8005838:	4910      	ldr	r1, [pc, #64]	; (800587c <xTimerCreateTimerTask+0x84>)
 800583a:	4811      	ldr	r0, [pc, #68]	; (8005880 <xTimerCreateTimerTask+0x88>)
 800583c:	f7fe ff62 	bl	8004704 <xTaskCreateStatic>
 8005840:	4603      	mov	r3, r0
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <xTimerCreateTimerTask+0x8c>)
 8005844:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <xTimerCreateTimerTask+0x8c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	613b      	str	r3, [r7, #16]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800586e:	697b      	ldr	r3, [r7, #20]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20000c1c 	.word	0x20000c1c
 800587c:	080067d4 	.word	0x080067d4
 8005880:	080059bd 	.word	0x080059bd
 8005884:	20000c20 	.word	0x20000c20

08005888 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005896:	2300      	movs	r3, #0
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058b6:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <xTimerGenericCommand+0x98>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d02a      	beq.n	8005914 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	dc18      	bgt.n	8005902 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058d0:	f7ff fdb4 	bl	800543c <xTaskGetSchedulerState>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d109      	bne.n	80058ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058da:	4b11      	ldr	r3, [pc, #68]	; (8005920 <xTimerGenericCommand+0x98>)
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	f107 0110 	add.w	r1, r7, #16
 80058e2:	2300      	movs	r3, #0
 80058e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e6:	f7fe fa01 	bl	8003cec <xQueueGenericSend>
 80058ea:	6278      	str	r0, [r7, #36]	; 0x24
 80058ec:	e012      	b.n	8005914 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <xTimerGenericCommand+0x98>)
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	f107 0110 	add.w	r1, r7, #16
 80058f6:	2300      	movs	r3, #0
 80058f8:	2200      	movs	r2, #0
 80058fa:	f7fe f9f7 	bl	8003cec <xQueueGenericSend>
 80058fe:	6278      	str	r0, [r7, #36]	; 0x24
 8005900:	e008      	b.n	8005914 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <xTimerGenericCommand+0x98>)
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	f107 0110 	add.w	r1, r7, #16
 800590a:	2300      	movs	r3, #0
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	f7fe faeb 	bl	8003ee8 <xQueueGenericSendFromISR>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005916:	4618      	mov	r0, r3
 8005918:	3728      	adds	r7, #40	; 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000c1c 	.word	0x20000c1c

08005924 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592e:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <prvProcessExpiredTimer+0x94>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	3304      	adds	r3, #4
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe f86d 	bl	8003a1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d022      	beq.n	8005996 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	18d1      	adds	r1, r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	6978      	ldr	r0, [r7, #20]
 800595e:	f000 f8d1 	bl	8005b04 <prvInsertTimerInActiveList>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01f      	beq.n	80059a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2300      	movs	r3, #0
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	2100      	movs	r1, #0
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	f7ff ff88 	bl	8005888 <xTimerGenericCommand>
 8005978:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d113      	bne.n	80059a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60fb      	str	r3, [r7, #12]
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	6978      	ldr	r0, [r7, #20]
 80059ae:	4798      	blx	r3
}
 80059b0:	bf00      	nop
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000c14 	.word	0x20000c14

080059bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f857 	bl	8005a7c <prvGetNextExpireTime>
 80059ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4619      	mov	r1, r3
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f803 	bl	80059e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059da:	f000 f8d5 	bl	8005b88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059de:	e7f1      	b.n	80059c4 <prvTimerTask+0x8>

080059e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059ea:	f7ff f945 	bl	8004c78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ee:	f107 0308 	add.w	r3, r7, #8
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f866 	bl	8005ac4 <prvSampleTimeNow>
 80059f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d130      	bne.n	8005a62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <prvProcessTimerOrBlockTask+0x3c>
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d806      	bhi.n	8005a1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a0e:	f7ff f941 	bl	8004c94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ff85 	bl	8005924 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a1a:	e024      	b.n	8005a66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <prvProcessTimerOrBlockTask+0x90>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <prvProcessTimerOrBlockTask+0x50>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <prvProcessTimerOrBlockTask+0x52>
 8005a30:	2300      	movs	r3, #0
 8005a32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a34:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <prvProcessTimerOrBlockTask+0x94>)
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	4619      	mov	r1, r3
 8005a42:	f7fe fe2b 	bl	800469c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a46:	f7ff f925 	bl	8004c94 <xTaskResumeAll>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <prvProcessTimerOrBlockTask+0x98>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
}
 8005a60:	e001      	b.n	8005a66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a62:	f7ff f917 	bl	8004c94 <xTaskResumeAll>
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000c18 	.word	0x20000c18
 8005a74:	20000c1c 	.word	0x20000c1c
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <prvGetNextExpireTime+0x44>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <prvGetNextExpireTime+0x16>
 8005a8e:	2201      	movs	r2, #1
 8005a90:	e000      	b.n	8005a94 <prvGetNextExpireTime+0x18>
 8005a92:	2200      	movs	r2, #0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <prvGetNextExpireTime+0x44>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e001      	b.n	8005ab0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000c14 	.word	0x20000c14

08005ac4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005acc:	f7ff f980 	bl	8004dd0 <xTaskGetTickCount>
 8005ad0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <prvSampleTimeNow+0x3c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d205      	bcs.n	8005ae8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005adc:	f000 f936 	bl	8005d4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e002      	b.n	8005aee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005aee:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <prvSampleTimeNow+0x3c>)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005af4:	68fb      	ldr	r3, [r7, #12]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000c24 	.word	0x20000c24

08005b04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d812      	bhi.n	8005b50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e01b      	b.n	8005b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <prvInsertTimerInActiveList+0x7c>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f7fd ff2e 	bl	80039aa <vListInsert>
 8005b4e:	e012      	b.n	8005b76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d206      	bcs.n	8005b66 <prvInsertTimerInActiveList+0x62>
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d302      	bcc.n	8005b66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e007      	b.n	8005b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <prvInsertTimerInActiveList+0x80>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f7fd ff1a 	bl	80039aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b76:	697b      	ldr	r3, [r7, #20]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000c18 	.word	0x20000c18
 8005b84:	20000c14 	.word	0x20000c14

08005b88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08e      	sub	sp, #56	; 0x38
 8005b8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b8e:	e0ca      	b.n	8005d26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da18      	bge.n	8005bc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	3304      	adds	r3, #4
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	61fb      	str	r3, [r7, #28]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bbe:	6850      	ldr	r0, [r2, #4]
 8005bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc2:	6892      	ldr	r2, [r2, #8]
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f2c0 80aa 	blt.w	8005d24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fd ff1b 	bl	8003a1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005be6:	463b      	mov	r3, r7
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ff6b 	bl	8005ac4 <prvSampleTimeNow>
 8005bee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	f200 8097 	bhi.w	8005d26 <prvProcessReceivedCommands+0x19e>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <prvProcessReceivedCommands+0x78>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c29 	.word	0x08005c29
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c29 	.word	0x08005c29
 8005c0c:	08005c9d 	.word	0x08005c9d
 8005c10:	08005cb1 	.word	0x08005cb1
 8005c14:	08005cfb 	.word	0x08005cfb
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c29 	.word	0x08005c29
 8005c20:	08005c9d 	.word	0x08005c9d
 8005c24:	08005cb1 	.word	0x08005cb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	18d1      	adds	r1, r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c48:	f7ff ff5c 	bl	8005b04 <prvInsertTimerInActiveList>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d069      	beq.n	8005d26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05e      	beq.n	8005d26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	441a      	add	r2, r3
 8005c70:	2300      	movs	r3, #0
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	2100      	movs	r1, #0
 8005c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c7a:	f7ff fe05 	bl	8005888 <xTimerGenericCommand>
 8005c7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d14f      	bne.n	8005d26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	61bb      	str	r3, [r7, #24]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cae:	e03a      	b.n	8005d26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	617b      	str	r3, [r7, #20]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	18d1      	adds	r1, r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf4:	f7ff ff06 	bl	8005b04 <prvInsertTimerInActiveList>
					break;
 8005cf8:	e015      	b.n	8005d26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0a:	f000 fbe1 	bl	80064d0 <vPortFree>
 8005d0e:	e00a      	b.n	8005d26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d22:	e000      	b.n	8005d26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d26:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <prvProcessReceivedCommands+0x1c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	1d39      	adds	r1, r7, #4
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe f976 	bl	8004020 <xQueueReceive>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f47f af2a 	bne.w	8005b90 <prvProcessReceivedCommands+0x8>
	}
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3730      	adds	r7, #48	; 0x30
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000c1c 	.word	0x20000c1c

08005d4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d52:	e048      	b.n	8005de6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d54:	4b2d      	ldr	r3, [pc, #180]	; (8005e0c <prvSwitchTimerLists+0xc0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d5e:	4b2b      	ldr	r3, [pc, #172]	; (8005e0c <prvSwitchTimerLists+0xc0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fd fe55 	bl	8003a1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d02e      	beq.n	8005de6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d90e      	bls.n	8005db8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005da6:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <prvSwitchTimerLists+0xc0>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7fd fdfa 	bl	80039aa <vListInsert>
 8005db6:	e016      	b.n	8005de6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005db8:	2300      	movs	r3, #0
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff fd60 	bl	8005888 <xTimerGenericCommand>
 8005dc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	603b      	str	r3, [r7, #0]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <prvSwitchTimerLists+0xc0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1b1      	bne.n	8005d54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <prvSwitchTimerLists+0xc0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005df6:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <prvSwitchTimerLists+0xc4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a04      	ldr	r2, [pc, #16]	; (8005e0c <prvSwitchTimerLists+0xc0>)
 8005dfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005dfe:	4a04      	ldr	r2, [pc, #16]	; (8005e10 <prvSwitchTimerLists+0xc4>)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6013      	str	r3, [r2, #0]
}
 8005e04:	bf00      	nop
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000c14 	.word	0x20000c14
 8005e10:	20000c18 	.word	0x20000c18

08005e14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e1a:	f000 f96b 	bl	80060f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <prvCheckForValidListAndQueue+0x60>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d120      	bne.n	8005e68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e26:	4814      	ldr	r0, [pc, #80]	; (8005e78 <prvCheckForValidListAndQueue+0x64>)
 8005e28:	f7fd fd6e 	bl	8003908 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e2c:	4813      	ldr	r0, [pc, #76]	; (8005e7c <prvCheckForValidListAndQueue+0x68>)
 8005e2e:	f7fd fd6b 	bl	8003908 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <prvCheckForValidListAndQueue+0x6c>)
 8005e34:	4a10      	ldr	r2, [pc, #64]	; (8005e78 <prvCheckForValidListAndQueue+0x64>)
 8005e36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e38:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <prvCheckForValidListAndQueue+0x70>)
 8005e3a:	4a10      	ldr	r2, [pc, #64]	; (8005e7c <prvCheckForValidListAndQueue+0x68>)
 8005e3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <prvCheckForValidListAndQueue+0x74>)
 8005e44:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <prvCheckForValidListAndQueue+0x78>)
 8005e46:	2110      	movs	r1, #16
 8005e48:	200a      	movs	r0, #10
 8005e4a:	f7fd fe79 	bl	8003b40 <xQueueGenericCreateStatic>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4a08      	ldr	r2, [pc, #32]	; (8005e74 <prvCheckForValidListAndQueue+0x60>)
 8005e52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <prvCheckForValidListAndQueue+0x60>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <prvCheckForValidListAndQueue+0x60>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	490b      	ldr	r1, [pc, #44]	; (8005e90 <prvCheckForValidListAndQueue+0x7c>)
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fbf0 	bl	8004648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e68:	f000 f974 	bl	8006154 <vPortExitCritical>
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000c1c 	.word	0x20000c1c
 8005e78:	20000bec 	.word	0x20000bec
 8005e7c:	20000c00 	.word	0x20000c00
 8005e80:	20000c14 	.word	0x20000c14
 8005e84:	20000c18 	.word	0x20000c18
 8005e88:	20000cc8 	.word	0x20000cc8
 8005e8c:	20000c28 	.word	0x20000c28
 8005e90:	080067dc 	.word	0x080067dc

08005e94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3b04      	subs	r3, #4
 8005eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3b04      	subs	r3, #4
 8005ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <pxPortInitialiseStack+0x64>)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b14      	subs	r3, #20
 8005ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3b04      	subs	r3, #4
 8005eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f06f 0202 	mvn.w	r2, #2
 8005ee2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3b20      	subs	r3, #32
 8005ee8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005eea:	68fb      	ldr	r3, [r7, #12]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	08005efd 	.word	0x08005efd

08005efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f06:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <prvTaskExitError+0x54>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d00a      	beq.n	8005f26 <prvTaskExitError+0x2a>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	60fb      	str	r3, [r7, #12]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <prvTaskExitError+0x28>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60bb      	str	r3, [r7, #8]
}
 8005f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f3a:	bf00      	nop
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0fc      	beq.n	8005f3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	2000000c 	.word	0x2000000c
	...

08005f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <pxCurrentTCBConst2>)
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	f380 8809 	msr	PSP, r0
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8811 	msr	BASEPRI, r0
 8005f7a:	4770      	bx	lr
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst2>:
 8005f80:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f88:	4808      	ldr	r0, [pc, #32]	; (8005fac <prvPortStartFirstTask+0x24>)
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f380 8808 	msr	MSP, r0
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8814 	msr	CONTROL, r0
 8005f9a:	b662      	cpsie	i
 8005f9c:	b661      	cpsie	f
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	df00      	svc	0
 8005fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005faa:	bf00      	nop
 8005fac:	e000ed08 	.word	0xe000ed08

08005fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fb6:	4b46      	ldr	r3, [pc, #280]	; (80060d0 <xPortStartScheduler+0x120>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a46      	ldr	r2, [pc, #280]	; (80060d4 <xPortStartScheduler+0x124>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10a      	bne.n	8005fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	613b      	str	r3, [r7, #16]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fd6:	4b3e      	ldr	r3, [pc, #248]	; (80060d0 <xPortStartScheduler+0x120>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a3f      	ldr	r2, [pc, #252]	; (80060d8 <xPortStartScheduler+0x128>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10a      	bne.n	8005ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ff6:	4b39      	ldr	r3, [pc, #228]	; (80060dc <xPortStartScheduler+0x12c>)
 8005ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	22ff      	movs	r2, #255	; 0xff
 8006006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <xPortStartScheduler+0x130>)
 800601c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800601e:	4b31      	ldr	r3, [pc, #196]	; (80060e4 <xPortStartScheduler+0x134>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006024:	e009      	b.n	800603a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006026:	4b2f      	ldr	r3, [pc, #188]	; (80060e4 <xPortStartScheduler+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	4a2d      	ldr	r2, [pc, #180]	; (80060e4 <xPortStartScheduler+0x134>)
 800602e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d0ef      	beq.n	8006026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006046:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <xPortStartScheduler+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1c3 0307 	rsb	r3, r3, #7
 800604e:	2b04      	cmp	r3, #4
 8006050:	d00a      	beq.n	8006068 <xPortStartScheduler+0xb8>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	60bb      	str	r3, [r7, #8]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006068:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <xPortStartScheduler+0x134>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <xPortStartScheduler+0x134>)
 8006070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006072:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <xPortStartScheduler+0x134>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800607a:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <xPortStartScheduler+0x134>)
 800607c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006086:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <xPortStartScheduler+0x138>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <xPortStartScheduler+0x138>)
 800608c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <xPortStartScheduler+0x138>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <xPortStartScheduler+0x138>)
 8006098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800609c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800609e:	f000 f8dd 	bl	800625c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <xPortStartScheduler+0x13c>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060a8:	f000 f8fc 	bl	80062a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060ac:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <xPortStartScheduler+0x140>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <xPortStartScheduler+0x140>)
 80060b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060b8:	f7ff ff66 	bl	8005f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060bc:	f7fe ff52 	bl	8004f64 <vTaskSwitchContext>
	prvTaskExitError();
 80060c0:	f7ff ff1c 	bl	8005efc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	e000ed00 	.word	0xe000ed00
 80060d4:	410fc271 	.word	0x410fc271
 80060d8:	410fc270 	.word	0x410fc270
 80060dc:	e000e400 	.word	0xe000e400
 80060e0:	20000d18 	.word	0x20000d18
 80060e4:	20000d1c 	.word	0x20000d1c
 80060e8:	e000ed20 	.word	0xe000ed20
 80060ec:	2000000c 	.word	0x2000000c
 80060f0:	e000ef34 	.word	0xe000ef34

080060f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	607b      	str	r3, [r7, #4]
}
 800610c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <vPortEnterCritical+0x58>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	4a0d      	ldr	r2, [pc, #52]	; (800614c <vPortEnterCritical+0x58>)
 8006116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <vPortEnterCritical+0x58>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10f      	bne.n	8006140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <vPortEnterCritical+0x5c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <vPortEnterCritical+0x4c>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	603b      	str	r3, [r7, #0]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <vPortEnterCritical+0x4a>
	}
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	2000000c 	.word	0x2000000c
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <vPortExitCritical+0x50>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <vPortExitCritical+0x24>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	607b      	str	r3, [r7, #4]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <vPortExitCritical+0x50>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <vPortExitCritical+0x50>)
 8006180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <vPortExitCritical+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <vPortExitCritical+0x42>
 800618a:	2300      	movs	r3, #0
 800618c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f383 8811 	msr	BASEPRI, r3
}
 8006194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c
	...

080061b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061b0:	f3ef 8009 	mrs	r0, PSP
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <pxCurrentTCBConst>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	f01e 0f10 	tst.w	lr, #16
 80061c0:	bf08      	it	eq
 80061c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	6010      	str	r0, [r2, #0]
 80061cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061d4:	f380 8811 	msr	BASEPRI, r0
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f7fe fec0 	bl	8004f64 <vTaskSwitchContext>
 80061e4:	f04f 0000 	mov.w	r0, #0
 80061e8:	f380 8811 	msr	BASEPRI, r0
 80061ec:	bc09      	pop	{r0, r3}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6808      	ldr	r0, [r1, #0]
 80061f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f6:	f01e 0f10 	tst.w	lr, #16
 80061fa:	bf08      	it	eq
 80061fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006200:	f380 8809 	msr	PSP, r0
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	f3af 8000 	nop.w

08006210 <pxCurrentTCBConst>:
 8006210:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006232:	f7fe fddd 	bl	8004df0 <xTaskIncrementTick>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <xPortSysTickHandler+0x40>)
 800623e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <vPortSetupTimerInterrupt+0x38>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <vPortSetupTimerInterrupt+0x3c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <vPortSetupTimerInterrupt+0x40>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	099b      	lsrs	r3, r3, #6
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <vPortSetupTimerInterrupt+0x44>)
 800627a:	3b01      	subs	r3, #1
 800627c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	e000e010 	.word	0xe000e010
 8006294:	e000e018 	.word	0xe000e018
 8006298:	20000000 	.word	0x20000000
 800629c:	10624dd3 	.word	0x10624dd3
 80062a0:	e000e014 	.word	0xe000e014

080062a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062b4 <vPortEnableVFP+0x10>
 80062a8:	6801      	ldr	r1, [r0, #0]
 80062aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ae:	6001      	str	r1, [r0, #0]
 80062b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062b2:	bf00      	nop
 80062b4:	e000ed88 	.word	0xe000ed88

080062b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062be:	f3ef 8305 	mrs	r3, IPSR
 80062c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	d914      	bls.n	80062f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <vPortValidateInterruptPriority+0x70>)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062d4:	4b15      	ldr	r3, [pc, #84]	; (800632c <vPortValidateInterruptPriority+0x74>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	7afa      	ldrb	r2, [r7, #11]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20a      	bcs.n	80062f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <vPortValidateInterruptPriority+0x78>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <vPortValidateInterruptPriority+0x7c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d90a      	bls.n	800631a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	603b      	str	r3, [r7, #0]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <vPortValidateInterruptPriority+0x60>
	}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	e000e3f0 	.word	0xe000e3f0
 800632c:	20000d18 	.word	0x20000d18
 8006330:	e000ed0c 	.word	0xe000ed0c
 8006334:	20000d1c 	.word	0x20000d1c

08006338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006344:	f7fe fc98 	bl	8004c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006348:	4b5b      	ldr	r3, [pc, #364]	; (80064b8 <pvPortMalloc+0x180>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006350:	f000 f920 	bl	8006594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006354:	4b59      	ldr	r3, [pc, #356]	; (80064bc <pvPortMalloc+0x184>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 8093 	bne.w	8006488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01d      	beq.n	80063a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006368:	2208      	movs	r2, #8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d014      	beq.n	80063a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f023 0307 	bic.w	r3, r3, #7
 8006380:	3308      	adds	r3, #8
 8006382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <pvPortMalloc+0x6c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	617b      	str	r3, [r7, #20]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d06e      	beq.n	8006488 <pvPortMalloc+0x150>
 80063aa:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <pvPortMalloc+0x188>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d869      	bhi.n	8006488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <pvPortMalloc+0x18c>)
 80063b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <pvPortMalloc+0x18c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063be:	e004      	b.n	80063ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d903      	bls.n	80063dc <pvPortMalloc+0xa4>
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f1      	bne.n	80063c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <pvPortMalloc+0x180>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d050      	beq.n	8006488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2208      	movs	r2, #8
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	2308      	movs	r3, #8
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	429a      	cmp	r2, r3
 8006406:	d91f      	bls.n	8006448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <pvPortMalloc+0xf8>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	613b      	str	r3, [r7, #16]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006442:	69b8      	ldr	r0, [r7, #24]
 8006444:	f000 f908 	bl	8006658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006448:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <pvPortMalloc+0x188>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <pvPortMalloc+0x188>)
 8006454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <pvPortMalloc+0x188>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <pvPortMalloc+0x190>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d203      	bcs.n	800646a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006462:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <pvPortMalloc+0x188>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <pvPortMalloc+0x190>)
 8006468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <pvPortMalloc+0x184>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	431a      	orrs	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <pvPortMalloc+0x194>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <pvPortMalloc+0x194>)
 8006486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006488:	f7fe fc04 	bl	8004c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <pvPortMalloc+0x174>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60fb      	str	r3, [r7, #12]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <pvPortMalloc+0x172>
	return pvReturn;
 80064ac:	69fb      	ldr	r3, [r7, #28]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	; 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20001cc8 	.word	0x20001cc8
 80064bc:	20001cdc 	.word	0x20001cdc
 80064c0:	20001ccc 	.word	0x20001ccc
 80064c4:	20001cc0 	.word	0x20001cc0
 80064c8:	20001cd0 	.word	0x20001cd0
 80064cc:	20001cd4 	.word	0x20001cd4

080064d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04d      	beq.n	800657e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064e2:	2308      	movs	r3, #8
 80064e4:	425b      	negs	r3, r3
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <vPortFree+0xb8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <vPortFree+0x44>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <vPortFree+0x62>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <vPortFree+0xb8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d11a      	bne.n	800657e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <vPortFree+0xb8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	43db      	mvns	r3, r3
 8006552:	401a      	ands	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006558:	f7fe fb8e 	bl	8004c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <vPortFree+0xbc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4413      	add	r3, r2
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <vPortFree+0xbc>)
 8006568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f000 f874 	bl	8006658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <vPortFree+0xc0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a06      	ldr	r2, [pc, #24]	; (8006590 <vPortFree+0xc0>)
 8006578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800657a:	f7fe fb8b 	bl	8004c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800657e:	bf00      	nop
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20001cdc 	.word	0x20001cdc
 800658c:	20001ccc 	.word	0x20001ccc
 8006590:	20001cd8 	.word	0x20001cd8

08006594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800659a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800659e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065a0:	4b27      	ldr	r3, [pc, #156]	; (8006640 <prvHeapInit+0xac>)
 80065a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3307      	adds	r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <prvHeapInit+0xac>)
 80065c4:	4413      	add	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065cc:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <prvHeapInit+0xb0>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <prvHeapInit+0xb0>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4413      	add	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065e0:	2208      	movs	r2, #8
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0307 	bic.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <prvHeapInit+0xb4>)
 80065f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <prvHeapInit+0xb4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2200      	movs	r2, #0
 80065fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <prvHeapInit+0xb4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <prvHeapInit+0xb4>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a0a      	ldr	r2, [pc, #40]	; (800664c <prvHeapInit+0xb8>)
 8006622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <prvHeapInit+0xbc>)
 800662a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <prvHeapInit+0xc0>)
 800662e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20000d20 	.word	0x20000d20
 8006644:	20001cc0 	.word	0x20001cc0
 8006648:	20001cc8 	.word	0x20001cc8
 800664c:	20001cd0 	.word	0x20001cd0
 8006650:	20001ccc 	.word	0x20001ccc
 8006654:	20001cdc 	.word	0x20001cdc

08006658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <prvInsertBlockIntoFreeList+0xac>)
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e002      	b.n	800666c <prvInsertBlockIntoFreeList+0x14>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d8f7      	bhi.n	8006666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4413      	add	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d108      	bne.n	800669a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d118      	bne.n	80066e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d00d      	beq.n	80066d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	441a      	add	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e008      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066d6:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	e003      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d002      	beq.n	80066f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20001cc0 	.word	0x20001cc0
 8006708:	20001cc8 	.word	0x20001cc8

0800670c <__libc_init_array>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4d0d      	ldr	r5, [pc, #52]	; (8006744 <__libc_init_array+0x38>)
 8006710:	4c0d      	ldr	r4, [pc, #52]	; (8006748 <__libc_init_array+0x3c>)
 8006712:	1b64      	subs	r4, r4, r5
 8006714:	10a4      	asrs	r4, r4, #2
 8006716:	2600      	movs	r6, #0
 8006718:	42a6      	cmp	r6, r4
 800671a:	d109      	bne.n	8006730 <__libc_init_array+0x24>
 800671c:	4d0b      	ldr	r5, [pc, #44]	; (800674c <__libc_init_array+0x40>)
 800671e:	4c0c      	ldr	r4, [pc, #48]	; (8006750 <__libc_init_array+0x44>)
 8006720:	f000 f82e 	bl	8006780 <_init>
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	2600      	movs	r6, #0
 800672a:	42a6      	cmp	r6, r4
 800672c:	d105      	bne.n	800673a <__libc_init_array+0x2e>
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	f855 3b04 	ldr.w	r3, [r5], #4
 8006734:	4798      	blx	r3
 8006736:	3601      	adds	r6, #1
 8006738:	e7ee      	b.n	8006718 <__libc_init_array+0xc>
 800673a:	f855 3b04 	ldr.w	r3, [r5], #4
 800673e:	4798      	blx	r3
 8006740:	3601      	adds	r6, #1
 8006742:	e7f2      	b.n	800672a <__libc_init_array+0x1e>
 8006744:	080068c4 	.word	0x080068c4
 8006748:	080068c4 	.word	0x080068c4
 800674c:	080068c4 	.word	0x080068c4
 8006750:	080068c8 	.word	0x080068c8

08006754 <memcpy>:
 8006754:	440a      	add	r2, r1
 8006756:	4291      	cmp	r1, r2
 8006758:	f100 33ff 	add.w	r3, r0, #4294967295
 800675c:	d100      	bne.n	8006760 <memcpy+0xc>
 800675e:	4770      	bx	lr
 8006760:	b510      	push	{r4, lr}
 8006762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676a:	4291      	cmp	r1, r2
 800676c:	d1f9      	bne.n	8006762 <memcpy+0xe>
 800676e:	bd10      	pop	{r4, pc}

08006770 <memset>:
 8006770:	4402      	add	r2, r0
 8006772:	4603      	mov	r3, r0
 8006774:	4293      	cmp	r3, r2
 8006776:	d100      	bne.n	800677a <memset+0xa>
 8006778:	4770      	bx	lr
 800677a:	f803 1b01 	strb.w	r1, [r3], #1
 800677e:	e7f9      	b.n	8006774 <memset+0x4>

08006780 <_init>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr

0800678c <_fini>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr
