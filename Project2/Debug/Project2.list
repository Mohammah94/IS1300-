
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008608  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a08  08008a08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a10  08008a10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000070  08008a88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08008a88  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023866  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410e  00000000  00000000  00043906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  00047a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001978  00000000  00000000  00049568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c682  00000000  00000000  0004aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e7c  00000000  00000000  00077562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001115b0  00000000  00000000  000993de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001aa98e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c00  00000000  00000000  001aa9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008780 	.word	0x08008780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008780 	.word	0x08008780

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe0>)
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_ADC1_Init+0xe4>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005fc:	f001 fa6c 	bl	8001ad8 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000606:	f000 fa58 	bl	8000aba <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000616:	f002 f9cd 	bl	80029b4 <HAL_ADCEx_MultiModeConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fa4b 	bl	8000aba <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_ADC1_Init+0xe8>)
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2306      	movs	r3, #6
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000630:	237f      	movs	r3, #127	; 0x7f
 8000632:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000642:	f001 fd3f 	bl	80020c4 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800064c:	f000 fa35 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000c0 	.word	0x200000c0
 800065c:	50040000 	.word	0x50040000
 8000660:	43210000 	.word	0x43210000

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f006 ff81 	bl	800758c <memset>
  if(adcHandle->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_ADC_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d146      	bne.n	8000722 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800069a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fced 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006d0:	f000 f9f3 	bl	8000aba <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_ADC_MspInit+0xd0>)
 800071e:	f002 fb89 	bl	8002e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000722:	bf00      	nop
 8000724:	37b0      	adds	r7, #176	; 0xb0
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	50040000 	.word	0x50040000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b40      	ldr	r3, [pc, #256]	; (8000850 <MX_GPIO_Init+0x118>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <MX_GPIO_Init+0x118>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <MX_GPIO_Init+0x118>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <MX_GPIO_Init+0x118>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a39      	ldr	r2, [pc, #228]	; (8000850 <MX_GPIO_Init+0x118>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b37      	ldr	r3, [pc, #220]	; (8000850 <MX_GPIO_Init+0x118>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_GPIO_Init+0x118>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <MX_GPIO_Init+0x118>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_GPIO_Init+0x118>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <MX_GPIO_Init+0x118>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a2d      	ldr	r2, [pc, #180]	; (8000850 <MX_GPIO_Init+0x118>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <MX_GPIO_Init+0x118>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_GPIO_Init+0x118>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a27      	ldr	r2, [pc, #156]	; (8000850 <MX_GPIO_Init+0x118>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_GPIO_Init+0x118>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|Display_reset_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f248 01a0 	movw	r1, #32928	; 0x80a0
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f002 fcda 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007da:	481e      	ldr	r0, [pc, #120]	; (8000854 <MX_GPIO_Init+0x11c>)
 80007dc:	f002 fcd4 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Display_green_Pin|Display_white_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <MX_GPIO_Init+0x120>)
 80007e8:	f002 fcce 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA7 PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|Display_reset_Pin;
 80007ec:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f002 fb14 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_SPI2_Pin;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SPI2_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0x11c>)
 8000826:	f002 fb05 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Display_green_Pin|Display_white_Pin;
 800082a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_GPIO_Init+0x120>)
 8000844:	f002 faf6 	bl	8002e34 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000800 	.word	0x48000800

0800085c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_I2C3_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_I2C3_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_I2C3_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_I2C3_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_I2C3_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_I2C3_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_I2C3_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C3_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_I2C3_Init+0x74>)
 8000898:	f002 fc8e 	bl	80031b8 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 f90a 	bl	8000aba <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_I2C3_Init+0x74>)
 80008aa:	f002 fd14 	bl	80032d6 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 f901 	bl	8000aba <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2C3_Init+0x74>)
 80008bc:	f002 fd56 	bl	800336c <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f8f8 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000124 	.word	0x20000124
 80008d4:	40005c00 	.word	0x40005c00
 80008d8:	10909cec 	.word	0x10909cec

080008dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0ac      	sub	sp, #176	; 0xb0
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2288      	movs	r2, #136	; 0x88
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 fe45 	bl	800758c <memset>
  if(i2cHandle->Instance==I2C3)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a21      	ldr	r2, [pc, #132]	; (800098c <HAL_I2C_MspInit+0xb0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d13b      	bne.n	8000984 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000912:	2300      	movs	r3, #0
 8000914:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fbc2 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000926:	f000 f8c8 	bl	8000aba <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000942:	2303      	movs	r3, #3
 8000944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800095a:	2304      	movs	r3, #4
 800095c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000960:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000964:	4619      	mov	r1, r3
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_I2C_MspInit+0xb8>)
 8000968:	f002 fa64 	bl	8002e34 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 800096e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 8000972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000976:	6593      	str	r3, [r2, #88]	; 0x58
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_I2C_MspInit+0xb4>)
 800097a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000984:	bf00      	nop
 8000986:	37b0      	adds	r7, #176	; 0xb0
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40005c00 	.word	0x40005c00
 8000990:	40021000 	.word	0x40021000
 8000994:	48000800 	.word	0x48000800

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   uint8_t Tecken;
   char *hello = "Programmet startar\n\r";
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <main+0x70>)
 80009a0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fe1c 	bl	80015de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f835 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f7ff fec5 	bl	8000738 <MX_GPIO_Init>
  MX_UART5_Init();
 80009ae:	f000 fd33 	bl	8001418 <MX_UART5_Init>
  MX_ADC1_Init();
 80009b2:	f7ff fde1 	bl	8000578 <MX_ADC1_Init>
  MX_I2C3_Init();
 80009b6:	f7ff ff51 	bl	800085c <MX_I2C3_Init>
  MX_RTC_Init();
 80009ba:	f000 f883 	bl	8000ac4 <MX_RTC_Init>
  MX_SPI2_Init();
 80009be:	f000 faf5 	bl	8000fac <MX_SPI2_Init>
  MX_TIM3_Init();
 80009c2:	f000 fc77 	bl	80012b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009c6:	2104      	movs	r1, #4
 80009c8:	4810      	ldr	r0, [pc, #64]	; (8000a0c <main+0x74>)
 80009ca:	f004 ff51 	bl	8005870 <HAL_TIM_PWM_Start>
#ifdef RUN_TEST_PROGRAM
  test_program();
 80009ce:	f000 fc4d 	bl	800126c <test_program>
#endif


  HAL_UART_Transmit(&huart5, (uint8_t*)hello, strlen(hello), 5000);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fbfc 	bl	80001d0 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <main+0x78>)
 80009e4:	f005 fdc6 	bl	8006574 <HAL_UART_Transmit>
	  Error_Handler(); }
	  */



	  HAL_UART_Receive(&huart5, &Tecken, 1, 5000);
 80009e8:	1cf9      	adds	r1, r7, #3
 80009ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80009ee:	2201      	movs	r2, #1
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <main+0x78>)
 80009f2:	f005 fe53 	bl	800669c <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart5, &Tecken, 1, 5000);
 80009f6:	1cf9      	adds	r1, r7, #3
 80009f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80009fc:	2201      	movs	r2, #1
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <main+0x78>)
 8000a00:	f005 fdb8 	bl	8006574 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart5, &Tecken, 1, 5000);
 8000a04:	e7f0      	b.n	80009e8 <main+0x50>
 8000a06:	bf00      	nop
 8000a08:	08008798 	.word	0x08008798
 8000a0c:	200001f8 	.word	0x200001f8
 8000a10:	20000244 	.word	0x20000244

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	; 0x58
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2244      	movs	r2, #68	; 0x44
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f006 fdb2 	bl	800758c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a3a:	f002 fcf1 	bl	8003420 <HAL_PWREx_ControlVoltageScaling>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a44:	f000 f839 	bl	8000aba <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a48:	230a      	movs	r3, #10
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a52:	2310      	movs	r3, #16
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a56:	2301      	movs	r3, #1
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a66:	230a      	movs	r3, #10
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fd26 	bl	80034cc <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a86:	f000 f818 	bl	8000aba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 f8f8 	bl	8003c98 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aae:	f000 f804 	bl	8000aba <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3758      	adds	r7, #88	; 0x58
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abe:	b672      	cpsid	i
}
 8000ac0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <Error_Handler+0x8>

08000ac4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000ade:	4a2c      	ldr	r2, [pc, #176]	; (8000b90 <MX_RTC_Init+0xcc>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 50-1;
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000aea:	2231      	movs	r2, #49	; 0x31
 8000aec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 800-1;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000af0:	f240 321f 	movw	r2, #799	; 0x31f
 8000af4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b0e:	481f      	ldr	r0, [pc, #124]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000b10:	f003 ff84 	bl	8004a1c <HAL_RTC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000b1a:	f7ff ffce 	bl	8000aba <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	4814      	ldr	r0, [pc, #80]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000b3a:	f003 ffea 	bl	8004b12 <HAL_RTC_SetTime>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000b44:	f7ff ffb9 	bl	8000aba <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480b      	ldr	r0, [pc, #44]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000b60:	f004 f8d0 	bl	8004d04 <HAL_RTC_SetDate>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8000b6a:	f7ff ffa6 	bl	8000aba <Error_Handler>
  }
  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000b6e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_RTC_Init+0xc8>)
 8000b74:	f004 fa6c 	bl	8005050 <HAL_RTCEx_SetCalibrationOutPut>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 8000b7e:	f7ff ff9c 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000170 	.word	0x20000170
 8000b90:	40002800 	.word	0x40002800

08000b94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0aa      	sub	sp, #168	; 0xa8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2288      	movs	r2, #136	; 0x88
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 fce9 	bl	800758c <memset>
  if(rtcHandle->Instance==RTC)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <HAL_RTC_MspInit+0xac>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d139      	bne.n	8000c38 <HAL_RTC_MspInit+0xa4>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fa64 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8000be2:	f7ff ff6a 	bl	8000aba <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_RTC_MspInit+0xb0>)
 8000be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_RTC_MspInit+0xb0>)
 8000bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_RTC_MspInit+0xb0>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <HAL_RTC_MspInit+0xb0>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_RTC_MspInit+0xb0>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c30:	4619      	mov	r1, r3
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_RTC_MspInit+0xb4>)
 8000c34:	f002 f8fe 	bl	8002e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	37a8      	adds	r7, #168	; 0xa8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40002800 	.word	0x40002800
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400

08000c4c <displayInit>:
 * @param no parameters
 *
 */

void displayInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	SET_CS;
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c56:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <displayInit+0x8c>)
 8000c58:	f002 fa96 	bl	8003188 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f000 fd33 	bl	80016c8 <HAL_Delay>
	RESET_CS;
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c68:	481b      	ldr	r0, [pc, #108]	; (8000cd8 <displayInit+0x8c>)
 8000c6a:	f002 fa8d 	bl	8003188 <HAL_GPIO_WritePin>

	screen_reset();
 8000c6e:	f000 f991 	bl	8000f94 <screen_reset>
	HAL_Delay(10);
 8000c72:	200a      	movs	r0, #10
 8000c74:	f000 fd28 	bl	80016c8 <HAL_Delay>

	screen_send_instruction(0x80);
 8000c78:	2080      	movs	r0, #128	; 0x80
 8000c7a:	f000 f82f 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x3A);
 8000c7e:	203a      	movs	r0, #58	; 0x3a
 8000c80:	f000 f82c 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x09);
 8000c84:	2009      	movs	r0, #9
 8000c86:	f000 f829 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x06);
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	f000 f826 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x1E);
 8000c90:	201e      	movs	r0, #30
 8000c92:	f000 f823 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x39);
 8000c96:	2039      	movs	r0, #57	; 0x39
 8000c98:	f000 f820 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x1B);
 8000c9c:	201b      	movs	r0, #27
 8000c9e:	f000 f81d 	bl	8000cdc <screen_send_instruction>
    screen_send_instruction(0x6E);
 8000ca2:	206e      	movs	r0, #110	; 0x6e
 8000ca4:	f000 f81a 	bl	8000cdc <screen_send_instruction>
    screen_send_instruction(0x56);
 8000ca8:	2056      	movs	r0, #86	; 0x56
 8000caa:	f000 f817 	bl	8000cdc <screen_send_instruction>
    screen_send_instruction(0x7A);
 8000cae:	207a      	movs	r0, #122	; 0x7a
 8000cb0:	f000 f814 	bl	8000cdc <screen_send_instruction>
    screen_send_instruction(0x38);
 8000cb4:	2038      	movs	r0, #56	; 0x38
 8000cb6:	f000 f811 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x0F);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f000 f80e 	bl	8000cdc <screen_send_instruction>
	screen_send_instruction(0x01);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f000 f80b 	bl	8000cdc <screen_send_instruction>

	SET_CS;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <displayInit+0x8c>)
 8000cce:	f002 fa5b 	bl	8003188 <HAL_GPIO_WritePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	48000400 	.word	0x48000400

08000cdc <screen_send_instruction>:
 * @param uint8_t instruction
 *
 */

void screen_send_instruction(uint8_t instruction)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	SET_CS;
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cec:	4810      	ldr	r0, [pc, #64]	; (8000d30 <screen_send_instruction+0x54>)
 8000cee:	f002 fa4b 	bl	8003188 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f000 fce8 	bl	80016c8 <HAL_Delay>
	RESET_CS;
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <screen_send_instruction+0x54>)
 8000d00:	f002 fa42 	bl	8003188 <HAL_GPIO_WritePin>

	uint8_t buff[3];
	buff[0] = 0x1F;
 8000d04:	231f      	movs	r3, #31
 8000d06:	733b      	strb	r3, [r7, #12]
	buff[1] = instruction & 0x0F;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	737b      	strb	r3, [r7, #13]
	buff[2] = (instruction >> 4);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi2, buff, 3, 10);
 8000d1a:	f107 010c 	add.w	r1, r7, #12
 8000d1e:	230a      	movs	r3, #10
 8000d20:	2203      	movs	r2, #3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <screen_send_instruction+0x58>)
 8000d24:	f004 fa7e 	bl	8005224 <HAL_SPI_Transmit>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	48000400 	.word	0x48000400
 8000d34:	20000194 	.word	0x20000194

08000d38 <setTime>:
 * @more Works through terminal with screen function on IOS and linux.
 * @more Works with Putty on windows, dowload putty if you have windows.
 *
 */

void setTime(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

	uint8_t *buff = "Put hours\n\r";
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <setTime+0xcc>)
 8000d40:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)buff, 11, 5000);
 8000d42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d46:	220b      	movs	r2, #11
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	482f      	ldr	r0, [pc, #188]	; (8000e08 <setTime+0xd0>)
 8000d4c:	f005 fc12 	bl	8006574 <HAL_UART_Transmit>
	while(HAL_UART_Receive(&huart5, (uint8_t*)&hour, 2, 1000) != HAL_OK);
 8000d50:	bf00      	nop
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	2202      	movs	r2, #2
 8000d58:	492c      	ldr	r1, [pc, #176]	; (8000e0c <setTime+0xd4>)
 8000d5a:	482b      	ldr	r0, [pc, #172]	; (8000e08 <setTime+0xd0>)
 8000d5c:	f005 fc9e 	bl	800669c <HAL_UART_Receive>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f5      	bne.n	8000d52 <setTime+0x1a>

	buff = "Put minutes\n\r";
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <setTime+0xd8>)
 8000d68:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t *)buff, 12, 5000);
 8000d6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d6e:	220c      	movs	r2, #12
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4825      	ldr	r0, [pc, #148]	; (8000e08 <setTime+0xd0>)
 8000d74:	f005 fbfe 	bl	8006574 <HAL_UART_Transmit>
    while(HAL_UART_Receive(&huart5, (uint8_t*)&minutes, 2, 1000) != HAL_OK);
 8000d78:	bf00      	nop
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4924      	ldr	r1, [pc, #144]	; (8000e14 <setTime+0xdc>)
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <setTime+0xd0>)
 8000d84:	f005 fc8a 	bl	800669c <HAL_UART_Receive>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f5      	bne.n	8000d7a <setTime+0x42>

    buff = "Put seconds\n\r";
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <setTime+0xe0>)
 8000d90:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t *)buff, 13, 5000);
 8000d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d96:	220d      	movs	r2, #13
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	481b      	ldr	r0, [pc, #108]	; (8000e08 <setTime+0xd0>)
 8000d9c:	f005 fbea 	bl	8006574 <HAL_UART_Transmit>
    while(HAL_UART_Receive(&huart5, (uint8_t*)&seconds, 2, 1000) != HAL_OK);
 8000da0:	bf00      	nop
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	2202      	movs	r2, #2
 8000da8:	491c      	ldr	r1, [pc, #112]	; (8000e1c <setTime+0xe4>)
 8000daa:	4817      	ldr	r0, [pc, #92]	; (8000e08 <setTime+0xd0>)
 8000dac:	f005 fc76 	bl	800669c <HAL_UART_Receive>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f5      	bne.n	8000da2 <setTime+0x6a>

    buff = "done!\n\r";
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <setTime+0xe8>)
 8000db8:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t *)buff, 6, 5000);
 8000dba:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4811      	ldr	r0, [pc, #68]	; (8000e08 <setTime+0xd0>)
 8000dc4:	f005 fbd6 	bl	8006574 <HAL_UART_Transmit>


    sscanf((uint8_t *)&hour, "%hhu", &sTime.Hours);
 8000dc8:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <setTime+0xec>)
 8000dca:	4917      	ldr	r1, [pc, #92]	; (8000e28 <setTime+0xf0>)
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <setTime+0xd4>)
 8000dce:	f006 fc05 	bl	80075dc <siscanf>
    sscanf((uint8_t *)&minutes, "%hhu", &sTime.Minutes);
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <setTime+0xf4>)
 8000dd4:	4914      	ldr	r1, [pc, #80]	; (8000e28 <setTime+0xf0>)
 8000dd6:	480f      	ldr	r0, [pc, #60]	; (8000e14 <setTime+0xdc>)
 8000dd8:	f006 fc00 	bl	80075dc <siscanf>
    sscanf((uint8_t *)&seconds, "%hhu", &sTime.Seconds);
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <setTime+0xf8>)
 8000dde:	4912      	ldr	r1, [pc, #72]	; (8000e28 <setTime+0xf0>)
 8000de0:	480e      	ldr	r0, [pc, #56]	; (8000e1c <setTime+0xe4>)
 8000de2:	f006 fbfb 	bl	80075dc <siscanf>

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000de6:	2200      	movs	r2, #0
 8000de8:	4912      	ldr	r1, [pc, #72]	; (8000e34 <setTime+0xfc>)
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <setTime+0x100>)
 8000dec:	f003 ff8a 	bl	8004d04 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000df0:	2200      	movs	r2, #0
 8000df2:	490c      	ldr	r1, [pc, #48]	; (8000e24 <setTime+0xec>)
 8000df4:	4810      	ldr	r0, [pc, #64]	; (8000e38 <setTime+0x100>)
 8000df6:	f003 fe8c 	bl	8004b12 <HAL_RTC_SetTime>

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	080087b0 	.word	0x080087b0
 8000e08:	20000244 	.word	0x20000244
 8000e0c:	200000a4 	.word	0x200000a4
 8000e10:	080087bc 	.word	0x080087bc
 8000e14:	200000a8 	.word	0x200000a8
 8000e18:	080087cc 	.word	0x080087cc
 8000e1c:	200000ac 	.word	0x200000ac
 8000e20:	080087dc 	.word	0x080087dc
 8000e24:	2000008c 	.word	0x2000008c
 8000e28:	080087e4 	.word	0x080087e4
 8000e2c:	2000008d 	.word	0x2000008d
 8000e30:	2000008e 	.word	0x2000008e
 8000e34:	200000a0 	.word	0x200000a0
 8000e38:	20000170 	.word	0x20000170

08000e3c <writeTime>:
/*
 * @brief writes time to the screen
 *
 */
void writeTime(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af02      	add	r7, sp, #8
	char timearray[8];
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e42:	2200      	movs	r2, #0
 8000e44:	4915      	ldr	r1, [pc, #84]	; (8000e9c <writeTime+0x60>)
 8000e46:	4816      	ldr	r0, [pc, #88]	; (8000ea0 <writeTime+0x64>)
 8000e48:	f003 ff00 	bl	8004c4c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4915      	ldr	r1, [pc, #84]	; (8000ea4 <writeTime+0x68>)
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <writeTime+0x64>)
 8000e52:	f003 ffde 	bl	8004e12 <HAL_RTC_GetDate>
	sprintf(timearray, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <writeTime+0x60>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <writeTime+0x60>)
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <writeTime+0x60>)
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	4638      	mov	r0, r7
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <writeTime+0x6c>)
 8000e6e:	f006 fb95 	bl	800759c <siprintf>
	if(prevsecond!= sTime.Seconds){
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <writeTime+0x60>)
 8000e74:	789b      	ldrb	r3, [r3, #2]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <writeTime+0x70>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d009      	beq.n	8000e94 <writeTime+0x58>
		screen_string(timearray, 1);
 8000e80:	463b      	mov	r3, r7
 8000e82:	2101      	movs	r1, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f813 	bl	8000eb0 <screen_string>
		prevsecond = sTime.Seconds;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <writeTime+0x60>)
 8000e8c:	789b      	ldrb	r3, [r3, #2]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <writeTime+0x70>)
 8000e92:	601a      	str	r2, [r3, #0]
	}


}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000008c 	.word	0x2000008c
 8000ea0:	20000170 	.word	0x20000170
 8000ea4:	200000a0 	.word	0x200000a0
 8000ea8:	080087ec 	.word	0x080087ec
 8000eac:	200000b0 	.word	0x200000b0

08000eb0 <screen_string>:
/*
 * @brief sends string to be displayed on screen
 *
 */
void screen_string(uint8_t* string, uint8_t row)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
	if (row == 1)
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10d      	bne.n	8000ede <screen_string+0x2e>
	{
		screen_send_instruction(0x80);
 8000ec2:	2080      	movs	r0, #128	; 0x80
 8000ec4:	f7ff ff0a 	bl	8000cdc <screen_send_instruction>
		do
		{
			screen_char(*string++);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f809 	bl	8000ee8 <screen_char>
		}
		while (*string);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f4      	bne.n	8000ec8 <screen_string+0x18>

	}
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <screen_char>:
/*
 * @brief displays one char at a time on the screen
 *
 */
void screen_char(uint8_t chars)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	SET_CS;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <screen_char+0x54>)
 8000efa:	f002 f945 	bl	8003188 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f000 fbe2 	bl	80016c8 <HAL_Delay>
	RESET_CS;
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <screen_char+0x54>)
 8000f0c:	f002 f93c 	bl	8003188 <HAL_GPIO_WritePin>

	uint8_t transfer[3];
	transfer[0] = 0x5f;
 8000f10:	235f      	movs	r3, #95	; 0x5f
 8000f12:	733b      	strb	r3, [r7, #12]
	transfer[1] = chars & 0x0f;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	737b      	strb	r3, [r7, #13]
	transfer[2] = chars >> 4;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, transfer, 3, 10);
 8000f26:	f107 010c 	add.w	r1, r7, #12
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <screen_char+0x58>)
 8000f30:	f004 f978 	bl	8005224 <HAL_SPI_Transmit>

}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	20000194 	.word	0x20000194

08000f44 <set_dimmer>:
/*
 * @brief sets dimmer from adc value
 *
 */
void set_dimmer()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	uint32_t adc = get_adc();
 8000f4a:	f000 f80b 	bl	8000f64 <get_adc>
 8000f4e:	6078      	str	r0, [r7, #4]
	htim3.Instance -> CCR2 = adc;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <set_dimmer+0x1c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001f8 	.word	0x200001f8

08000f64 <get_adc>:
 * @brief gets adc value to set the dimmer
 *
 */

uint32_t get_adc()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	uint32_t adc;
	HAL_ADC_Start(&hadc1);
 8000f6a:	4809      	ldr	r0, [pc, #36]	; (8000f90 <get_adc+0x2c>)
 8000f6c:	f000 ff0a 	bl	8001d84 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000f70:	2164      	movs	r1, #100	; 0x64
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <get_adc+0x2c>)
 8000f74:	f000 ffc0 	bl	8001ef8 <HAL_ADC_PollForConversion>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <get_adc+0x22>
	{
		adc = HAL_ADC_GetValue(&hadc1);
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <get_adc+0x2c>)
 8000f80:	f001 f892 	bl	80020a8 <HAL_ADC_GetValue>
 8000f84:	6078      	str	r0, [r7, #4]
	}
	return adc;
 8000f86:	687b      	ldr	r3, [r7, #4]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000c0 	.word	0x200000c0

08000f94 <screen_reset>:
/*
 * @brief reset dimmer
 *
 */
void screen_reset()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f002 f8f1 	bl	8003188 <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_SPI2_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_SPI2_Init+0x74>)
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_SPI2_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_SPI2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_SPI2_Init+0x74>)
 800100c:	f004 f867 	bl	80050de <HAL_SPI_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001016:	f7ff fd50 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000194 	.word	0x20000194
 8001024:	40003800 	.word	0x40003800

08001028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <HAL_SPI_MspInit+0xb4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d144      	bne.n	80010d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6593      	str	r3, [r2, #88]	; 0x58
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_SPI_MspInit+0xb8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001092:	230c      	movs	r3, #12
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <HAL_SPI_MspInit+0xbc>)
 80010ae:	f001 fec1 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c4:	2305      	movs	r3, #5
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <HAL_SPI_MspInit+0xc0>)
 80010d0:	f001 feb0 	bl	8002e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40003800 	.word	0x40003800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000800 	.word	0x48000800
 80010e8:	48000400 	.word	0x48000400

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x44>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 fa82 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <UART5_IRQHandler+0x10>)
 800118e:	f005 fb57 	bl	8006840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000244 	.word	0x20000244

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f006 f9b4 	bl	8007538 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20018000 	.word	0x20018000
 80011fc:	00000400 	.word	0x00000400
 8001200:	200000b4 	.word	0x200000b4
 8001204:	200002e0 	.word	0x200002e0

08001208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <SystemInit+0x5c>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <SystemInit+0x5c>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <SystemInit+0x60>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <SystemInit+0x60>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <SystemInit+0x60>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <SystemInit+0x60>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <SystemInit+0x60>)
 8001234:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001238:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800123c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <SystemInit+0x60>)
 8001240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001244:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <SystemInit+0x60>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <SystemInit+0x60>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SystemInit+0x60>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	40021000 	.word	0x40021000

0800126c <test_program>:
 * @param has all of the test functions to make it eaiser to test function. .
 * @return void
 */

void test_program(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0


	displayInit();
 8001270:	f7ff fcec 	bl	8000c4c <displayInit>
	display_text_test();
 8001274:	f000 f808 	bl	8001288 <display_text_test>
	setTime();
 8001278:	f7ff fd5e 	bl	8000d38 <setTime>
	while(1)
	{

		writeTime();
 800127c:	f7ff fdde 	bl	8000e3c <writeTime>
		set_dimmer();
 8001280:	f7ff fe60 	bl	8000f44 <set_dimmer>
	{
 8001284:	e7fa      	b.n	800127c <test_program+0x10>
	...

08001288 <display_text_test>:




void display_text_test()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	uint8_t* text = "hello";
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <display_text_test+0x28>)
 8001290:	607b      	str	r3, [r7, #4]
	screen_string(text,1);
 8001292:	2101      	movs	r1, #1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fe0b 	bl	8000eb0 <screen_string>
	HAL_Delay(1000);
 800129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129e:	f000 fa13 	bl	80016c8 <HAL_Delay>

	screen_send_instruction(0x01);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fd1a 	bl	8000cdc <screen_send_instruction>

}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	080087fc 	.word	0x080087fc

080012b4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_TIM3_Init+0xac>)
 80012da:	4a22      	ldr	r2, [pc, #136]	; (8001364 <MX_TIM3_Init+0xb0>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_TIM3_Init+0xac>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_TIM3_Init+0xac>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_TIM3_Init+0xac>)
 80012ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_TIM3_Init+0xac>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_TIM3_Init+0xac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012fe:	4818      	ldr	r0, [pc, #96]	; (8001360 <MX_TIM3_Init+0xac>)
 8001300:	f004 fa5e 	bl	80057c0 <HAL_TIM_PWM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800130a:	f7ff fbd6 	bl	8000aba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <MX_TIM3_Init+0xac>)
 800131e:	f005 f853 	bl	80063c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001328:	f7ff fbc7 	bl	8000aba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132c:	2360      	movs	r3, #96	; 0x60
 800132e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2204      	movs	r2, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM3_Init+0xac>)
 8001344:	f004 fb9a 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800134e:	f7ff fbb4 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM3_Init+0xac>)
 8001354:	f000 f828 	bl	80013a8 <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001f8 	.word	0x200001f8
 8001364:	40000400 	.word	0x40000400

08001368 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10b      	bne.n	8001392 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_TIM_MspPostInit+0x64>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d11b      	bne.n	8001402 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_TIM_MspPostInit+0x68>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_TIM_MspPostInit+0x68>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_TIM_MspPostInit+0x68>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Display_red_Pin;
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Display_red_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_TIM_MspPostInit+0x6c>)
 80013fe:	f001 fd19 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40000400 	.word	0x40000400
 8001410:	40021000 	.word	0x40021000
 8001414:	48000800 	.word	0x48000800

08001418 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_UART5_Init+0x58>)
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <MX_UART5_Init+0x5c>)
 8001420:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_UART5_Init+0x58>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_UART5_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_UART5_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_UART5_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_UART5_Init+0x58>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_UART5_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_UART5_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_UART5_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_UART5_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_UART5_Init+0x58>)
 800145c:	f005 f83c 	bl	80064d8 <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001466:	f7ff fb28 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000244 	.word	0x20000244
 8001474:	40005000 	.word	0x40005000

08001478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0ac      	sub	sp, #176	; 0xb0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2288      	movs	r2, #136	; 0x88
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f006 f877 	bl	800758c <memset>
  if(uartHandle->Instance==UART5)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_UART_MspInit+0x104>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d164      	bne.n	8001572 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80014a8:	2310      	movs	r3, #16
 80014aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fdf5 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c0:	f7ff fafb 	bl	8000aba <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80014c4:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_UART_MspInit+0x108>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_UART_MspInit+0x108>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001526:	2308      	movs	r3, #8
 8001528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001530:	4619      	mov	r1, r3
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x10c>)
 8001534:	f001 fc7e 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001538:	2304      	movs	r3, #4
 800153a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001550:	2308      	movs	r3, #8
 8001552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001556:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800155a:	4619      	mov	r1, r3
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <HAL_UART_MspInit+0x110>)
 800155e:	f001 fc69 	bl	8002e34 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2035      	movs	r0, #53	; 0x35
 8001568:	f001 fbaf 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800156c:	2035      	movs	r0, #53	; 0x35
 800156e:	f001 fbc8 	bl	8002d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	37b0      	adds	r7, #176	; 0xb0
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005000 	.word	0x40005000
 8001580:	40021000 	.word	0x40021000
 8001584:	48000800 	.word	0x48000800
 8001588:	48000c00 	.word	0x48000c00

0800158c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001590:	f7ff fe3a 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001594:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001596:	e003      	b.n	80015a0 <LoopCopyDataInit>

08001598 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800159a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800159c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800159e:	3104      	adds	r1, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015a8:	d3f6      	bcc.n	8001598 <CopyDataInit>
	ldr	r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015ac:	e002      	b.n	80015b4 <LoopFillZerobss>

080015ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015b0:	f842 3b04 	str.w	r3, [r2], #4

080015b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <LoopForever+0x16>)
	cmp	r2, r3
 80015b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015b8:	d3f9      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f005 ffc3 	bl	8007544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015be:	f7ff f9eb 	bl	8000998 <main>

080015c2 <LoopForever>:

LoopForever:
    b LoopForever
 80015c2:	e7fe      	b.n	80015c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80015c8:	08008a18 	.word	0x08008a18
	ldr	r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015d0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80015d4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80015d8:	200002dc 	.word	0x200002dc

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>

080015de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f001 fb63 	bl	8002cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ee:	200f      	movs	r0, #15
 80015f0:	f000 f80e 	bl	8001610 <HAL_InitTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	e001      	b.n	8001604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001600:	f7ff fd74 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001604:	79fb      	ldrb	r3, [r7, #7]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_InitTick+0x6c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d023      	beq.n	800166c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_InitTick+0x70>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_InitTick+0x6c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fb6f 	bl	8002d1e <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d809      	bhi.n	8001660 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001654:	f001 fb39 	bl	8002cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_InitTick+0x74>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e007      	b.n	8001670 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e004      	b.n	8001670 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e001      	b.n	8001670 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	200002c8 	.word	0x200002c8

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200002c8 	.word	0x200002c8

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3360      	adds	r3, #96	; 0x60
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <LL_ADC_SetOffset+0x44>)
 800179a:	4013      	ands	r3, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	4313      	orrs	r3, r2
 80017a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	03fff000 	.word	0x03fff000

080017c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3360      	adds	r3, #96	; 0x60
 80017ce:	461a      	mov	r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3360      	adds	r3, #96	; 0x60
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3330      	adds	r3, #48	; 0x30
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	211f      	movs	r1, #31
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 011f 	and.w	r1, r3, #31
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	431a      	orrs	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3314      	adds	r3, #20
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0e5b      	lsrs	r3, r3, #25
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	0d1b      	lsrs	r3, r3, #20
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2107      	movs	r1, #7
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	401a      	ands	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	0d1b      	lsrs	r3, r3, #20
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0318 	and.w	r3, r3, #24
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <LL_ADC_SetChannelSingleDiff+0x44>)
 800191c:	40d9      	lsrs	r1, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	400b      	ands	r3, r1
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	0007ffff 	.word	0x0007ffff

08001940 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 031f 	and.w	r3, r3, #31
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001988:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6093      	str	r3, [r2, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b0:	d101      	bne.n	80019b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <LL_ADC_IsEnabled+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_ADC_IsEnabled+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a76:	f043 0204 	orr.w	r2, r3, #4
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d101      	bne.n	8001aa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d101      	bne.n	8001ac8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e136      	b.n	8001d60 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fdaf 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff3f 	bl	800199c <LL_ADC_IsDeepPowerDownEnabled>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff25 	bl	8001978 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff5a 	bl	80019ec <LL_ADC_IsInternalRegulatorEnabled>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d115      	bne.n	8001b6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff3e 	bl	80019c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b48:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <HAL_ADC_Init+0x290>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	4a87      	ldr	r2, [pc, #540]	; (8001d6c <HAL_ADC_Init+0x294>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b5c:	e002      	b.n	8001b64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f9      	bne.n	8001b5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff3c 	bl	80019ec <LL_ADC_IsInternalRegulatorEnabled>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10d      	bne.n	8001b96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0210 	orr.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	f043 0201 	orr.w	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff75 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8001ba0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80cf 	bne.w	8001d4e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 80cb 	bne.w	8001d4e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bc0:	f043 0202 	orr.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff35 	bl	8001a3c <LL_ADC_IsEnabled>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d115      	bne.n	8001c04 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd8:	4865      	ldr	r0, [pc, #404]	; (8001d70 <HAL_ADC_Init+0x298>)
 8001bda:	f7ff ff2f 	bl	8001a3c <LL_ADC_IsEnabled>
 8001bde:	4604      	mov	r4, r0
 8001be0:	4864      	ldr	r0, [pc, #400]	; (8001d74 <HAL_ADC_Init+0x29c>)
 8001be2:	f7ff ff2b 	bl	8001a3c <LL_ADC_IsEnabled>
 8001be6:	4603      	mov	r3, r0
 8001be8:	431c      	orrs	r4, r3
 8001bea:	4863      	ldr	r0, [pc, #396]	; (8001d78 <HAL_ADC_Init+0x2a0>)
 8001bec:	f7ff ff26 	bl	8001a3c <LL_ADC_IsEnabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4323      	orrs	r3, r4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	485f      	ldr	r0, [pc, #380]	; (8001d7c <HAL_ADC_Init+0x2a4>)
 8001c00:	f7ff fd86 	bl	8001710 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e5b      	ldrb	r3, [r3, #25]
 8001c08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d106      	bne.n	8001c40 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	3b01      	subs	r3, #1
 8001c38:	045b      	lsls	r3, r3, #17
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d009      	beq.n	8001c5c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_ADC_Init+0x2a8>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff08 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8001c7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff15 	bl	8001ab0 <LL_ADC_INJ_IsConversionOngoing>
 8001c86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d13d      	bne.n	8001d0a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d13a      	bne.n	8001d0a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c98:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ca0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cb0:	f023 0302 	bic.w	r3, r3, #2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	69b9      	ldr	r1, [r7, #24]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d118      	bne.n	8001cfa <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ce4:	4311      	orrs	r1, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cea:	430a      	orrs	r2, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	e007      	b.n	8001d0a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10c      	bne.n	8001d2c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f023 010f 	bic.w	r1, r3, #15
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2a:	e007      	b.n	8001d3c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 020f 	bic.w	r2, r2, #15
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f023 0303 	bic.w	r3, r3, #3
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d4c:	e007      	b.n	8001d5e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f043 0210 	orr.w	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3724      	adds	r7, #36	; 0x24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd90      	pop	{r4, r7, pc}
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	053e2d63 	.word	0x053e2d63
 8001d70:	50040000 	.word	0x50040000
 8001d74:	50040100 	.word	0x50040100
 8001d78:	50040200 	.word	0x50040200
 8001d7c:	50040300 	.word	0x50040300
 8001d80:	fff0c007 	.word	0xfff0c007

08001d84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d8c:	4857      	ldr	r0, [pc, #348]	; (8001eec <HAL_ADC_Start+0x168>)
 8001d8e:	f7ff fdd7 	bl	8001940 <LL_ADC_GetMultimode>
 8001d92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fe76 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 809c 	bne.w	8001ede <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_ADC_Start+0x30>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e097      	b.n	8001ee4 <HAL_ADC_Start+0x160>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fd71 	bl	80028a4 <ADC_Enable>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 8083 	bne.w	8001ed4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <HAL_ADC_Start+0x16c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d002      	beq.n	8001df2 <HAL_ADC_Start+0x6e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Start+0x70>
 8001df2:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_ADC_Start+0x170>)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d002      	beq.n	8001e02 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1a:	d106      	bne.n	8001e2a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	f023 0206 	bic.w	r2, r3, #6
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	221c      	movs	r2, #28
 8001e36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <HAL_ADC_Start+0x16c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d002      	beq.n	8001e50 <HAL_ADC_Start+0xcc>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e000      	b.n	8001e52 <HAL_ADC_Start+0xce>
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_ADC_Start+0x170>)
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d008      	beq.n	8001e6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d002      	beq.n	8001e6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	d114      	bne.n	8001e96 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fde7 	bl	8001a62 <LL_ADC_REG_StartConversion>
 8001e94:	e025      	b.n	8001ee2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_ADC_Start+0x16c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d002      	beq.n	8001eb2 <HAL_ADC_Start+0x12e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_Start+0x130>
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_ADC_Start+0x170>)
 8001eb4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00f      	beq.n	8001ee2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ed2:	e006      	b.n	8001ee2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001edc:	e001      	b.n	8001ee2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	50040300 	.word	0x50040300
 8001ef0:	50040100 	.word	0x50040100
 8001ef4:	50040000 	.word	0x50040000

08001ef8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f02:	4866      	ldr	r0, [pc, #408]	; (800209c <HAL_ADC_PollForConversion+0x1a4>)
 8001f04:	f7ff fd1c 	bl	8001940 <LL_ADC_GetMultimode>
 8001f08:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d102      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f12:	2308      	movs	r3, #8
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e02a      	b.n	8001f6e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d002      	beq.n	8001f2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b09      	cmp	r3, #9
 8001f28:	d111      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0a4      	b.n	8002092 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f48:	2304      	movs	r3, #4
 8001f4a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f4c:	e00f      	b.n	8001f6e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f4e:	4853      	ldr	r0, [pc, #332]	; (800209c <HAL_ADC_PollForConversion+0x1a4>)
 8001f50:	f7ff fd04 	bl	800195c <LL_ADC_GetMultiDMATransfer>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e093      	b.n	8002092 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f6e:	f7ff fb9f 	bl	80016b0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f74:	e021      	b.n	8001fba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f7c:	d01d      	beq.n	8001fba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f7e:	f7ff fb97 	bl	80016b0 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <HAL_ADC_PollForConversion+0x9c>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d112      	bne.n	8001fba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10b      	bne.n	8001fba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f043 0204 	orr.w	r2, r3, #4
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06b      	b.n	8002092 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0d6      	beq.n	8001f76 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fc22 	bl	8001822 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01c      	beq.n	800201e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e5b      	ldrb	r3, [r3, #25]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d118      	bne.n	800201e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d111      	bne.n	800201e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_ADC_PollForConversion+0x1a8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d002      	beq.n	800202e <HAL_ADC_PollForConversion+0x136>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e000      	b.n	8002030 <HAL_ADC_PollForConversion+0x138>
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_ADC_PollForConversion+0x1ac>)
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	4293      	cmp	r3, r2
 8002036:	d008      	beq.n	800204a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d002      	beq.n	800204a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b09      	cmp	r3, #9
 8002048:	d104      	bne.n	8002054 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	e00c      	b.n	800206e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_ADC_PollForConversion+0x1a8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d002      	beq.n	8002064 <HAL_ADC_PollForConversion+0x16c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e000      	b.n	8002066 <HAL_ADC_PollForConversion+0x16e>
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_ADC_PollForConversion+0x1ac>)
 8002066:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d104      	bne.n	800207e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2208      	movs	r2, #8
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e008      	b.n	8002090 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d103      	bne.n	8002090 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	220c      	movs	r2, #12
 800208e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	50040300 	.word	0x50040300
 80020a0:	50040100 	.word	0x50040100
 80020a4:	50040000 	.word	0x50040000

080020a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0b6      	sub	sp, #216	; 0xd8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x22>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e3c7      	b.n	8002876 <HAL_ADC_ConfigChannel+0x7b2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fcc9 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 83a8 	bne.w	8002850 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d824      	bhi.n	8002152 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	3b02      	subs	r3, #2
 800210e:	2b03      	cmp	r3, #3
 8002110:	d81b      	bhi.n	800214a <HAL_ADC_ConfigChannel+0x86>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_ADC_ConfigChannel+0x54>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002129 	.word	0x08002129
 800211c:	08002131 	.word	0x08002131
 8002120:	08002139 	.word	0x08002139
 8002124:	08002141 	.word	0x08002141
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	220c      	movs	r2, #12
 800212c:	605a      	str	r2, [r3, #4]
          break;
 800212e:	e011      	b.n	8002154 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2212      	movs	r2, #18
 8002134:	605a      	str	r2, [r3, #4]
          break;
 8002136:	e00d      	b.n	8002154 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2218      	movs	r2, #24
 800213c:	605a      	str	r2, [r3, #4]
          break;
 800213e:	e009      	b.n	8002154 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002146:	605a      	str	r2, [r3, #4]
          break;
 8002148:	e004      	b.n	8002154 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2206      	movs	r2, #6
 800214e:	605a      	str	r2, [r3, #4]
          break;
 8002150:	e000      	b.n	8002154 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002152:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	f7ff fb71 	bl	8001848 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fc8d 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8002170:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fc99 	bl	8001ab0 <LL_ADC_INJ_IsConversionOngoing>
 800217e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002182:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 81a6 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800218c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 81a1 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f7ff fb7c 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	08db      	lsrs	r3, r3, #3
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d00a      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021da:	f7ff facd 	bl	8001778 <LL_ADC_SetOffset>
 80021de:	e17b      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff faea 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_ADC_ConfigChannel+0x148>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fadf 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	0e9b      	lsrs	r3, r3, #26
 8002206:	f003 021f 	and.w	r2, r3, #31
 800220a:	e01e      	b.n	800224a <HAL_ADC_ConfigChannel+0x186>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fad4 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800222a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800222e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002232:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e004      	b.n	8002248 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800223e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x19e>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	0e9b      	lsrs	r3, r3, #26
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	e018      	b.n	8002294 <HAL_ADC_ConfigChannel+0x1d0>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800227a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800227e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002286:	2320      	movs	r3, #32
 8002288:	e004      	b.n	8002294 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800228a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002294:	429a      	cmp	r2, r3
 8002296:	d106      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff faa3 	bl	80017ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fa87 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x20e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fa7c 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	0e9b      	lsrs	r3, r3, #26
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	e01e      	b.n	8002310 <HAL_ADC_ConfigChannel+0x24c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa71 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002300:	2320      	movs	r3, #32
 8002302:	e004      	b.n	800230e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x264>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	e018      	b.n	800235a <HAL_ADC_ConfigChannel+0x296>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800233c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800234c:	2320      	movs	r3, #32
 800234e:	e004      	b.n	800235a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800235a:	429a      	cmp	r2, r3
 800235c:	d106      	bne.n	800236c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fa40 	bl	80017ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2102      	movs	r1, #2
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fa24 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2d4>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2102      	movs	r1, #2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fa19 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	f003 021f 	and.w	r2, r3, #31
 8002396:	e01e      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x312>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa0e 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80023c6:	2320      	movs	r3, #32
 80023c8:	e004      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x32a>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0e9b      	lsrs	r3, r3, #26
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	e016      	b.n	800241c <HAL_ADC_ConfigChannel+0x358>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002400:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800240e:	2320      	movs	r3, #32
 8002410:	e004      	b.n	800241c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	2102      	movs	r1, #2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff f9df 	bl	80017ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2103      	movs	r1, #3
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f9c3 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_ADC_ConfigChannel+0x396>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2103      	movs	r1, #3
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f9b8 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	e017      	b.n	800248a <HAL_ADC_ConfigChannel+0x3c6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2103      	movs	r1, #3
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f9ad 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002474:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e003      	b.n	8002488 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x3de>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0e9b      	lsrs	r3, r3, #26
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	e011      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x402>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e003      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80024be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d106      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	2103      	movs	r1, #3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f98a 	bl	80017ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff faad 	bl	8001a3c <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 813f 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f7ff f9fe 	bl	80018f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a8e      	ldr	r2, [pc, #568]	; (800273c <HAL_ADC_ConfigChannel+0x678>)
 8002502:	4293      	cmp	r3, r2
 8002504:	f040 8130 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x46c>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0e9b      	lsrs	r3, r3, #26
 800251e:	3301      	adds	r3, #1
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2b09      	cmp	r3, #9
 8002526:	bf94      	ite	ls
 8002528:	2301      	movls	r3, #1
 800252a:	2300      	movhi	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e019      	b.n	8002564 <HAL_ADC_ConfigChannel+0x4a0>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800253e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002540:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800254c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2b09      	cmp	r3, #9
 800255c:	bf94      	ite	ls
 800255e:	2301      	movls	r3, #1
 8002560:	2300      	movhi	r3, #0
 8002562:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002564:	2b00      	cmp	r3, #0
 8002566:	d079      	beq.n	800265c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x4c0>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	069b      	lsls	r3, r3, #26
 800257e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002582:	e015      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x4ec>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002594:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80025a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x50c>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	e017      	b.n	8002600 <HAL_ADC_ConfigChannel+0x53c>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	ea42 0103 	orr.w	r1, r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x562>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	051b      	lsls	r3, r3, #20
 8002624:	e018      	b.n	8002658 <HAL_ADC_ConfigChannel+0x594>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002658:	430b      	orrs	r3, r1
 800265a:	e080      	b.n	800275e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x5b4>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	069b      	lsls	r3, r3, #26
 8002672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002676:	e015      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x5e0>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e003      	b.n	800269c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	3301      	adds	r3, #1
 800269e:	069b      	lsls	r3, r3, #26
 80026a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x600>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	e017      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x630>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	61fb      	str	r3, [r7, #28]
  return result;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e003      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	3301      	adds	r3, #1
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	ea42 0103 	orr.w	r1, r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10d      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x65c>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	3301      	adds	r3, #1
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	3b1e      	subs	r3, #30
 8002718:	051b      	lsls	r3, r3, #20
 800271a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271e:	e01d      	b.n	800275c <HAL_ADC_ConfigChannel+0x698>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	613b      	str	r3, [r7, #16]
  return result;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e005      	b.n	8002748 <HAL_ADC_ConfigChannel+0x684>
 800273c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f003 021f 	and.w	r2, r3, #31
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	3b1e      	subs	r3, #30
 8002756:	051b      	lsls	r3, r3, #20
 8002758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	430b      	orrs	r3, r1
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	6892      	ldr	r2, [r2, #8]
 8002762:	4619      	mov	r1, r3
 8002764:	f7ff f89c 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b44      	ldr	r3, [pc, #272]	; (8002880 <HAL_ADC_ConfigChannel+0x7bc>)
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d07a      	beq.n	800286a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002774:	4843      	ldr	r0, [pc, #268]	; (8002884 <HAL_ADC_ConfigChannel+0x7c0>)
 8002776:	f7fe fff1 	bl	800175c <LL_ADC_GetCommonPathInternalCh>
 800277a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a41      	ldr	r2, [pc, #260]	; (8002888 <HAL_ADC_ConfigChannel+0x7c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d12c      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800278c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d126      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a3c      	ldr	r2, [pc, #240]	; (800288c <HAL_ADC_ConfigChannel+0x7c8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x6e4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a3b      	ldr	r2, [pc, #236]	; (8002890 <HAL_ADC_ConfigChannel+0x7cc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d15d      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b0:	4619      	mov	r1, r3
 80027b2:	4834      	ldr	r0, [pc, #208]	; (8002884 <HAL_ADC_ConfigChannel+0x7c0>)
 80027b4:	f7fe ffbf 	bl	8001736 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_ADC_ConfigChannel+0x7d0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	4a36      	ldr	r2, [pc, #216]	; (8002898 <HAL_ADC_ConfigChannel+0x7d4>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027d2:	e002      	b.n	80027da <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f9      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e0:	e040      	b.n	8002864 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2d      	ldr	r2, [pc, #180]	; (800289c <HAL_ADC_ConfigChannel+0x7d8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d118      	bne.n	800281e <HAL_ADC_ConfigChannel+0x75a>
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d112      	bne.n	800281e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_ADC_ConfigChannel+0x7c8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_ADC_ConfigChannel+0x748>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_ADC_ConfigChannel+0x7cc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d12d      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002814:	4619      	mov	r1, r3
 8002816:	481b      	ldr	r0, [pc, #108]	; (8002884 <HAL_ADC_ConfigChannel+0x7c0>)
 8002818:	f7fe ff8d 	bl	8001736 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800281c:	e024      	b.n	8002868 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d120      	bne.n	800286a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d11a      	bne.n	800286a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_ADC_ConfigChannel+0x7c8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d115      	bne.n	800286a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002846:	4619      	mov	r1, r3
 8002848:	480e      	ldr	r0, [pc, #56]	; (8002884 <HAL_ADC_ConfigChannel+0x7c0>)
 800284a:	f7fe ff74 	bl	8001736 <LL_ADC_SetCommonPathInternalCh>
 800284e:	e00c      	b.n	800286a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002862:	e002      	b.n	800286a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002864:	bf00      	nop
 8002866:	e000      	b.n	800286a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002868:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002872:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002876:	4618      	mov	r0, r3
 8002878:	37d8      	adds	r7, #216	; 0xd8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	80080000 	.word	0x80080000
 8002884:	50040300 	.word	0x50040300
 8002888:	c7520000 	.word	0xc7520000
 800288c:	50040000 	.word	0x50040000
 8002890:	50040200 	.word	0x50040200
 8002894:	20000000 	.word	0x20000000
 8002898:	053e2d63 	.word	0x053e2d63
 800289c:	cb840000 	.word	0xcb840000
 80028a0:	80000001 	.word	0x80000001

080028a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f8c3 	bl	8001a3c <LL_ADC_IsEnabled>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d14d      	bne.n	8002958 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <ADC_Enable+0xc0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e039      	b.n	800295a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f892 	bl	8001a14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fede 	bl	80016b0 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028f6:	e028      	b.n	800294a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f89d 	bl	8001a3c <LL_ADC_IsEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d104      	bne.n	8002912 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f881 	bl	8001a14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002912:	f7fe fecd 	bl	80016b0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d914      	bls.n	800294a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d00d      	beq.n	800294a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e007      	b.n	800295a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d1cf      	bne.n	80028f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	8000003f 	.word	0x8000003f

08002968 <LL_ADC_IsEnabled>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <LL_ADC_IsEnabled+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_ADC_IsEnabled+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_REG_IsConversionOngoing>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b09f      	sub	sp, #124	; 0x7c
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e093      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80029da:	2300      	movs	r3, #0
 80029dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80029de:	2300      	movs	r3, #0
 80029e0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a47      	ldr	r2, [pc, #284]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d102      	bne.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029ec:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	e001      	b.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e072      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ffb9 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ffb3 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d154      	bne.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d151      	bne.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002a36:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02c      	beq.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a52:	035b      	lsls	r3, r3, #13
 8002a54:	430b      	orrs	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a5c:	4829      	ldr	r0, [pc, #164]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a5e:	f7ff ff83 	bl	8002968 <LL_ADC_IsEnabled>
 8002a62:	4604      	mov	r4, r0
 8002a64:	4828      	ldr	r0, [pc, #160]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a66:	f7ff ff7f 	bl	8002968 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	431c      	orrs	r4, r3
 8002a6e:	4828      	ldr	r0, [pc, #160]	; (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a70:	f7ff ff7a 	bl	8002968 <LL_ADC_IsEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4323      	orrs	r3, r4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d137      	bne.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a84:	f023 030f 	bic.w	r3, r3, #15
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	e028      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa6:	4817      	ldr	r0, [pc, #92]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002aa8:	f7ff ff5e 	bl	8002968 <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4816      	ldr	r0, [pc, #88]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ab0:	f7ff ff5a 	bl	8002968 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	431c      	orrs	r4, r3
 8002ab8:	4815      	ldr	r0, [pc, #84]	; (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002aba:	f7ff ff55 	bl	8002968 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4323      	orrs	r3, r4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d112      	bne.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ace:	f023 030f 	bic.w	r3, r3, #15
 8002ad2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ad4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad6:	e009      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002aea:	e000      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002af6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	377c      	adds	r7, #124	; 0x7c
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	50040000 	.word	0x50040000
 8002b08:	50040100 	.word	0x50040100
 8002b0c:	50040300 	.word	0x50040300
 8002b10:	50040200 	.word	0x50040200

08002b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60d3      	str	r3, [r2, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db0b      	blt.n	8002ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <__NVIC_EnableIRQ+0x38>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e100 	.word	0xe000e100

08002bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db0a      	blt.n	8002bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	490c      	ldr	r1, [pc, #48]	; (8002c00 <__NVIC_SetPriority+0x4c>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bdc:	e00a      	b.n	8002bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4908      	ldr	r1, [pc, #32]	; (8002c04 <__NVIC_SetPriority+0x50>)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	3b04      	subs	r3, #4
 8002bec:	0112      	lsls	r2, r2, #4
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	761a      	strb	r2, [r3, #24]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000e100 	.word	0xe000e100
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f1c3 0307 	rsb	r3, r3, #7
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	bf28      	it	cs
 8002c26:	2304      	movcs	r3, #4
 8002c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d902      	bls.n	8002c38 <NVIC_EncodePriority+0x30>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3b03      	subs	r3, #3
 8002c36:	e000      	b.n	8002c3a <NVIC_EncodePriority+0x32>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	43d9      	mvns	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	4313      	orrs	r3, r2
         );
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3724      	adds	r7, #36	; 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c80:	d301      	bcc.n	8002c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00f      	b.n	8002ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <SysTick_Config+0x40>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8e:	210f      	movs	r1, #15
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c94:	f7ff ff8e 	bl	8002bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <SysTick_Config+0x40>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <SysTick_Config+0x40>)
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	e000e010 	.word	0xe000e010

08002cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff ff29 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cdc:	f7ff ff3e 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f7ff ff8e 	bl	8002c08 <NVIC_EncodePriority>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff5d 	bl	8002bb4 <__NVIC_SetPriority>
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff31 	bl	8002b78 <__NVIC_EnableIRQ>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffa2 	bl	8002c70 <SysTick_Config>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d008      	beq.n	8002d60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2204      	movs	r2, #4
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e022      	b.n	8002da6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 020e 	bic.w	r2, r2, #14
 8002d6e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f003 021c 	and.w	r2, r3, #28
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d92:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d005      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e029      	b.n	8002e2a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 020e 	bic.w	r2, r2, #14
 8002de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f003 021c 	and.w	r2, r3, #28
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
    }
  }
  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e42:	e17f      	b.n	8003144 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8171 	beq.w	800313e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d00b      	beq.n	8002e7c <HAL_GPIO_Init+0x48>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d007      	beq.n	8002e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e70:	2b11      	cmp	r3, #17
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d130      	bne.n	8002ede <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f003 0201 	and.w	r2, r3, #1
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d118      	bne.n	8002f1c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	f003 0201 	and.w	r2, r3, #1
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x128>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b12      	cmp	r3, #18
 8002f5a:	d123      	bne.n	8002fa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	08da      	lsrs	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3208      	adds	r2, #8
 8002f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	08da      	lsrs	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3208      	adds	r2, #8
 8002f9e:	6939      	ldr	r1, [r7, #16]
 8002fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0203 	and.w	r2, r3, #3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80ac 	beq.w	800313e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_GPIO_Init+0x330>)
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fea:	4a5e      	ldr	r2, [pc, #376]	; (8003164 <HAL_GPIO_Init+0x330>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ff2:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <HAL_GPIO_Init+0x330>)
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ffe:	4a5a      	ldr	r2, [pc, #360]	; (8003168 <HAL_GPIO_Init+0x334>)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	3302      	adds	r3, #2
 8003006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	220f      	movs	r2, #15
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003028:	d025      	beq.n	8003076 <HAL_GPIO_Init+0x242>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4f      	ldr	r2, [pc, #316]	; (800316c <HAL_GPIO_Init+0x338>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01f      	beq.n	8003072 <HAL_GPIO_Init+0x23e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4e      	ldr	r2, [pc, #312]	; (8003170 <HAL_GPIO_Init+0x33c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d019      	beq.n	800306e <HAL_GPIO_Init+0x23a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4d      	ldr	r2, [pc, #308]	; (8003174 <HAL_GPIO_Init+0x340>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_GPIO_Init+0x236>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4c      	ldr	r2, [pc, #304]	; (8003178 <HAL_GPIO_Init+0x344>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00d      	beq.n	8003066 <HAL_GPIO_Init+0x232>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4b      	ldr	r2, [pc, #300]	; (800317c <HAL_GPIO_Init+0x348>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <HAL_GPIO_Init+0x22e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <HAL_GPIO_Init+0x34c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_GPIO_Init+0x22a>
 800305a:	2306      	movs	r3, #6
 800305c:	e00c      	b.n	8003078 <HAL_GPIO_Init+0x244>
 800305e:	2307      	movs	r3, #7
 8003060:	e00a      	b.n	8003078 <HAL_GPIO_Init+0x244>
 8003062:	2305      	movs	r3, #5
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x244>
 8003066:	2304      	movs	r3, #4
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x244>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x244>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x244>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x244>
 8003076:	2300      	movs	r3, #0
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003088:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_GPIO_Init+0x334>)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_GPIO_Init+0x350>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030ba:	4a32      	ldr	r2, [pc, #200]	; (8003184 <HAL_GPIO_Init+0x350>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_GPIO_Init+0x350>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_GPIO_Init+0x350>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <HAL_GPIO_Init+0x350>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800310e:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_GPIO_Init+0x350>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_GPIO_Init+0x350>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <HAL_GPIO_Init+0x350>)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	f47f ae78 	bne.w	8002e44 <HAL_GPIO_Init+0x10>
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40010000 	.word	0x40010000
 800316c:	48000400 	.word	0x48000400
 8003170:	48000800 	.word	0x48000800
 8003174:	48000c00 	.word	0x48000c00
 8003178:	48001000 	.word	0x48001000
 800317c:	48001400 	.word	0x48001400
 8003180:	48001800 	.word	0x48001800
 8003184:	40010400 	.word	0x40010400

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
 8003194:	4613      	mov	r3, r2
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e081      	b.n	80032ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fb7c 	bl	80008dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003208:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003218:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e006      	b.n	8003240 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800323e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d104      	bne.n	8003252 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003264:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003274:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	ea42 0103 	orr.w	r1, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69d9      	ldr	r1, [r3, #28]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d138      	bne.n	800335e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e032      	b.n	8003360 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2224      	movs	r2, #36	; 0x24
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003328:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	d139      	bne.n	80033f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800338c:	2302      	movs	r3, #2
 800338e:	e033      	b.n	80033f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033f6:	2302      	movs	r3, #2
  }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_PWREx_GetVoltageRange+0x18>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342e:	d130      	bne.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003430:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d038      	beq.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003446:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2232      	movs	r2, #50	; 0x32
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0c9b      	lsrs	r3, r3, #18
 8003460:	3301      	adds	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003464:	e002      	b.n	800346c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003478:	d102      	bne.n	8003480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f2      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348c:	d110      	bne.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e00f      	b.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d007      	beq.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a8:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000
 80034c4:	20000000 	.word	0x20000000
 80034c8:	431bde83 	.word	0x431bde83

080034cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e3d4      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	4ba1      	ldr	r3, [pc, #644]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80e4 	beq.w	80036c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_RCC_OscConfig+0x4a>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	f040 808b 	bne.w	8003624 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b01      	cmp	r3, #1
 8003512:	f040 8087 	bne.w	8003624 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003516:	4b93      	ldr	r3, [pc, #588]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e3ac      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	4b8c      	ldr	r3, [pc, #560]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <HAL_RCC_OscConfig+0x7c>
 800353e:	4b89      	ldr	r3, [pc, #548]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003546:	e005      	b.n	8003554 <HAL_RCC_OscConfig+0x88>
 8003548:	4b86      	ldr	r3, [pc, #536]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003554:	4293      	cmp	r3, r2
 8003556:	d223      	bcs.n	80035a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fd41 	bl	8003fe4 <RCC_SetFlashLatencyFromMSIRange>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e38d      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800356c:	4b7d      	ldr	r3, [pc, #500]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a7c      	ldr	r2, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003572:	f043 0308 	orr.w	r3, r3, #8
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4977      	ldr	r1, [pc, #476]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800358a:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	4972      	ldr	r1, [pc, #456]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
 800359e:	e025      	b.n	80035ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a0:	4b70      	ldr	r3, [pc, #448]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6f      	ldr	r2, [pc, #444]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80035a6:	f043 0308 	orr.w	r3, r3, #8
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	496a      	ldr	r1, [pc, #424]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035be:	4b69      	ldr	r3, [pc, #420]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	4965      	ldr	r1, [pc, #404]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fd01 	bl	8003fe4 <RCC_SetFlashLatencyFromMSIRange>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e34d      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ec:	f000 fc36 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	495a      	ldr	r1, [pc, #360]	; (8003768 <HAL_RCC_OscConfig+0x29c>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_RCC_OscConfig+0x2a0>)
 800360a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800360c:	4b58      	ldr	r3, [pc, #352]	; (8003770 <HAL_RCC_OscConfig+0x2a4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd fffd 	bl	8001610 <HAL_InitTick>
 8003616:	4603      	mov	r3, r0
 8003618:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d052      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	e331      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d032      	beq.n	8003692 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800362c:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a4c      	ldr	r2, [pc, #304]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003638:	f7fe f83a 	bl	80016b0 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003640:	f7fe f836 	bl	80016b0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e31a      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003652:	4b44      	ldr	r3, [pc, #272]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a40      	ldr	r2, [pc, #256]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003664:	f043 0308 	orr.w	r3, r3, #8
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	493b      	ldr	r1, [pc, #236]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800367c:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	4936      	ldr	r1, [pc, #216]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
 8003690:	e01a      	b.n	80036c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003692:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a33      	ldr	r2, [pc, #204]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369e:	f7fe f807 	bl	80016b0 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a6:	f7fe f803 	bl	80016b0 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e2e7      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x1da>
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d074      	beq.n	80037be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d005      	beq.n	80036e6 <HAL_RCC_OscConfig+0x21a>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d10e      	bne.n	80036fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d10b      	bne.n	80036fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e6:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d064      	beq.n	80037bc <HAL_RCC_OscConfig+0x2f0>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d160      	bne.n	80037bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e2c4      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x24a>
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a15      	ldr	r2, [pc, #84]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e01d      	b.n	8003752 <HAL_RCC_OscConfig+0x286>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x26e>
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0f      	ldr	r2, [pc, #60]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e00b      	b.n	8003752 <HAL_RCC_OscConfig+0x286>
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a06      	ldr	r2, [pc, #24]	; (8003764 <HAL_RCC_OscConfig+0x298>)
 800374c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01c      	beq.n	8003794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd ffa9 	bl	80016b0 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003760:	e011      	b.n	8003786 <HAL_RCC_OscConfig+0x2ba>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	08008810 	.word	0x08008810
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fd ff9c 	bl	80016b0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e280      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003786:	4baf      	ldr	r3, [pc, #700]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x2a8>
 8003792:	e014      	b.n	80037be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd ff8c 	bl	80016b0 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fd ff88 	bl	80016b0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	; 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e26c      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ae:	4ba5      	ldr	r3, [pc, #660]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x2d0>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d060      	beq.n	800388c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_OscConfig+0x310>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d119      	bne.n	800380a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d116      	bne.n	800380a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037dc:	4b99      	ldr	r3, [pc, #612]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_OscConfig+0x328>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e249      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b93      	ldr	r3, [pc, #588]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	4990      	ldr	r1, [pc, #576]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003808:	e040      	b.n	800388c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d023      	beq.n	800385a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003812:	4b8c      	ldr	r3, [pc, #560]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a8b      	ldr	r2, [pc, #556]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd ff47 	bl	80016b0 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003826:	f7fd ff43 	bl	80016b0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e227      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003838:	4b82      	ldr	r3, [pc, #520]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	497c      	ldr	r1, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	e018      	b.n	800388c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b7a      	ldr	r3, [pc, #488]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a79      	ldr	r2, [pc, #484]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fd ff23 	bl	80016b0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386e:	f7fd ff1f 	bl	80016b0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e203      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003880:	4b70      	ldr	r3, [pc, #448]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d03c      	beq.n	8003912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01c      	beq.n	80038da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a0:	4b68      	ldr	r3, [pc, #416]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a6:	4a67      	ldr	r2, [pc, #412]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fefe 	bl	80016b0 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd fefa 	bl	80016b0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e1de      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ca:	4b5e      	ldr	r3, [pc, #376]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80038cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <HAL_RCC_OscConfig+0x3ec>
 80038d8:	e01b      	b.n	8003912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038da:	4b5a      	ldr	r3, [pc, #360]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e0:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fd fee1 	bl	80016b0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f2:	f7fd fedd 	bl	80016b0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1c1      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ef      	bne.n	80038f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80a6 	beq.w	8003a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003924:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10d      	bne.n	800394c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003930:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	4a43      	ldr	r2, [pc, #268]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393a:	6593      	str	r3, [r2, #88]	; 0x58
 800393c:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003948:	2301      	movs	r3, #1
 800394a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800394c:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <HAL_RCC_OscConfig+0x57c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d118      	bne.n	800398a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <HAL_RCC_OscConfig+0x57c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <HAL_RCC_OscConfig+0x57c>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003964:	f7fd fea4 	bl	80016b0 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd fea0 	bl	80016b0 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e184      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397e:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <HAL_RCC_OscConfig+0x57c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d108      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4d8>
 8003992:	4b2c      	ldr	r3, [pc, #176]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a2:	e024      	b.n	80039ee <HAL_RCC_OscConfig+0x522>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d110      	bne.n	80039ce <HAL_RCC_OscConfig+0x502>
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039bc:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039cc:	e00f      	b.n	80039ee <HAL_RCC_OscConfig+0x522>
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	4a17      	ldr	r2, [pc, #92]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 80039e6:	f023 0304 	bic.w	r3, r3, #4
 80039ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fd fe5b 	bl	80016b0 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fe57 	bl	80016b0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e139      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x578>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ed      	beq.n	80039fe <HAL_RCC_OscConfig+0x532>
 8003a22:	e01a      	b.n	8003a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fd fe44 	bl	80016b0 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a2a:	e00f      	b.n	8003a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7fd fe40 	bl	80016b0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d906      	bls.n	8003a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e122      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a4c:	4b90      	ldr	r3, [pc, #576]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e8      	bne.n	8003a2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a60:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	4a8a      	ldr	r2, [pc, #552]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8108 	beq.w	8003c86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	f040 80d0 	bne.w	8003c20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a80:	4b83      	ldr	r3, [pc, #524]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d130      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d127      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d11f      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ac0:	2a07      	cmp	r2, #7
 8003ac2:	bf14      	ite	ne
 8003ac4:	2201      	movne	r2, #1
 8003ac6:	2200      	moveq	r2, #0
 8003ac8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d113      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	3b01      	subs	r3, #1
 8003adc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	3b01      	subs	r3, #1
 8003af0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d06e      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d069      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003afc:	4b64      	ldr	r3, [pc, #400]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b08:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0b7      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b18:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b24:	f7fd fdc4 	bl	80016b0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd fdc0 	bl	80016b0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0a4      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3e:	4b54      	ldr	r3, [pc, #336]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b4a:	4b51      	ldr	r3, [pc, #324]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <HAL_RCC_OscConfig+0x7c8>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b5a:	3a01      	subs	r2, #1
 8003b5c:	0112      	lsls	r2, r2, #4
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b64:	0212      	lsls	r2, r2, #8
 8003b66:	4311      	orrs	r1, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0552      	lsls	r2, r2, #21
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0652      	lsls	r2, r2, #25
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b84:	0912      	lsrs	r2, r2, #4
 8003b86:	0452      	lsls	r2, r2, #17
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4941      	ldr	r1, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b90:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b9c:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a3b      	ldr	r2, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ba8:	f7fd fd82 	bl	80016b0 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fd fd7e 	bl	80016b0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e062      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bce:	e05a      	b.n	8003c86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e059      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d152      	bne.n	8003c86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf8:	f7fd fd5a 	bl	80016b0 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fd fd56 	bl	80016b0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e03a      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x734>
 8003c1e:	e032      	b.n	8003c86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d02d      	beq.n	8003c82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c44:	f023 0303 	bic.w	r3, r3, #3
 8003c48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fd29 	bl	80016b0 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fd fd25 	bl	80016b0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e009      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_OscConfig+0x7c4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x796>
 8003c80:	e001      	b.n	8003c86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	f99d808c 	.word	0xf99d808c

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0c8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b66      	ldr	r3, [pc, #408]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d910      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0207 	bic.w	r2, r3, #7
 8003cc2:	4961      	ldr	r1, [pc, #388]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b0      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d04c      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf0:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d121      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e09e      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d115      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e092      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d20:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e086      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e07e      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 0203 	bic.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	493f      	ldr	r1, [pc, #252]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d52:	f7fd fcad 	bl	80016b0 <HAL_GetTick>
 8003d56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5a:	f7fd fca9 	bl	80016b0 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e066      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d70:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 020c 	and.w	r2, r3, #12
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d1eb      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	492c      	ldr	r1, [pc, #176]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4924      	ldr	r1, [pc, #144]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <HAL_RCC_ClockConfig+0x1b0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e036      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4918      	ldr	r1, [pc, #96]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4910      	ldr	r1, [pc, #64]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e0e:	f000 f825 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_RCC_ClockConfig+0x1b4>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490c      	ldr	r1, [pc, #48]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fbec 	bl	8001610 <HAL_InitTick>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	08008810 	.word	0x08008810
 8003e54:	20000000 	.word	0x20000000
 8003e58:	20000004 	.word	0x20000004

08003e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6a:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e74:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x34>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d121      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d11e      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e90:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e9c:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ee2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d134      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0xa6>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d003      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0xac>
 8003f00:	e005      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f02:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f04:	617b      	str	r3, [r7, #20]
      break;
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f0a:	617b      	str	r3, [r7, #20]
      break;
 8003f0c:	e002      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	617b      	str	r3, [r7, #20]
      break;
 8003f12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	3301      	adds	r3, #1
 8003f20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	fb02 f203 	mul.w	r2, r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	0e5b      	lsrs	r3, r3, #25
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	3301      	adds	r3, #1
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f54:	69bb      	ldr	r3, [r7, #24]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	08008828 	.word	0x08008828
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	007a1200 	.word	0x007a1200

08003f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000000 	.word	0x20000000

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f90:	f7ff fff0 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08008820 	.word	0x08008820

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fbc:	f7ff ffda 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0adb      	lsrs	r3, r3, #11
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4904      	ldr	r1, [pc, #16]	; (8003fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	08008820 	.word	0x08008820

08003fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ffc:	f7ff fa02 	bl	8003404 <HAL_PWREx_GetVoltageRange>
 8004000:	6178      	str	r0, [r7, #20]
 8004002:	e014      	b.n	800402e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	4a24      	ldr	r2, [pc, #144]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	6593      	str	r3, [r2, #88]	; 0x58
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800401c:	f7ff f9f2 	bl	8003404 <HAL_PWREx_GetVoltageRange>
 8004020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d10b      	bne.n	800404e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d919      	bls.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2ba0      	cmp	r3, #160	; 0xa0
 8004040:	d902      	bls.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004042:	2302      	movs	r3, #2
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	e013      	b.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004048:	2301      	movs	r3, #1
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e010      	b.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b80      	cmp	r3, #128	; 0x80
 8004052:	d902      	bls.n	800405a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004054:	2303      	movs	r3, #3
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	e00a      	b.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b80      	cmp	r3, #128	; 0x80
 800405e:	d102      	bne.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004060:	2302      	movs	r3, #2
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	e004      	b.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b70      	cmp	r3, #112	; 0x70
 800406a:	d101      	bne.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800406c:	2301      	movs	r3, #1
 800406e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f023 0207 	bic.w	r2, r3, #7
 8004078:	4909      	ldr	r1, [pc, #36]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	40022000 	.word	0x40022000

080040a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040ac:	2300      	movs	r3, #0
 80040ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040b0:	2300      	movs	r3, #0
 80040b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d041      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040c8:	d02a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040ce:	d824      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040d4:	d008      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040da:	d81e      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e4:	d010      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040e6:	e018      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040e8:	4b86      	ldr	r3, [pc, #536]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a85      	ldr	r2, [pc, #532]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040f4:	e015      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fabb 	bl	8004678 <RCCEx_PLLSAI1_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004106:	e00c      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3320      	adds	r3, #32
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fba6 	bl	8004860 <RCCEx_PLLSAI2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004118:	e003      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	74fb      	strb	r3, [r7, #19]
      break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004128:	4b76      	ldr	r3, [pc, #472]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004136:	4973      	ldr	r1, [pc, #460]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800413e:	e001      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d041      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004154:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004158:	d02a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800415a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800415e:	d824      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004164:	d008      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800416a:	d81e      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004174:	d010      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004176:	e018      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004178:	4b62      	ldr	r3, [pc, #392]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a61      	ldr	r2, [pc, #388]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004184:	e015      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fa73 	bl	8004678 <RCCEx_PLLSAI1_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004196:	e00c      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3320      	adds	r3, #32
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fb5e 	bl	8004860 <RCCEx_PLLSAI2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	74fb      	strb	r3, [r7, #19]
      break;
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041b8:	4b52      	ldr	r3, [pc, #328]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c6:	494f      	ldr	r1, [pc, #316]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041ce:	e001      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80a0 	beq.w	8004322 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041e6:	4b47      	ldr	r3, [pc, #284]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b41      	ldr	r3, [pc, #260]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	4a40      	ldr	r2, [pc, #256]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	; 0x58
 8004208:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004214:	2301      	movs	r3, #1
 8004216:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004218:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a3a      	ldr	r2, [pc, #232]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004224:	f7fd fa44 	bl	80016b0 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800422a:	e009      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fd fa40 	bl	80016b0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	74fb      	strb	r3, [r7, #19]
        break;
 800423e:	e005      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ef      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d15c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01f      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d019      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fd f9ff 	bl	80016b0 <HAL_GetTick>
 80042b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b4:	e00b      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fd f9fb 	bl	80016b0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d902      	bls.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	74fb      	strb	r3, [r7, #19]
            break;
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ec      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f2:	4904      	ldr	r1, [pc, #16]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042fa:	e009      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	74bb      	strb	r3, [r7, #18]
 8004300:	e006      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004310:	7c7b      	ldrb	r3, [r7, #17]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004316:	4b9e      	ldr	r3, [pc, #632]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	4a9d      	ldr	r2, [pc, #628]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004320:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800432e:	4b98      	ldr	r3, [pc, #608]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f023 0203 	bic.w	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	4994      	ldr	r1, [pc, #592]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004350:	4b8f      	ldr	r3, [pc, #572]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f023 020c 	bic.w	r2, r3, #12
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	498c      	ldr	r1, [pc, #560]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004372:	4b87      	ldr	r3, [pc, #540]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	4983      	ldr	r1, [pc, #524]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004394:	4b7e      	ldr	r3, [pc, #504]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	497b      	ldr	r1, [pc, #492]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043b6:	4b76      	ldr	r3, [pc, #472]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c4:	4972      	ldr	r1, [pc, #456]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d8:	4b6d      	ldr	r3, [pc, #436]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	496a      	ldr	r1, [pc, #424]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fa:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	4961      	ldr	r1, [pc, #388]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800441c:	4b5c      	ldr	r3, [pc, #368]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	4959      	ldr	r1, [pc, #356]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800443e:	4b54      	ldr	r3, [pc, #336]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	4950      	ldr	r1, [pc, #320]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004460:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	4948      	ldr	r1, [pc, #288]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004482:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	493f      	ldr	r1, [pc, #252]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d028      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b2:	4937      	ldr	r1, [pc, #220]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c2:	d106      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a31      	ldr	r2, [pc, #196]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ce:	60d3      	str	r3, [r2, #12]
 80044d0:	e011      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044da:	d10c      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f8c8 	bl	8004678 <RCCEx_PLLSAI1_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044f2:	7cfb      	ldrb	r3, [r7, #19]
 80044f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d028      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	491f      	ldr	r1, [pc, #124]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004520:	d106      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4a1a      	ldr	r2, [pc, #104]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800452c:	60d3      	str	r3, [r2, #12]
 800452e:	e011      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004538:	d10c      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f899 	bl	8004678 <RCCEx_PLLSAI1_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457e:	d109      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a02      	ldr	r2, [pc, #8]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458a:	60d3      	str	r3, [r2, #12]
 800458c:	e014      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f867 	bl	8004678 <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02f      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c4:	4b2b      	ldr	r3, [pc, #172]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d2:	4928      	ldr	r1, [pc, #160]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e2:	d10d      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f844 	bl	8004678 <RCCEx_PLLSAI1_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d014      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	74bb      	strb	r3, [r7, #18]
 80045fe:	e011      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004608:	d10c      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3320      	adds	r3, #32
 800460e:	2102      	movs	r1, #2
 8004610:	4618      	mov	r0, r3
 8004612:	f000 f925 	bl	8004860 <RCCEx_PLLSAI2_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800463e:	490d      	ldr	r1, [pc, #52]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004662:	4904      	ldr	r1, [pc, #16]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800466a:	7cbb      	ldrb	r3, [r7, #18]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000

08004678 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004686:	4b75      	ldr	r3, [pc, #468]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d018      	beq.n	80046c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004692:	4b72      	ldr	r3, [pc, #456]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0203 	and.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d10d      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
       ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046aa:	4b6c      	ldr	r3, [pc, #432]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
       ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d047      	beq.n	800474e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	e044      	b.n	800474e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d018      	beq.n	80046fe <RCCEx_PLLSAI1_Config+0x86>
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d825      	bhi.n	800471c <RCCEx_PLLSAI1_Config+0xa4>
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d002      	beq.n	80046da <RCCEx_PLLSAI1_Config+0x62>
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d009      	beq.n	80046ec <RCCEx_PLLSAI1_Config+0x74>
 80046d8:	e020      	b.n	800471c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046da:	4b60      	ldr	r3, [pc, #384]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d11d      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ea:	e01a      	b.n	8004722 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046ec:	4b5b      	ldr	r3, [pc, #364]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d116      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fc:	e013      	b.n	8004726 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046fe:	4b57      	ldr	r3, [pc, #348]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800470a:	4b54      	ldr	r3, [pc, #336]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800471a:	e006      	b.n	800472a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      break;
 8004720:	e004      	b.n	800472c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472a:	bf00      	nop
    }

    if(status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10d      	bne.n	800474e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004732:	4b4a      	ldr	r3, [pc, #296]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	430b      	orrs	r3, r1
 8004748:	4944      	ldr	r1, [pc, #272]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d17d      	bne.n	8004850 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004754:	4b41      	ldr	r3, [pc, #260]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a40      	ldr	r2, [pc, #256]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800475e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004760:	f7fc ffa6 	bl	80016b0 <HAL_GetTick>
 8004764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004766:	e009      	b.n	800477c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004768:	f7fc ffa2 	bl	80016b0 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d902      	bls.n	800477c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	73fb      	strb	r3, [r7, #15]
        break;
 800477a:	e005      	b.n	8004788 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800477c:	4b37      	ldr	r3, [pc, #220]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ef      	bne.n	8004768 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d160      	bne.n	8004850 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d111      	bne.n	80047b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004794:	4b31      	ldr	r3, [pc, #196]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6892      	ldr	r2, [r2, #8]
 80047a4:	0211      	lsls	r1, r2, #8
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68d2      	ldr	r2, [r2, #12]
 80047aa:	0912      	lsrs	r2, r2, #4
 80047ac:	0452      	lsls	r2, r2, #17
 80047ae:	430a      	orrs	r2, r1
 80047b0:	492a      	ldr	r1, [pc, #168]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	610b      	str	r3, [r1, #16]
 80047b6:	e027      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d112      	bne.n	80047e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047be:	4b27      	ldr	r3, [pc, #156]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6892      	ldr	r2, [r2, #8]
 80047ce:	0211      	lsls	r1, r2, #8
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6912      	ldr	r2, [r2, #16]
 80047d4:	0852      	lsrs	r2, r2, #1
 80047d6:	3a01      	subs	r2, #1
 80047d8:	0552      	lsls	r2, r2, #21
 80047da:	430a      	orrs	r2, r1
 80047dc:	491f      	ldr	r1, [pc, #124]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	610b      	str	r3, [r1, #16]
 80047e2:	e011      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6892      	ldr	r2, [r2, #8]
 80047f4:	0211      	lsls	r1, r2, #8
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6952      	ldr	r2, [r2, #20]
 80047fa:	0852      	lsrs	r2, r2, #1
 80047fc:	3a01      	subs	r2, #1
 80047fe:	0652      	lsls	r2, r2, #25
 8004800:	430a      	orrs	r2, r1
 8004802:	4916      	ldr	r1, [pc, #88]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004808:	4b14      	ldr	r3, [pc, #80]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004812:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fc ff4c 	bl	80016b0 <HAL_GetTick>
 8004818:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800481a:	e009      	b.n	8004830 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800481c:	f7fc ff48 	bl	80016b0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d902      	bls.n	8004830 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	73fb      	strb	r3, [r7, #15]
          break;
 800482e:	e005      	b.n	800483c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ef      	beq.n	800481c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	4904      	ldr	r1, [pc, #16]	; (800485c <RCCEx_PLLSAI1_Config+0x1e4>)
 800484c:	4313      	orrs	r3, r2
 800484e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000

08004860 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d018      	beq.n	80048ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800487a:	4b67      	ldr	r3, [pc, #412]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0203 	and.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d10d      	bne.n	80048a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
       ||
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004892:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
       ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d047      	beq.n	8004936 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
 80048aa:	e044      	b.n	8004936 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d018      	beq.n	80048e6 <RCCEx_PLLSAI2_Config+0x86>
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d825      	bhi.n	8004904 <RCCEx_PLLSAI2_Config+0xa4>
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d002      	beq.n	80048c2 <RCCEx_PLLSAI2_Config+0x62>
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d009      	beq.n	80048d4 <RCCEx_PLLSAI2_Config+0x74>
 80048c0:	e020      	b.n	8004904 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048c2:	4b55      	ldr	r3, [pc, #340]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11d      	bne.n	800490a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d2:	e01a      	b.n	800490a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d116      	bne.n	800490e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e4:	e013      	b.n	800490e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048e6:	4b4c      	ldr	r3, [pc, #304]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10f      	bne.n	8004912 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004902:	e006      	b.n	8004912 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	e004      	b.n	8004914 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800490a:	bf00      	nop
 800490c:	e002      	b.n	8004914 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004912:	bf00      	nop
    }

    if(status == HAL_OK)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10d      	bne.n	8004936 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800491a:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6819      	ldr	r1, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	430b      	orrs	r3, r1
 8004930:	4939      	ldr	r1, [pc, #228]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004932:	4313      	orrs	r3, r2
 8004934:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d167      	bne.n	8004a0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a35      	ldr	r2, [pc, #212]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004948:	f7fc feb2 	bl	80016b0 <HAL_GetTick>
 800494c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800494e:	e009      	b.n	8004964 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004950:	f7fc feae 	bl	80016b0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d902      	bls.n	8004964 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	73fb      	strb	r3, [r7, #15]
        break;
 8004962:	e005      	b.n	8004970 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004964:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ef      	bne.n	8004950 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d14a      	bne.n	8004a0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d111      	bne.n	80049a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	0211      	lsls	r1, r2, #8
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68d2      	ldr	r2, [r2, #12]
 8004992:	0912      	lsrs	r2, r2, #4
 8004994:	0452      	lsls	r2, r2, #17
 8004996:	430a      	orrs	r2, r1
 8004998:	491f      	ldr	r1, [pc, #124]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800499a:	4313      	orrs	r3, r2
 800499c:	614b      	str	r3, [r1, #20]
 800499e:	e011      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049a0:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6892      	ldr	r2, [r2, #8]
 80049b0:	0211      	lsls	r1, r2, #8
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6912      	ldr	r2, [r2, #16]
 80049b6:	0852      	lsrs	r2, r2, #1
 80049b8:	3a01      	subs	r2, #1
 80049ba:	0652      	lsls	r2, r2, #25
 80049bc:	430a      	orrs	r2, r1
 80049be:	4916      	ldr	r1, [pc, #88]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fc fe6e 	bl	80016b0 <HAL_GetTick>
 80049d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049d6:	e009      	b.n	80049ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049d8:	f7fc fe6a 	bl	80016b0 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d902      	bls.n	80049ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	73fb      	strb	r3, [r7, #15]
          break;
 80049ea:	e005      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4904      	ldr	r1, [pc, #16]	; (8004a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000

08004a1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d06c      	beq.n	8004b08 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc f8a6 	bl	8000b94 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	22ca      	movs	r2, #202	; 0xca
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2253      	movs	r2, #83	; 0x53
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa49 	bl	8004ef8 <RTC_EnterInitMode>
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d14b      	bne.n	8004b08 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a82:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68d2      	ldr	r2, [r2, #12]
 8004aaa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6919      	ldr	r1, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	041a      	lsls	r2, r3, #16
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa4d 	bl	8004f60 <RTC_ExitInitMode>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11b      	bne.n	8004b08 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0203 	bic.w	r2, r2, #3
 8004ade:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	22ff      	movs	r2, #255	; 0xff
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b12:	b590      	push	{r4, r7, lr}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_RTC_SetTime+0x1a>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e08b      	b.n	8004c44 <HAL_RTC_SetTime+0x132>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	22ca      	movs	r2, #202	; 0xca
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2253      	movs	r2, #83	; 0x53
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f9d3 	bl	8004ef8 <RTC_EnterInitMode>
 8004b52:	4603      	mov	r3, r0
 8004b54:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d163      	bne.n	8004c24 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d126      	bne.n	8004bb0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2200      	movs	r2, #0
 8004b74:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fa2e 	bl	8004fdc <RTC_ByteToBcd2>
 8004b80:	4603      	mov	r3, r0
 8004b82:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fa27 	bl	8004fdc <RTC_ByteToBcd2>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b92:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	789b      	ldrb	r3, [r3, #2]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fa1f 	bl	8004fdc <RTC_ByteToBcd2>
 8004b9e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ba0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	78db      	ldrb	r3, [r3, #3]
 8004ba8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e018      	b.n	8004be2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004bd0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004bd6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	78db      	ldrb	r3, [r3, #3]
 8004bdc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004bec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004bf0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f9a0 	bl	8004f60 <RTC_ExitInitMode>
 8004c20:	4603      	mov	r3, r0
 8004c22:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	22ff      	movs	r2, #255	; 0xff
 8004c2a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd90      	pop	{r4, r7, pc}

08004c4c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004c7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	0d9b      	lsrs	r3, r3, #22
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11a      	bne.n	8004cfa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 f9a7 	bl	800501c <RTC_Bcd2ToByte>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f99e 	bl	800501c <RTC_Bcd2ToByte>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	789b      	ldrb	r3, [r3, #2]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f995 	bl	800501c <RTC_Bcd2ToByte>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_RTC_SetDate+0x1a>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e075      	b.n	8004e0a <HAL_RTC_SetDate+0x106>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10e      	bne.n	8004d52 <HAL_RTC_SetDate+0x4e>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	330a      	adds	r3, #10
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11c      	bne.n	8004d92 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	78db      	ldrb	r3, [r3, #3]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 f93d 	bl	8004fdc <RTC_ByteToBcd2>
 8004d62:	4603      	mov	r3, r0
 8004d64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f936 	bl	8004fdc <RTC_ByteToBcd2>
 8004d70:	4603      	mov	r3, r0
 8004d72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004d74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	789b      	ldrb	r3, [r3, #2]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f92e 	bl	8004fdc <RTC_ByteToBcd2>
 8004d80:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004d82:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e00e      	b.n	8004db0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	78db      	ldrb	r3, [r3, #3]
 8004d96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004d9e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004da4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	22ca      	movs	r2, #202	; 0xca
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2253      	movs	r2, #83	; 0x53
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f899 	bl	8004ef8 <RTC_EnterInitMode>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10c      	bne.n	8004dea <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004dda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004dde:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f8bd 	bl	8004f60 <RTC_ExitInitMode>
 8004de6:	4603      	mov	r3, r0
 8004de8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	22ff      	movs	r2, #255	; 0xff
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd90      	pop	{r4, r7, pc}

08004e12 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	0b5b      	lsrs	r3, r3, #13
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11a      	bne.n	8004ea2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	78db      	ldrb	r3, [r3, #3]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f8d3 	bl	800501c <RTC_Bcd2ToByte>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f8ca 	bl	800501c <RTC_Bcd2ToByte>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	789b      	ldrb	r3, [r3, #2]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f8c1 	bl	800501c <RTC_Bcd2ToByte>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ec2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004ec4:	f7fc fbf4 	bl	80016b0 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004eca:	e009      	b.n	8004ee0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ecc:	f7fc fbf0 	bl	80016b0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eda:	d901      	bls.n	8004ee0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e007      	b.n	8004ef0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0ee      	beq.n	8004ecc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d120      	bne.n	8004f54 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f1c:	f7fc fbc8 	bl	80016b0 <HAL_GetTick>
 8004f20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f22:	e00d      	b.n	8004f40 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004f24:	f7fc fbc4 	bl	80016b0 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f32:	d905      	bls.n	8004f40 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <RTC_EnterInitMode+0x5c>
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d1e7      	bne.n	8004f24 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <RTC_ExitInitMode+0x78>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <RTC_ExitInitMode+0x78>)
 8004f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f76:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f78:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <RTC_ExitInitMode+0x78>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10c      	bne.n	8004f9e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff91 	bl	8004eac <HAL_RTC_WaitForSynchro>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01e      	beq.n	8004fce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2203      	movs	r2, #3
 8004f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	e017      	b.n	8004fce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <RTC_ExitInitMode+0x78>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <RTC_ExitInitMode+0x78>)
 8004fa4:	f023 0320 	bic.w	r3, r3, #32
 8004fa8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ff7e 	bl	8004eac <HAL_RTC_WaitForSynchro>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <RTC_ExitInitMode+0x78>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <RTC_ExitInitMode+0x78>)
 8004fc8:	f043 0320 	orr.w	r3, r3, #32
 8004fcc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40002800 	.word	0x40002800

08004fdc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004fee:	e005      	b.n	8004ffc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004ff6:	7afb      	ldrb	r3, [r7, #11]
 8004ff8:	3b0a      	subs	r3, #10
 8004ffa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	d8f6      	bhi.n	8004ff0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	b2da      	uxtb	r2, r3
 800500a:	7afb      	ldrb	r3, [r7, #11]
 800500c:	4313      	orrs	r3, r2
 800500e:	b2db      	uxtb	r3, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	0092      	lsls	r2, r2, #2
 8005030:	4413      	add	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	b2da      	uxtb	r2, r3
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	4413      	add	r3, r2
 8005042:	b2db      	uxtb	r3, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e034      	b.n	80050d2 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	22ca      	movs	r2, #202	; 0xca
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2253      	movs	r2, #83	; 0x53
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005096:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80050b6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e095      	b.n	800521c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d108      	bne.n	800510a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005100:	d009      	beq.n	8005116 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	61da      	str	r2, [r3, #28]
 8005108:	e005      	b.n	8005116 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fb ff79 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005156:	d902      	bls.n	800515e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e002      	b.n	8005164 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800515e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005162:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800516c:	d007      	beq.n	800517e <HAL_SPI_Init+0xa0>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005176:	d002      	beq.n	800517e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	ea42 0103 	orr.w	r1, r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	f003 0204 	and.w	r2, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051fa:	ea42 0103 	orr.w	r1, r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_SPI_Transmit+0x22>
 8005242:	2302      	movs	r3, #2
 8005244:	e158      	b.n	80054f8 <HAL_SPI_Transmit+0x2d4>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800524e:	f7fc fa2f 	bl	80016b0 <HAL_GetTick>
 8005252:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d002      	beq.n	800526a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005264:	2302      	movs	r3, #2
 8005266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005268:	e13d      	b.n	80054e6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_SPI_Transmit+0x52>
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	77fb      	strb	r3, [r7, #31]
    goto error;
 800527a:	e134      	b.n	80054e6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2203      	movs	r2, #3
 8005280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	88fa      	ldrh	r2, [r7, #6]
 8005294:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	88fa      	ldrh	r2, [r7, #6]
 800529a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c6:	d10f      	bne.n	80052e8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d007      	beq.n	8005306 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005304:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800530e:	d94b      	bls.n	80053a8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_SPI_Transmit+0xfa>
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d13e      	bne.n	800539c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	881a      	ldrh	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	1c9a      	adds	r2, r3, #2
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005342:	e02b      	b.n	800539c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d112      	bne.n	8005378 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	1c9a      	adds	r2, r3, #2
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005376:	e011      	b.n	800539c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005378:	f7fc f99a 	bl	80016b0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d803      	bhi.n	8005390 <HAL_SPI_Transmit+0x16c>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Transmit+0x172>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	77fb      	strb	r3, [r7, #31]
          goto error;
 800539a:	e0a4      	b.n	80054e6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1ce      	bne.n	8005344 <HAL_SPI_Transmit+0x120>
 80053a6:	e07c      	b.n	80054a2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_SPI_Transmit+0x192>
 80053b0:	8afb      	ldrh	r3, [r7, #22]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d170      	bne.n	8005498 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d912      	bls.n	80053e6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	881a      	ldrh	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	1c9a      	adds	r2, r3, #2
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b02      	subs	r3, #2
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e4:	e058      	b.n	8005498 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800540c:	e044      	b.n	8005498 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b02      	cmp	r3, #2
 800541a:	d12b      	bne.n	8005474 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d912      	bls.n	800544c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b02      	subs	r3, #2
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800544a:	e025      	b.n	8005498 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005472:	e011      	b.n	8005498 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005474:	f7fc f91c 	bl	80016b0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d803      	bhi.n	800548c <HAL_SPI_Transmit+0x268>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548a:	d102      	bne.n	8005492 <HAL_SPI_Transmit+0x26e>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005496:	e026      	b.n	80054e6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1b5      	bne.n	800540e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f944 	bl	8005734 <SPI_EndRxTxTransaction>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e000      	b.n	80054e6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80054e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005510:	f7fc f8ce 	bl	80016b0 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	4413      	add	r3, r2
 800551e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005520:	f7fc f8c6 	bl	80016b0 <HAL_GetTick>
 8005524:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005526:	4b39      	ldr	r3, [pc, #228]	; (800560c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	015b      	lsls	r3, r3, #5
 800552c:	0d1b      	lsrs	r3, r3, #20
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	fb02 f303 	mul.w	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005536:	e054      	b.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553e:	d050      	beq.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005540:	f7fc f8b6 	bl	80016b0 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	429a      	cmp	r2, r3
 800554e:	d902      	bls.n	8005556 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d13d      	bne.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005564:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800556e:	d111      	bne.n	8005594 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005578:	d004      	beq.n	8005584 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005582:	d107      	bne.n	8005594 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005592:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559c:	d10f      	bne.n	80055be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e017      	b.n	8005602 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	3b01      	subs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d19b      	bne.n	8005538 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000000 	.word	0x20000000

08005610 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800561e:	f7fc f847 	bl	80016b0 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	4413      	add	r3, r2
 800562c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800562e:	f7fc f83f 	bl	80016b0 <HAL_GetTick>
 8005632:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005634:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	00da      	lsls	r2, r3, #3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	0d1b      	lsrs	r3, r3, #20
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800564c:	e062      	b.n	8005714 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005654:	d109      	bne.n	800566a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005668:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005670:	d050      	beq.n	8005714 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005672:	f7fc f81d 	bl	80016b0 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	429a      	cmp	r2, r3
 8005680:	d902      	bls.n	8005688 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d13d      	bne.n	8005704 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d111      	bne.n	80056c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056aa:	d004      	beq.n	80056b6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d107      	bne.n	80056c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	d10f      	bne.n	80056f0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e010      	b.n	8005726 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3b01      	subs	r3, #1
 8005712:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d194      	bne.n	800564e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000000 	.word	0x20000000

08005734 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ff5f 	bl	8005610 <SPI_WaitFifoStateUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e027      	b.n	80057b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	2180      	movs	r1, #128	; 0x80
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff fec4 	bl	8005500 <SPI_WaitFlagStateUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e014      	b.n	80057b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7ff ff38 	bl	8005610 <SPI_WaitFifoStateUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e000      	b.n	80057b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e049      	b.n	8005866 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fdbe 	bl	8001368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f000 fa4c 	bl	8005c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d109      	bne.n	8005894 <HAL_TIM_PWM_Start+0x24>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e03c      	b.n	800590e <HAL_TIM_PWM_Start+0x9e>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d109      	bne.n	80058ae <HAL_TIM_PWM_Start+0x3e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	e02f      	b.n	800590e <HAL_TIM_PWM_Start+0x9e>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d109      	bne.n	80058c8 <HAL_TIM_PWM_Start+0x58>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	e022      	b.n	800590e <HAL_TIM_PWM_Start+0x9e>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d109      	bne.n	80058e2 <HAL_TIM_PWM_Start+0x72>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	bf14      	ite	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	2300      	moveq	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	e015      	b.n	800590e <HAL_TIM_PWM_Start+0x9e>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d109      	bne.n	80058fc <HAL_TIM_PWM_Start+0x8c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	e008      	b.n	800590e <HAL_TIM_PWM_Start+0x9e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	bf14      	ite	ne
 8005908:	2301      	movne	r3, #1
 800590a:	2300      	moveq	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e09c      	b.n	8005a50 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0xb6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005924:	e023      	b.n	800596e <HAL_TIM_PWM_Start+0xfe>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xc6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005934:	e01b      	b.n	800596e <HAL_TIM_PWM_Start+0xfe>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0xd6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005944:	e013      	b.n	800596e <HAL_TIM_PWM_Start+0xfe>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Start+0xe6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005954:	e00b      	b.n	800596e <HAL_TIM_PWM_Start+0xfe>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b10      	cmp	r3, #16
 800595a:	d104      	bne.n	8005966 <HAL_TIM_PWM_Start+0xf6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005964:	e003      	b.n	800596e <HAL_TIM_PWM_Start+0xfe>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fd00 	bl	800637c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a35      	ldr	r2, [pc, #212]	; (8005a58 <HAL_TIM_PWM_Start+0x1e8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <HAL_TIM_PWM_Start+0x13e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a34      	ldr	r2, [pc, #208]	; (8005a5c <HAL_TIM_PWM_Start+0x1ec>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <HAL_TIM_PWM_Start+0x13e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a32      	ldr	r2, [pc, #200]	; (8005a60 <HAL_TIM_PWM_Start+0x1f0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_TIM_PWM_Start+0x13e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a31      	ldr	r2, [pc, #196]	; (8005a64 <HAL_TIM_PWM_Start+0x1f4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_TIM_PWM_Start+0x13e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2f      	ldr	r2, [pc, #188]	; (8005a68 <HAL_TIM_PWM_Start+0x1f8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_TIM_PWM_Start+0x142>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_TIM_PWM_Start+0x144>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <HAL_TIM_PWM_Start+0x1e8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x19e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059da:	d018      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x19e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a22      	ldr	r2, [pc, #136]	; (8005a6c <HAL_TIM_PWM_Start+0x1fc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x19e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a21      	ldr	r2, [pc, #132]	; (8005a70 <HAL_TIM_PWM_Start+0x200>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x19e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1f      	ldr	r2, [pc, #124]	; (8005a74 <HAL_TIM_PWM_Start+0x204>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x19e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <HAL_TIM_PWM_Start+0x1ec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x19e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <HAL_TIM_PWM_Start+0x1f0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d115      	bne.n	8005a3a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <HAL_TIM_PWM_Start+0x208>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b06      	cmp	r3, #6
 8005a1e:	d015      	beq.n	8005a4c <HAL_TIM_PWM_Start+0x1dc>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a26:	d011      	beq.n	8005a4c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a38:	e008      	b.n	8005a4c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0201 	orr.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e000      	b.n	8005a4e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40000c00 	.word	0x40000c00
 8005a78:	00010007 	.word	0x00010007

08005a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0fd      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b14      	cmp	r3, #20
 8005aa2:	f200 80f0 	bhi.w	8005c86 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005b01 	.word	0x08005b01
 8005ab0:	08005c87 	.word	0x08005c87
 8005ab4:	08005c87 	.word	0x08005c87
 8005ab8:	08005c87 	.word	0x08005c87
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005c87 	.word	0x08005c87
 8005ac4:	08005c87 	.word	0x08005c87
 8005ac8:	08005c87 	.word	0x08005c87
 8005acc:	08005b83 	.word	0x08005b83
 8005ad0:	08005c87 	.word	0x08005c87
 8005ad4:	08005c87 	.word	0x08005c87
 8005ad8:	08005c87 	.word	0x08005c87
 8005adc:	08005bc3 	.word	0x08005bc3
 8005ae0:	08005c87 	.word	0x08005c87
 8005ae4:	08005c87 	.word	0x08005c87
 8005ae8:	08005c87 	.word	0x08005c87
 8005aec:	08005c05 	.word	0x08005c05
 8005af0:	08005c87 	.word	0x08005c87
 8005af4:	08005c87 	.word	0x08005c87
 8005af8:	08005c87 	.word	0x08005c87
 8005afc:	08005c45 	.word	0x08005c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f962 	bl	8005dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0208 	orr.w	r2, r2, #8
 8005b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0204 	bic.w	r2, r2, #4
 8005b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6999      	ldr	r1, [r3, #24]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	619a      	str	r2, [r3, #24]
      break;
 8005b3e:	e0a3      	b.n	8005c88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f9d2 	bl	8005ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6999      	ldr	r1, [r3, #24]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]
      break;
 8005b80:	e082      	b.n	8005c88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fa3b 	bl	8006004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0208 	orr.w	r2, r2, #8
 8005b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0204 	bic.w	r2, r2, #4
 8005bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69d9      	ldr	r1, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	61da      	str	r2, [r3, #28]
      break;
 8005bc0:	e062      	b.n	8005c88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 faa3 	bl	8006114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69d9      	ldr	r1, [r3, #28]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	021a      	lsls	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	61da      	str	r2, [r3, #28]
      break;
 8005c02:	e041      	b.n	8005c88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 faec 	bl	80061e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0208 	orr.w	r2, r2, #8
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0204 	bic.w	r2, r2, #4
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c42:	e021      	b.n	8005c88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fb30 	bl	80062b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	021a      	lsls	r2, r3, #8
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c84:	e000      	b.n	8005c88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005c86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop

08005c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a40      	ldr	r2, [pc, #256]	; (8005db0 <TIM_Base_SetConfig+0x114>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d00f      	beq.n	8005cdc <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3d      	ldr	r2, [pc, #244]	; (8005db4 <TIM_Base_SetConfig+0x118>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3c      	ldr	r2, [pc, #240]	; (8005db8 <TIM_Base_SetConfig+0x11c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3b      	ldr	r2, [pc, #236]	; (8005dbc <TIM_Base_SetConfig+0x120>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3a      	ldr	r2, [pc, #232]	; (8005dc0 <TIM_Base_SetConfig+0x124>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d108      	bne.n	8005cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2f      	ldr	r2, [pc, #188]	; (8005db0 <TIM_Base_SetConfig+0x114>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01f      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfc:	d01b      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2c      	ldr	r2, [pc, #176]	; (8005db4 <TIM_Base_SetConfig+0x118>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d017      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a2b      	ldr	r2, [pc, #172]	; (8005db8 <TIM_Base_SetConfig+0x11c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2a      	ldr	r2, [pc, #168]	; (8005dbc <TIM_Base_SetConfig+0x120>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a29      	ldr	r2, [pc, #164]	; (8005dc0 <TIM_Base_SetConfig+0x124>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a28      	ldr	r2, [pc, #160]	; (8005dc4 <TIM_Base_SetConfig+0x128>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a27      	ldr	r2, [pc, #156]	; (8005dc8 <TIM_Base_SetConfig+0x12c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_Base_SetConfig+0x9a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <TIM_Base_SetConfig+0x130>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <TIM_Base_SetConfig+0x114>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <TIM_Base_SetConfig+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0xf8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a11      	ldr	r2, [pc, #68]	; (8005dc4 <TIM_Base_SetConfig+0x128>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0xf8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <TIM_Base_SetConfig+0x12c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0xf8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a0f      	ldr	r2, [pc, #60]	; (8005dcc <TIM_Base_SetConfig+0x130>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d103      	bne.n	8005d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	615a      	str	r2, [r3, #20]
}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800

08005dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f023 0201 	bic.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 0302 	bic.w	r3, r3, #2
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <TIM_OC1_SetConfig+0x10c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00f      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <TIM_OC1_SetConfig+0x110>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <TIM_OC1_SetConfig+0x114>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <TIM_OC1_SetConfig+0x118>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a28      	ldr	r2, [pc, #160]	; (8005eec <TIM_OC1_SetConfig+0x11c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10c      	bne.n	8005e6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0308 	bic.w	r3, r3, #8
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0304 	bic.w	r3, r3, #4
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <TIM_OC1_SetConfig+0x10c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00f      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <TIM_OC1_SetConfig+0x110>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00b      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <TIM_OC1_SetConfig+0x114>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <TIM_OC1_SetConfig+0x118>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <TIM_OC1_SetConfig+0x11c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d111      	bne.n	8005eb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800

08005ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0320 	bic.w	r3, r3, #32
 8005f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a28      	ldr	r2, [pc, #160]	; (8005ff0 <TIM_OC2_SetConfig+0x100>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC2_SetConfig+0x6c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <TIM_OC2_SetConfig+0x104>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d10d      	bne.n	8005f78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <TIM_OC2_SetConfig+0x100>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <TIM_OC2_SetConfig+0x104>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <TIM_OC2_SetConfig+0x108>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a1a      	ldr	r2, [pc, #104]	; (8005ffc <TIM_OC2_SetConfig+0x10c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a19      	ldr	r2, [pc, #100]	; (8006000 <TIM_OC2_SetConfig+0x110>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d113      	bne.n	8005fc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40012c00 	.word	0x40012c00
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a27      	ldr	r2, [pc, #156]	; (8006100 <TIM_OC3_SetConfig+0xfc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_OC3_SetConfig+0x6a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a26      	ldr	r2, [pc, #152]	; (8006104 <TIM_OC3_SetConfig+0x100>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10d      	bne.n	800608a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <TIM_OC3_SetConfig+0xfc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00f      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <TIM_OC3_SetConfig+0x100>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00b      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1a      	ldr	r2, [pc, #104]	; (8006108 <TIM_OC3_SetConfig+0x104>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a19      	ldr	r2, [pc, #100]	; (800610c <TIM_OC3_SetConfig+0x108>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a18      	ldr	r2, [pc, #96]	; (8006110 <TIM_OC3_SetConfig+0x10c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d113      	bne.n	80060da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	621a      	str	r2, [r3, #32]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40013400 	.word	0x40013400
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <TIM_OC4_SetConfig+0xc0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00f      	beq.n	8006198 <TIM_OC4_SetConfig+0x84>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <TIM_OC4_SetConfig+0xc4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00b      	beq.n	8006198 <TIM_OC4_SetConfig+0x84>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a16      	ldr	r2, [pc, #88]	; (80061dc <TIM_OC4_SetConfig+0xc8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_OC4_SetConfig+0x84>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a15      	ldr	r2, [pc, #84]	; (80061e0 <TIM_OC4_SetConfig+0xcc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC4_SetConfig+0x84>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <TIM_OC4_SetConfig+0xd0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d109      	bne.n	80061ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800619e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	019b      	lsls	r3, r3, #6
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	40013400 	.word	0x40013400
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800

080061e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800622c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <TIM_OC5_SetConfig+0xb4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00f      	beq.n	8006262 <TIM_OC5_SetConfig+0x7a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <TIM_OC5_SetConfig+0xb8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_OC5_SetConfig+0x7a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <TIM_OC5_SetConfig+0xbc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_OC5_SetConfig+0x7a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a14      	ldr	r2, [pc, #80]	; (80062a8 <TIM_OC5_SetConfig+0xc0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_OC5_SetConfig+0x7a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <TIM_OC5_SetConfig+0xc4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d109      	bne.n	8006276 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	621a      	str	r2, [r3, #32]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <TIM_OC6_SetConfig+0xb8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00f      	beq.n	800632c <TIM_OC6_SetConfig+0x7c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a17      	ldr	r2, [pc, #92]	; (800636c <TIM_OC6_SetConfig+0xbc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00b      	beq.n	800632c <TIM_OC6_SetConfig+0x7c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a16      	ldr	r2, [pc, #88]	; (8006370 <TIM_OC6_SetConfig+0xc0>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_OC6_SetConfig+0x7c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a15      	ldr	r2, [pc, #84]	; (8006374 <TIM_OC6_SetConfig+0xc4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC6_SetConfig+0x7c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a14      	ldr	r2, [pc, #80]	; (8006378 <TIM_OC6_SetConfig+0xc8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d109      	bne.n	8006340 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40013400 	.word	0x40013400
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800

0800637c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	2201      	movs	r2, #1
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1a      	ldr	r2, [r3, #32]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	43db      	mvns	r3, r3
 800639e:	401a      	ands	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1a      	ldr	r2, [r3, #32]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	431a      	orrs	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e068      	b.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2e      	ldr	r2, [pc, #184]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2d      	ldr	r2, [pc, #180]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800641a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d018      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a14      	ldr	r2, [pc, #80]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10c      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800648c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	4313      	orrs	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40000c00 	.word	0x40000c00
 80064d4:	40014000 	.word	0x40014000

080064d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e040      	b.n	800656c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fa ffbc 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2224      	movs	r2, #36	; 0x24
 8006504:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fbb4 	bl	8006c84 <UART_SetConfig>
 800651c:	4603      	mov	r3, r0
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e022      	b.n	800656c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fe32 	bl	8007198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 feb9 	bl	80072dc <UART_CheckIdleState>
 800656a:	4603      	mov	r3, r0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006588:	2b20      	cmp	r3, #32
 800658a:	f040 8082 	bne.w	8006692 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UART_Transmit+0x26>
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e07a      	b.n	8006694 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UART_Transmit+0x38>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e073      	b.n	8006694 <HAL_UART_Transmit+0x120>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2221      	movs	r2, #33	; 0x21
 80065c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065c2:	f7fb f875 	bl	80016b0 <HAL_GetTick>
 80065c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e0:	d108      	bne.n	80065f4 <HAL_UART_Transmit+0x80>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	e003      	b.n	80065fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006604:	e02d      	b.n	8006662 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2200      	movs	r2, #0
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 feac 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e039      	b.n	8006694 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006632:	b292      	uxth	r2, r2
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	3302      	adds	r3, #2
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	e008      	b.n	8006650 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	b292      	uxth	r2, r2
 8006648:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3301      	adds	r3, #1
 800664e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1cb      	bne.n	8006606 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	2140      	movs	r1, #64	; 0x40
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fe78 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e005      	b.n	8006694 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e000      	b.n	8006694 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006692:	2302      	movs	r3, #2
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	f040 80bf 	bne.w	8006834 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <HAL_UART_Receive+0x26>
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e0b7      	b.n	8006836 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_UART_Receive+0x38>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e0b0      	b.n	8006836 <HAL_UART_Receive+0x19a>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2222      	movs	r2, #34	; 0x22
 80066e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066f0:	f7fa ffde 	bl	80016b0 <HAL_GetTick>
 80066f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	88fa      	ldrh	r2, [r7, #6]
 80066fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	d10e      	bne.n	800672e <HAL_UART_Receive+0x92>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <HAL_UART_Receive+0x88>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800671e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006722:	e02d      	b.n	8006780 <HAL_UART_Receive+0xe4>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	22ff      	movs	r2, #255	; 0xff
 8006728:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800672c:	e028      	b.n	8006780 <HAL_UART_Receive+0xe4>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10d      	bne.n	8006752 <HAL_UART_Receive+0xb6>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <HAL_UART_Receive+0xac>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006746:	e01b      	b.n	8006780 <HAL_UART_Receive+0xe4>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	227f      	movs	r2, #127	; 0x7f
 800674c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006750:	e016      	b.n	8006780 <HAL_UART_Receive+0xe4>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800675a:	d10d      	bne.n	8006778 <HAL_UART_Receive+0xdc>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_UART_Receive+0xd2>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	227f      	movs	r2, #127	; 0x7f
 8006768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800676c:	e008      	b.n	8006780 <HAL_UART_Receive+0xe4>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	223f      	movs	r2, #63	; 0x3f
 8006772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006776:	e003      	b.n	8006780 <HAL_UART_Receive+0xe4>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006786:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006790:	d108      	bne.n	80067a4 <HAL_UART_Receive+0x108>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e003      	b.n	80067ac <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80067b4:	e033      	b.n	800681e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	2120      	movs	r1, #32
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fdd4 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e032      	b.n	8006836 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10c      	bne.n	80067f0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067dc:	b29a      	uxth	r2, r3
 80067de:	8a7b      	ldrh	r3, [r7, #18]
 80067e0:	4013      	ands	r3, r2
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	3302      	adds	r3, #2
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	e00d      	b.n	800680c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	8a7b      	ldrh	r3, [r7, #18]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	4013      	ands	r3, r2
 8006800:	b2da      	uxtb	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3301      	adds	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1c5      	bne.n	80067b6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	e000      	b.n	8006836 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006834:	2302      	movs	r3, #2
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	f640 030f 	movw	r3, #2063	; 0x80f
 8006866:	4013      	ands	r3, r2
 8006868:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d113      	bne.n	8006898 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 81ce 	beq.w	8006c2a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
      }
      return;
 8006896:	e1c8      	b.n	8006c2a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80e3 	beq.w	8006a66 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	4ba6      	ldr	r3, [pc, #664]	; (8006b48 <HAL_UART_IRQHandler+0x308>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80d8 	beq.w	8006a66 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d010      	beq.n	80068e2 <HAL_UART_IRQHandler+0xa2>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2201      	movs	r2, #1
 80068d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d8:	f043 0201 	orr.w	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d010      	beq.n	800690e <HAL_UART_IRQHandler+0xce>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2202      	movs	r2, #2
 80068fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	f043 0204 	orr.w	r2, r3, #4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d010      	beq.n	800693a <HAL_UART_IRQHandler+0xfa>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2204      	movs	r2, #4
 8006928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006930:	f043 0202 	orr.w	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2208      	movs	r2, #8
 800695e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006966:	f043 0208 	orr.w	r2, r3, #8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006976:	2b00      	cmp	r3, #0
 8006978:	d011      	beq.n	800699e <HAL_UART_IRQHandler+0x15e>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00c      	beq.n	800699e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800698c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8142 	beq.w	8006c2e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00c      	beq.n	80069ce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d004      	beq.n	80069ee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d031      	beq.n	8006a52 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fd39 	bl	8007466 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d123      	bne.n	8006a4a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a4b      	ldr	r2, [pc, #300]	; (8006b4c <HAL_UART_IRQHandler+0x30c>)
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fc f9c3 	bl	8002db2 <HAL_DMA_Abort_IT>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d017      	beq.n	8006a62 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	e00f      	b.n	8006a62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f908 	bl	8006c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	e00b      	b.n	8006a62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f904 	bl	8006c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e007      	b.n	8006a62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f900 	bl	8006c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006a60:	e0e5      	b.n	8006c2e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a62:	bf00      	nop
    return;
 8006a64:	e0e3      	b.n	8006c2e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	f040 80a9 	bne.w	8006bc2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 80a3 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 809d 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d158      	bne.n	8006b50 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006aa8:	893b      	ldrh	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80c1 	beq.w	8006c32 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ab6:	893a      	ldrh	r2, [r7, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	f080 80ba 	bcs.w	8006c32 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	893a      	ldrh	r2, [r7, #8]
 8006ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d12a      	bne.n	8006b2c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ae4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b04:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0210 	bic.w	r2, r2, #16
 8006b20:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fc f905 	bl	8002d36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f893 	bl	8006c6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006b46:	e074      	b.n	8006c32 <HAL_UART_IRQHandler+0x3f2>
 8006b48:	04000120 	.word	0x04000120
 8006b4c:	080074c5 	.word	0x080074c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d063      	beq.n	8006c36 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8006b6e:	897b      	ldrh	r3, [r7, #10]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d060      	beq.n	8006c36 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b82:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0210 	bic.w	r2, r2, #16
 8006bb4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bb6:	897b      	ldrh	r3, [r7, #10]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f856 	bl	8006c6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006bc0:	e039      	b.n	8006c36 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <HAL_UART_IRQHandler+0x3a8>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d008      	beq.n	8006be8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc9e 	bl	8007522 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006be6:	e029      	b.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01a      	beq.n	8006c3a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
    }
    return;
 8006c0c:	e015      	b.n	8006c3a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d011      	beq.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00c      	beq.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fc64 	bl	80074f0 <UART_EndTransmit_IT>
    return;
 8006c28:	e008      	b.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006c2a:	bf00      	nop
 8006c2c:	e006      	b.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
    return;
 8006c2e:	bf00      	nop
 8006c30:	e004      	b.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_UART_IRQHandler+0x3fc>
    return;
 8006c3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop

08006c44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c84:	b5b0      	push	{r4, r5, r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4bad      	ldr	r3, [pc, #692]	; (8006f64 <UART_SetConfig+0x2e0>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	69f9      	ldr	r1, [r7, #28]
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4aa2      	ldr	r2, [pc, #648]	; (8006f68 <UART_SetConfig+0x2e4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a99      	ldr	r2, [pc, #612]	; (8006f6c <UART_SetConfig+0x2e8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d121      	bne.n	8006d4e <UART_SetConfig+0xca>
 8006d0a:	4b99      	ldr	r3, [pc, #612]	; (8006f70 <UART_SetConfig+0x2ec>)
 8006d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d817      	bhi.n	8006d48 <UART_SetConfig+0xc4>
 8006d18:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <UART_SetConfig+0x9c>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d31 	.word	0x08006d31
 8006d24:	08006d3d 	.word	0x08006d3d
 8006d28:	08006d37 	.word	0x08006d37
 8006d2c:	08006d43 	.word	0x08006d43
 8006d30:	2301      	movs	r3, #1
 8006d32:	76fb      	strb	r3, [r7, #27]
 8006d34:	e0e7      	b.n	8006f06 <UART_SetConfig+0x282>
 8006d36:	2302      	movs	r3, #2
 8006d38:	76fb      	strb	r3, [r7, #27]
 8006d3a:	e0e4      	b.n	8006f06 <UART_SetConfig+0x282>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	76fb      	strb	r3, [r7, #27]
 8006d40:	e0e1      	b.n	8006f06 <UART_SetConfig+0x282>
 8006d42:	2308      	movs	r3, #8
 8006d44:	76fb      	strb	r3, [r7, #27]
 8006d46:	e0de      	b.n	8006f06 <UART_SetConfig+0x282>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	76fb      	strb	r3, [r7, #27]
 8006d4c:	e0db      	b.n	8006f06 <UART_SetConfig+0x282>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a88      	ldr	r2, [pc, #544]	; (8006f74 <UART_SetConfig+0x2f0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d132      	bne.n	8006dbe <UART_SetConfig+0x13a>
 8006d58:	4b85      	ldr	r3, [pc, #532]	; (8006f70 <UART_SetConfig+0x2ec>)
 8006d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b0c      	cmp	r3, #12
 8006d64:	d828      	bhi.n	8006db8 <UART_SetConfig+0x134>
 8006d66:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <UART_SetConfig+0xe8>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006da1 	.word	0x08006da1
 8006d70:	08006db9 	.word	0x08006db9
 8006d74:	08006db9 	.word	0x08006db9
 8006d78:	08006db9 	.word	0x08006db9
 8006d7c:	08006dad 	.word	0x08006dad
 8006d80:	08006db9 	.word	0x08006db9
 8006d84:	08006db9 	.word	0x08006db9
 8006d88:	08006db9 	.word	0x08006db9
 8006d8c:	08006da7 	.word	0x08006da7
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006db9 	.word	0x08006db9
 8006d9c:	08006db3 	.word	0x08006db3
 8006da0:	2300      	movs	r3, #0
 8006da2:	76fb      	strb	r3, [r7, #27]
 8006da4:	e0af      	b.n	8006f06 <UART_SetConfig+0x282>
 8006da6:	2302      	movs	r3, #2
 8006da8:	76fb      	strb	r3, [r7, #27]
 8006daa:	e0ac      	b.n	8006f06 <UART_SetConfig+0x282>
 8006dac:	2304      	movs	r3, #4
 8006dae:	76fb      	strb	r3, [r7, #27]
 8006db0:	e0a9      	b.n	8006f06 <UART_SetConfig+0x282>
 8006db2:	2308      	movs	r3, #8
 8006db4:	76fb      	strb	r3, [r7, #27]
 8006db6:	e0a6      	b.n	8006f06 <UART_SetConfig+0x282>
 8006db8:	2310      	movs	r3, #16
 8006dba:	76fb      	strb	r3, [r7, #27]
 8006dbc:	e0a3      	b.n	8006f06 <UART_SetConfig+0x282>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a6d      	ldr	r2, [pc, #436]	; (8006f78 <UART_SetConfig+0x2f4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d120      	bne.n	8006e0a <UART_SetConfig+0x186>
 8006dc8:	4b69      	ldr	r3, [pc, #420]	; (8006f70 <UART_SetConfig+0x2ec>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dd2:	2b30      	cmp	r3, #48	; 0x30
 8006dd4:	d013      	beq.n	8006dfe <UART_SetConfig+0x17a>
 8006dd6:	2b30      	cmp	r3, #48	; 0x30
 8006dd8:	d814      	bhi.n	8006e04 <UART_SetConfig+0x180>
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d009      	beq.n	8006df2 <UART_SetConfig+0x16e>
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d810      	bhi.n	8006e04 <UART_SetConfig+0x180>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <UART_SetConfig+0x168>
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	d006      	beq.n	8006df8 <UART_SetConfig+0x174>
 8006dea:	e00b      	b.n	8006e04 <UART_SetConfig+0x180>
 8006dec:	2300      	movs	r3, #0
 8006dee:	76fb      	strb	r3, [r7, #27]
 8006df0:	e089      	b.n	8006f06 <UART_SetConfig+0x282>
 8006df2:	2302      	movs	r3, #2
 8006df4:	76fb      	strb	r3, [r7, #27]
 8006df6:	e086      	b.n	8006f06 <UART_SetConfig+0x282>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	76fb      	strb	r3, [r7, #27]
 8006dfc:	e083      	b.n	8006f06 <UART_SetConfig+0x282>
 8006dfe:	2308      	movs	r3, #8
 8006e00:	76fb      	strb	r3, [r7, #27]
 8006e02:	e080      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e04:	2310      	movs	r3, #16
 8006e06:	76fb      	strb	r3, [r7, #27]
 8006e08:	e07d      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a5b      	ldr	r2, [pc, #364]	; (8006f7c <UART_SetConfig+0x2f8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d120      	bne.n	8006e56 <UART_SetConfig+0x1d2>
 8006e14:	4b56      	ldr	r3, [pc, #344]	; (8006f70 <UART_SetConfig+0x2ec>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e20:	d013      	beq.n	8006e4a <UART_SetConfig+0x1c6>
 8006e22:	2bc0      	cmp	r3, #192	; 0xc0
 8006e24:	d814      	bhi.n	8006e50 <UART_SetConfig+0x1cc>
 8006e26:	2b80      	cmp	r3, #128	; 0x80
 8006e28:	d009      	beq.n	8006e3e <UART_SetConfig+0x1ba>
 8006e2a:	2b80      	cmp	r3, #128	; 0x80
 8006e2c:	d810      	bhi.n	8006e50 <UART_SetConfig+0x1cc>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <UART_SetConfig+0x1b4>
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d006      	beq.n	8006e44 <UART_SetConfig+0x1c0>
 8006e36:	e00b      	b.n	8006e50 <UART_SetConfig+0x1cc>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	76fb      	strb	r3, [r7, #27]
 8006e3c:	e063      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	76fb      	strb	r3, [r7, #27]
 8006e42:	e060      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e44:	2304      	movs	r3, #4
 8006e46:	76fb      	strb	r3, [r7, #27]
 8006e48:	e05d      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	76fb      	strb	r3, [r7, #27]
 8006e4e:	e05a      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e50:	2310      	movs	r3, #16
 8006e52:	76fb      	strb	r3, [r7, #27]
 8006e54:	e057      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a49      	ldr	r2, [pc, #292]	; (8006f80 <UART_SetConfig+0x2fc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d125      	bne.n	8006eac <UART_SetConfig+0x228>
 8006e60:	4b43      	ldr	r3, [pc, #268]	; (8006f70 <UART_SetConfig+0x2ec>)
 8006e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e6e:	d017      	beq.n	8006ea0 <UART_SetConfig+0x21c>
 8006e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e74:	d817      	bhi.n	8006ea6 <UART_SetConfig+0x222>
 8006e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e7a:	d00b      	beq.n	8006e94 <UART_SetConfig+0x210>
 8006e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e80:	d811      	bhi.n	8006ea6 <UART_SetConfig+0x222>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <UART_SetConfig+0x20a>
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d006      	beq.n	8006e9a <UART_SetConfig+0x216>
 8006e8c:	e00b      	b.n	8006ea6 <UART_SetConfig+0x222>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	76fb      	strb	r3, [r7, #27]
 8006e92:	e038      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e94:	2302      	movs	r3, #2
 8006e96:	76fb      	strb	r3, [r7, #27]
 8006e98:	e035      	b.n	8006f06 <UART_SetConfig+0x282>
 8006e9a:	2304      	movs	r3, #4
 8006e9c:	76fb      	strb	r3, [r7, #27]
 8006e9e:	e032      	b.n	8006f06 <UART_SetConfig+0x282>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	76fb      	strb	r3, [r7, #27]
 8006ea4:	e02f      	b.n	8006f06 <UART_SetConfig+0x282>
 8006ea6:	2310      	movs	r3, #16
 8006ea8:	76fb      	strb	r3, [r7, #27]
 8006eaa:	e02c      	b.n	8006f06 <UART_SetConfig+0x282>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2d      	ldr	r2, [pc, #180]	; (8006f68 <UART_SetConfig+0x2e4>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d125      	bne.n	8006f02 <UART_SetConfig+0x27e>
 8006eb6:	4b2e      	ldr	r3, [pc, #184]	; (8006f70 <UART_SetConfig+0x2ec>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ebc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ec0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ec4:	d017      	beq.n	8006ef6 <UART_SetConfig+0x272>
 8006ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eca:	d817      	bhi.n	8006efc <UART_SetConfig+0x278>
 8006ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed0:	d00b      	beq.n	8006eea <UART_SetConfig+0x266>
 8006ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed6:	d811      	bhi.n	8006efc <UART_SetConfig+0x278>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <UART_SetConfig+0x260>
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee0:	d006      	beq.n	8006ef0 <UART_SetConfig+0x26c>
 8006ee2:	e00b      	b.n	8006efc <UART_SetConfig+0x278>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	76fb      	strb	r3, [r7, #27]
 8006ee8:	e00d      	b.n	8006f06 <UART_SetConfig+0x282>
 8006eea:	2302      	movs	r3, #2
 8006eec:	76fb      	strb	r3, [r7, #27]
 8006eee:	e00a      	b.n	8006f06 <UART_SetConfig+0x282>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	76fb      	strb	r3, [r7, #27]
 8006ef4:	e007      	b.n	8006f06 <UART_SetConfig+0x282>
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	76fb      	strb	r3, [r7, #27]
 8006efa:	e004      	b.n	8006f06 <UART_SetConfig+0x282>
 8006efc:	2310      	movs	r3, #16
 8006efe:	76fb      	strb	r3, [r7, #27]
 8006f00:	e001      	b.n	8006f06 <UART_SetConfig+0x282>
 8006f02:	2310      	movs	r3, #16
 8006f04:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <UART_SetConfig+0x2e4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	f040 8087 	bne.w	8007020 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f12:	7efb      	ldrb	r3, [r7, #27]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d837      	bhi.n	8006f88 <UART_SetConfig+0x304>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <UART_SetConfig+0x29c>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f89 	.word	0x08006f89
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f89 	.word	0x08006f89
 8006f30:	08006f53 	.word	0x08006f53
 8006f34:	08006f89 	.word	0x08006f89
 8006f38:	08006f89 	.word	0x08006f89
 8006f3c:	08006f89 	.word	0x08006f89
 8006f40:	08006f5b 	.word	0x08006f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f44:	f7fd f822 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8006f48:	6178      	str	r0, [r7, #20]
        break;
 8006f4a:	e022      	b.n	8006f92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <UART_SetConfig+0x300>)
 8006f4e:	617b      	str	r3, [r7, #20]
        break;
 8006f50:	e01f      	b.n	8006f92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f52:	f7fc ff83 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8006f56:	6178      	str	r0, [r7, #20]
        break;
 8006f58:	e01b      	b.n	8006f92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f5e:	617b      	str	r3, [r7, #20]
        break;
 8006f60:	e017      	b.n	8006f92 <UART_SetConfig+0x30e>
 8006f62:	bf00      	nop
 8006f64:	efff69f3 	.word	0xefff69f3
 8006f68:	40008000 	.word	0x40008000
 8006f6c:	40013800 	.word	0x40013800
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40004400 	.word	0x40004400
 8006f78:	40004800 	.word	0x40004800
 8006f7c:	40004c00 	.word	0x40004c00
 8006f80:	40005000 	.word	0x40005000
 8006f84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	76bb      	strb	r3, [r7, #26]
        break;
 8006f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80f1 	beq.w	800717c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4413      	add	r3, r2
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d305      	bcc.n	8006fb6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d902      	bls.n	8006fbc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	76bb      	strb	r3, [r7, #26]
 8006fba:	e0df      	b.n	800717c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f04f 0100 	mov.w	r1, #0
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	020b      	lsls	r3, r1, #8
 8006fce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fd2:	0202      	lsls	r2, r0, #8
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	6849      	ldr	r1, [r1, #4]
 8006fd8:	0849      	lsrs	r1, r1, #1
 8006fda:	4608      	mov	r0, r1
 8006fdc:	f04f 0100 	mov.w	r1, #0
 8006fe0:	1814      	adds	r4, r2, r0
 8006fe2:	eb43 0501 	adc.w	r5, r3, r1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	f7f9 f944 	bl	8000280 <__aeabi_uldivmod>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007006:	d308      	bcc.n	800701a <UART_SetConfig+0x396>
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800700e:	d204      	bcs.n	800701a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	60da      	str	r2, [r3, #12]
 8007018:	e0b0      	b.n	800717c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	76bb      	strb	r3, [r7, #26]
 800701e:	e0ad      	b.n	800717c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007028:	d15c      	bne.n	80070e4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800702a:	7efb      	ldrb	r3, [r7, #27]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d828      	bhi.n	8007082 <UART_SetConfig+0x3fe>
 8007030:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <UART_SetConfig+0x3b4>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	0800705d 	.word	0x0800705d
 800703c:	08007065 	.word	0x08007065
 8007040:	0800706d 	.word	0x0800706d
 8007044:	08007083 	.word	0x08007083
 8007048:	08007073 	.word	0x08007073
 800704c:	08007083 	.word	0x08007083
 8007050:	08007083 	.word	0x08007083
 8007054:	08007083 	.word	0x08007083
 8007058:	0800707b 	.word	0x0800707b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800705c:	f7fc ff96 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8007060:	6178      	str	r0, [r7, #20]
        break;
 8007062:	e013      	b.n	800708c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007064:	f7fc ffa8 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8007068:	6178      	str	r0, [r7, #20]
        break;
 800706a:	e00f      	b.n	800708c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800706c:	4b49      	ldr	r3, [pc, #292]	; (8007194 <UART_SetConfig+0x510>)
 800706e:	617b      	str	r3, [r7, #20]
        break;
 8007070:	e00c      	b.n	800708c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007072:	f7fc fef3 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8007076:	6178      	str	r0, [r7, #20]
        break;
 8007078:	e008      	b.n	800708c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800707e:	617b      	str	r3, [r7, #20]
        break;
 8007080:	e004      	b.n	800708c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	76bb      	strb	r3, [r7, #26]
        break;
 800708a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d074      	beq.n	800717c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	005a      	lsls	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	441a      	add	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b0f      	cmp	r3, #15
 80070ae:	d916      	bls.n	80070de <UART_SetConfig+0x45a>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b6:	d212      	bcs.n	80070de <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f023 030f 	bic.w	r3, r3, #15
 80070c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	89fb      	ldrh	r3, [r7, #14]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	89fa      	ldrh	r2, [r7, #14]
 80070da:	60da      	str	r2, [r3, #12]
 80070dc:	e04e      	b.n	800717c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	76bb      	strb	r3, [r7, #26]
 80070e2:	e04b      	b.n	800717c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070e4:	7efb      	ldrb	r3, [r7, #27]
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d827      	bhi.n	800713a <UART_SetConfig+0x4b6>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <UART_SetConfig+0x46c>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007115 	.word	0x08007115
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007125 	.word	0x08007125
 80070fc:	0800713b 	.word	0x0800713b
 8007100:	0800712b 	.word	0x0800712b
 8007104:	0800713b 	.word	0x0800713b
 8007108:	0800713b 	.word	0x0800713b
 800710c:	0800713b 	.word	0x0800713b
 8007110:	08007133 	.word	0x08007133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007114:	f7fc ff3a 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8007118:	6178      	str	r0, [r7, #20]
        break;
 800711a:	e013      	b.n	8007144 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800711c:	f7fc ff4c 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8007120:	6178      	str	r0, [r7, #20]
        break;
 8007122:	e00f      	b.n	8007144 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007124:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <UART_SetConfig+0x510>)
 8007126:	617b      	str	r3, [r7, #20]
        break;
 8007128:	e00c      	b.n	8007144 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800712a:	f7fc fe97 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 800712e:	6178      	str	r0, [r7, #20]
        break;
 8007130:	e008      	b.n	8007144 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007136:	617b      	str	r3, [r7, #20]
        break;
 8007138:	e004      	b.n	8007144 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	76bb      	strb	r3, [r7, #26]
        break;
 8007142:	bf00      	nop
    }

    if (pclk != 0U)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d018      	beq.n	800717c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	085a      	lsrs	r2, r3, #1
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	441a      	add	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	b29b      	uxth	r3, r3
 800715e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b0f      	cmp	r3, #15
 8007164:	d908      	bls.n	8007178 <UART_SetConfig+0x4f4>
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716c:	d204      	bcs.n	8007178 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	60da      	str	r2, [r3, #12]
 8007176:	e001      	b.n	800717c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007188:	7ebb      	ldrb	r3, [r7, #26]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bdb0      	pop	{r4, r5, r7, pc}
 8007192:	bf00      	nop
 8007194:	00f42400 	.word	0x00f42400

08007198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01a      	beq.n	80072ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007296:	d10a      	bne.n	80072ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072ec:	f7fa f9e0 	bl	80016b0 <HAL_GetTick>
 80072f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d10e      	bne.n	800731e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f82d 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e023      	b.n	8007366 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b04      	cmp	r3, #4
 800732a:	d10e      	bne.n	800734a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f817 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e00d      	b.n	8007366 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737e:	e05e      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007386:	d05a      	beq.n	800743e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007388:	f7fa f992 	bl	80016b0 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	429a      	cmp	r2, r3
 8007396:	d302      	bcc.n	800739e <UART_WaitOnFlagUntilTimeout+0x30>
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d11b      	bne.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e043      	b.n	800745e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d02c      	beq.n	800743e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f2:	d124      	bne.n	800743e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073fc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800740c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e00f      	b.n	800745e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	bf0c      	ite	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	2300      	movne	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	429a      	cmp	r2, r3
 800745a:	d091      	beq.n	8007380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800747c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007492:	2b01      	cmp	r3, #1
 8007494:	d107      	bne.n	80074a6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0210 	bic.w	r2, r2, #16
 80074a4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff fbb8 	bl	8006c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007506:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2220      	movs	r2, #32
 800750c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff fb95 	bl	8006c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <__errno>:
 8007538:	4b01      	ldr	r3, [pc, #4]	; (8007540 <__errno+0x8>)
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	2000000c 	.word	0x2000000c

08007544 <__libc_init_array>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	4d0d      	ldr	r5, [pc, #52]	; (800757c <__libc_init_array+0x38>)
 8007548:	4c0d      	ldr	r4, [pc, #52]	; (8007580 <__libc_init_array+0x3c>)
 800754a:	1b64      	subs	r4, r4, r5
 800754c:	10a4      	asrs	r4, r4, #2
 800754e:	2600      	movs	r6, #0
 8007550:	42a6      	cmp	r6, r4
 8007552:	d109      	bne.n	8007568 <__libc_init_array+0x24>
 8007554:	4d0b      	ldr	r5, [pc, #44]	; (8007584 <__libc_init_array+0x40>)
 8007556:	4c0c      	ldr	r4, [pc, #48]	; (8007588 <__libc_init_array+0x44>)
 8007558:	f001 f912 	bl	8008780 <_init>
 800755c:	1b64      	subs	r4, r4, r5
 800755e:	10a4      	asrs	r4, r4, #2
 8007560:	2600      	movs	r6, #0
 8007562:	42a6      	cmp	r6, r4
 8007564:	d105      	bne.n	8007572 <__libc_init_array+0x2e>
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	f855 3b04 	ldr.w	r3, [r5], #4
 800756c:	4798      	blx	r3
 800756e:	3601      	adds	r6, #1
 8007570:	e7ee      	b.n	8007550 <__libc_init_array+0xc>
 8007572:	f855 3b04 	ldr.w	r3, [r5], #4
 8007576:	4798      	blx	r3
 8007578:	3601      	adds	r6, #1
 800757a:	e7f2      	b.n	8007562 <__libc_init_array+0x1e>
 800757c:	08008a10 	.word	0x08008a10
 8007580:	08008a10 	.word	0x08008a10
 8007584:	08008a10 	.word	0x08008a10
 8007588:	08008a14 	.word	0x08008a14

0800758c <memset>:
 800758c:	4402      	add	r2, r0
 800758e:	4603      	mov	r3, r0
 8007590:	4293      	cmp	r3, r2
 8007592:	d100      	bne.n	8007596 <memset+0xa>
 8007594:	4770      	bx	lr
 8007596:	f803 1b01 	strb.w	r1, [r3], #1
 800759a:	e7f9      	b.n	8007590 <memset+0x4>

0800759c <siprintf>:
 800759c:	b40e      	push	{r1, r2, r3}
 800759e:	b500      	push	{lr}
 80075a0:	b09c      	sub	sp, #112	; 0x70
 80075a2:	ab1d      	add	r3, sp, #116	; 0x74
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	9006      	str	r0, [sp, #24]
 80075a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075ac:	4809      	ldr	r0, [pc, #36]	; (80075d4 <siprintf+0x38>)
 80075ae:	9107      	str	r1, [sp, #28]
 80075b0:	9104      	str	r1, [sp, #16]
 80075b2:	4909      	ldr	r1, [pc, #36]	; (80075d8 <siprintf+0x3c>)
 80075b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b8:	9105      	str	r1, [sp, #20]
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	a902      	add	r1, sp, #8
 80075c0:	f000 f896 	bl	80076f0 <_svfiprintf_r>
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	b01c      	add	sp, #112	; 0x70
 80075cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d0:	b003      	add	sp, #12
 80075d2:	4770      	bx	lr
 80075d4:	2000000c 	.word	0x2000000c
 80075d8:	ffff0208 	.word	0xffff0208

080075dc <siscanf>:
 80075dc:	b40e      	push	{r1, r2, r3}
 80075de:	b510      	push	{r4, lr}
 80075e0:	b09f      	sub	sp, #124	; 0x7c
 80075e2:	ac21      	add	r4, sp, #132	; 0x84
 80075e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80075e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80075ec:	9201      	str	r2, [sp, #4]
 80075ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80075f2:	9004      	str	r0, [sp, #16]
 80075f4:	9008      	str	r0, [sp, #32]
 80075f6:	f7f8 fdeb 	bl	80001d0 <strlen>
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <siscanf+0x50>)
 80075fc:	9005      	str	r0, [sp, #20]
 80075fe:	9009      	str	r0, [sp, #36]	; 0x24
 8007600:	930d      	str	r3, [sp, #52]	; 0x34
 8007602:	480b      	ldr	r0, [pc, #44]	; (8007630 <siscanf+0x54>)
 8007604:	9a01      	ldr	r2, [sp, #4]
 8007606:	6800      	ldr	r0, [r0, #0]
 8007608:	9403      	str	r4, [sp, #12]
 800760a:	2300      	movs	r3, #0
 800760c:	9311      	str	r3, [sp, #68]	; 0x44
 800760e:	9316      	str	r3, [sp, #88]	; 0x58
 8007610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007614:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007618:	a904      	add	r1, sp, #16
 800761a:	4623      	mov	r3, r4
 800761c:	f000 f9c2 	bl	80079a4 <__ssvfiscanf_r>
 8007620:	b01f      	add	sp, #124	; 0x7c
 8007622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007626:	b003      	add	sp, #12
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	08007635 	.word	0x08007635
 8007630:	2000000c 	.word	0x2000000c

08007634 <__seofread>:
 8007634:	2000      	movs	r0, #0
 8007636:	4770      	bx	lr

08007638 <__ssputs_r>:
 8007638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	688e      	ldr	r6, [r1, #8]
 800763e:	429e      	cmp	r6, r3
 8007640:	4682      	mov	sl, r0
 8007642:	460c      	mov	r4, r1
 8007644:	4690      	mov	r8, r2
 8007646:	461f      	mov	r7, r3
 8007648:	d838      	bhi.n	80076bc <__ssputs_r+0x84>
 800764a:	898a      	ldrh	r2, [r1, #12]
 800764c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007650:	d032      	beq.n	80076b8 <__ssputs_r+0x80>
 8007652:	6825      	ldr	r5, [r4, #0]
 8007654:	6909      	ldr	r1, [r1, #16]
 8007656:	eba5 0901 	sub.w	r9, r5, r1
 800765a:	6965      	ldr	r5, [r4, #20]
 800765c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007664:	3301      	adds	r3, #1
 8007666:	444b      	add	r3, r9
 8007668:	106d      	asrs	r5, r5, #1
 800766a:	429d      	cmp	r5, r3
 800766c:	bf38      	it	cc
 800766e:	461d      	movcc	r5, r3
 8007670:	0553      	lsls	r3, r2, #21
 8007672:	d531      	bpl.n	80076d8 <__ssputs_r+0xa0>
 8007674:	4629      	mov	r1, r5
 8007676:	f000 ffdf 	bl	8008638 <_malloc_r>
 800767a:	4606      	mov	r6, r0
 800767c:	b950      	cbnz	r0, 8007694 <__ssputs_r+0x5c>
 800767e:	230c      	movs	r3, #12
 8007680:	f8ca 3000 	str.w	r3, [sl]
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007694:	6921      	ldr	r1, [r4, #16]
 8007696:	464a      	mov	r2, r9
 8007698:	f000 ff56 	bl	8008548 <memcpy>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	6126      	str	r6, [r4, #16]
 80076aa:	6165      	str	r5, [r4, #20]
 80076ac:	444e      	add	r6, r9
 80076ae:	eba5 0509 	sub.w	r5, r5, r9
 80076b2:	6026      	str	r6, [r4, #0]
 80076b4:	60a5      	str	r5, [r4, #8]
 80076b6:	463e      	mov	r6, r7
 80076b8:	42be      	cmp	r6, r7
 80076ba:	d900      	bls.n	80076be <__ssputs_r+0x86>
 80076bc:	463e      	mov	r6, r7
 80076be:	4632      	mov	r2, r6
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	4641      	mov	r1, r8
 80076c4:	f000 ff4e 	bl	8008564 <memmove>
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	1b9b      	subs	r3, r3, r6
 80076ce:	4432      	add	r2, r6
 80076d0:	60a3      	str	r3, [r4, #8]
 80076d2:	6022      	str	r2, [r4, #0]
 80076d4:	2000      	movs	r0, #0
 80076d6:	e7db      	b.n	8007690 <__ssputs_r+0x58>
 80076d8:	462a      	mov	r2, r5
 80076da:	f001 f807 	bl	80086ec <_realloc_r>
 80076de:	4606      	mov	r6, r0
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d1e1      	bne.n	80076a8 <__ssputs_r+0x70>
 80076e4:	6921      	ldr	r1, [r4, #16]
 80076e6:	4650      	mov	r0, sl
 80076e8:	f000 ff56 	bl	8008598 <_free_r>
 80076ec:	e7c7      	b.n	800767e <__ssputs_r+0x46>
	...

080076f0 <_svfiprintf_r>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	4698      	mov	r8, r3
 80076f6:	898b      	ldrh	r3, [r1, #12]
 80076f8:	061b      	lsls	r3, r3, #24
 80076fa:	b09d      	sub	sp, #116	; 0x74
 80076fc:	4607      	mov	r7, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	4614      	mov	r4, r2
 8007702:	d50e      	bpl.n	8007722 <_svfiprintf_r+0x32>
 8007704:	690b      	ldr	r3, [r1, #16]
 8007706:	b963      	cbnz	r3, 8007722 <_svfiprintf_r+0x32>
 8007708:	2140      	movs	r1, #64	; 0x40
 800770a:	f000 ff95 	bl	8008638 <_malloc_r>
 800770e:	6028      	str	r0, [r5, #0]
 8007710:	6128      	str	r0, [r5, #16]
 8007712:	b920      	cbnz	r0, 800771e <_svfiprintf_r+0x2e>
 8007714:	230c      	movs	r3, #12
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800771c:	e0d1      	b.n	80078c2 <_svfiprintf_r+0x1d2>
 800771e:	2340      	movs	r3, #64	; 0x40
 8007720:	616b      	str	r3, [r5, #20]
 8007722:	2300      	movs	r3, #0
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	2320      	movs	r3, #32
 8007728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800772c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007730:	2330      	movs	r3, #48	; 0x30
 8007732:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078dc <_svfiprintf_r+0x1ec>
 8007736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800773a:	f04f 0901 	mov.w	r9, #1
 800773e:	4623      	mov	r3, r4
 8007740:	469a      	mov	sl, r3
 8007742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007746:	b10a      	cbz	r2, 800774c <_svfiprintf_r+0x5c>
 8007748:	2a25      	cmp	r2, #37	; 0x25
 800774a:	d1f9      	bne.n	8007740 <_svfiprintf_r+0x50>
 800774c:	ebba 0b04 	subs.w	fp, sl, r4
 8007750:	d00b      	beq.n	800776a <_svfiprintf_r+0x7a>
 8007752:	465b      	mov	r3, fp
 8007754:	4622      	mov	r2, r4
 8007756:	4629      	mov	r1, r5
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ff6d 	bl	8007638 <__ssputs_r>
 800775e:	3001      	adds	r0, #1
 8007760:	f000 80aa 	beq.w	80078b8 <_svfiprintf_r+0x1c8>
 8007764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007766:	445a      	add	r2, fp
 8007768:	9209      	str	r2, [sp, #36]	; 0x24
 800776a:	f89a 3000 	ldrb.w	r3, [sl]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80a2 	beq.w	80078b8 <_svfiprintf_r+0x1c8>
 8007774:	2300      	movs	r3, #0
 8007776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777e:	f10a 0a01 	add.w	sl, sl, #1
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	9307      	str	r3, [sp, #28]
 8007786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800778a:	931a      	str	r3, [sp, #104]	; 0x68
 800778c:	4654      	mov	r4, sl
 800778e:	2205      	movs	r2, #5
 8007790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007794:	4851      	ldr	r0, [pc, #324]	; (80078dc <_svfiprintf_r+0x1ec>)
 8007796:	f7f8 fd23 	bl	80001e0 <memchr>
 800779a:	9a04      	ldr	r2, [sp, #16]
 800779c:	b9d8      	cbnz	r0, 80077d6 <_svfiprintf_r+0xe6>
 800779e:	06d0      	lsls	r0, r2, #27
 80077a0:	bf44      	itt	mi
 80077a2:	2320      	movmi	r3, #32
 80077a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a8:	0711      	lsls	r1, r2, #28
 80077aa:	bf44      	itt	mi
 80077ac:	232b      	movmi	r3, #43	; 0x2b
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b2:	f89a 3000 	ldrb.w	r3, [sl]
 80077b6:	2b2a      	cmp	r3, #42	; 0x2a
 80077b8:	d015      	beq.n	80077e6 <_svfiprintf_r+0xf6>
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	4654      	mov	r4, sl
 80077be:	2000      	movs	r0, #0
 80077c0:	f04f 0c0a 	mov.w	ip, #10
 80077c4:	4621      	mov	r1, r4
 80077c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ca:	3b30      	subs	r3, #48	; 0x30
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d94e      	bls.n	800786e <_svfiprintf_r+0x17e>
 80077d0:	b1b0      	cbz	r0, 8007800 <_svfiprintf_r+0x110>
 80077d2:	9207      	str	r2, [sp, #28]
 80077d4:	e014      	b.n	8007800 <_svfiprintf_r+0x110>
 80077d6:	eba0 0308 	sub.w	r3, r0, r8
 80077da:	fa09 f303 	lsl.w	r3, r9, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	46a2      	mov	sl, r4
 80077e4:	e7d2      	b.n	800778c <_svfiprintf_r+0x9c>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9103      	str	r1, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfbb      	ittet	lt
 80077f2:	425b      	neglt	r3, r3
 80077f4:	f042 0202 	orrlt.w	r2, r2, #2
 80077f8:	9307      	strge	r3, [sp, #28]
 80077fa:	9307      	strlt	r3, [sp, #28]
 80077fc:	bfb8      	it	lt
 80077fe:	9204      	strlt	r2, [sp, #16]
 8007800:	7823      	ldrb	r3, [r4, #0]
 8007802:	2b2e      	cmp	r3, #46	; 0x2e
 8007804:	d10c      	bne.n	8007820 <_svfiprintf_r+0x130>
 8007806:	7863      	ldrb	r3, [r4, #1]
 8007808:	2b2a      	cmp	r3, #42	; 0x2a
 800780a:	d135      	bne.n	8007878 <_svfiprintf_r+0x188>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	1d1a      	adds	r2, r3, #4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	9203      	str	r2, [sp, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfb8      	it	lt
 8007818:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800781c:	3402      	adds	r4, #2
 800781e:	9305      	str	r3, [sp, #20]
 8007820:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078ec <_svfiprintf_r+0x1fc>
 8007824:	7821      	ldrb	r1, [r4, #0]
 8007826:	2203      	movs	r2, #3
 8007828:	4650      	mov	r0, sl
 800782a:	f7f8 fcd9 	bl	80001e0 <memchr>
 800782e:	b140      	cbz	r0, 8007842 <_svfiprintf_r+0x152>
 8007830:	2340      	movs	r3, #64	; 0x40
 8007832:	eba0 000a 	sub.w	r0, r0, sl
 8007836:	fa03 f000 	lsl.w	r0, r3, r0
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	4303      	orrs	r3, r0
 800783e:	3401      	adds	r4, #1
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007846:	4826      	ldr	r0, [pc, #152]	; (80078e0 <_svfiprintf_r+0x1f0>)
 8007848:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800784c:	2206      	movs	r2, #6
 800784e:	f7f8 fcc7 	bl	80001e0 <memchr>
 8007852:	2800      	cmp	r0, #0
 8007854:	d038      	beq.n	80078c8 <_svfiprintf_r+0x1d8>
 8007856:	4b23      	ldr	r3, [pc, #140]	; (80078e4 <_svfiprintf_r+0x1f4>)
 8007858:	bb1b      	cbnz	r3, 80078a2 <_svfiprintf_r+0x1b2>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	3307      	adds	r3, #7
 800785e:	f023 0307 	bic.w	r3, r3, #7
 8007862:	3308      	adds	r3, #8
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007868:	4433      	add	r3, r6
 800786a:	9309      	str	r3, [sp, #36]	; 0x24
 800786c:	e767      	b.n	800773e <_svfiprintf_r+0x4e>
 800786e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007872:	460c      	mov	r4, r1
 8007874:	2001      	movs	r0, #1
 8007876:	e7a5      	b.n	80077c4 <_svfiprintf_r+0xd4>
 8007878:	2300      	movs	r3, #0
 800787a:	3401      	adds	r4, #1
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	4619      	mov	r1, r3
 8007880:	f04f 0c0a 	mov.w	ip, #10
 8007884:	4620      	mov	r0, r4
 8007886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800788a:	3a30      	subs	r2, #48	; 0x30
 800788c:	2a09      	cmp	r2, #9
 800788e:	d903      	bls.n	8007898 <_svfiprintf_r+0x1a8>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0c5      	beq.n	8007820 <_svfiprintf_r+0x130>
 8007894:	9105      	str	r1, [sp, #20]
 8007896:	e7c3      	b.n	8007820 <_svfiprintf_r+0x130>
 8007898:	fb0c 2101 	mla	r1, ip, r1, r2
 800789c:	4604      	mov	r4, r0
 800789e:	2301      	movs	r3, #1
 80078a0:	e7f0      	b.n	8007884 <_svfiprintf_r+0x194>
 80078a2:	ab03      	add	r3, sp, #12
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	462a      	mov	r2, r5
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <_svfiprintf_r+0x1f8>)
 80078aa:	a904      	add	r1, sp, #16
 80078ac:	4638      	mov	r0, r7
 80078ae:	f3af 8000 	nop.w
 80078b2:	1c42      	adds	r2, r0, #1
 80078b4:	4606      	mov	r6, r0
 80078b6:	d1d6      	bne.n	8007866 <_svfiprintf_r+0x176>
 80078b8:	89ab      	ldrh	r3, [r5, #12]
 80078ba:	065b      	lsls	r3, r3, #25
 80078bc:	f53f af2c 	bmi.w	8007718 <_svfiprintf_r+0x28>
 80078c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c2:	b01d      	add	sp, #116	; 0x74
 80078c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c8:	ab03      	add	r3, sp, #12
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	462a      	mov	r2, r5
 80078ce:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <_svfiprintf_r+0x1f8>)
 80078d0:	a904      	add	r1, sp, #16
 80078d2:	4638      	mov	r0, r7
 80078d4:	f000 fa4c 	bl	8007d70 <_printf_i>
 80078d8:	e7eb      	b.n	80078b2 <_svfiprintf_r+0x1c2>
 80078da:	bf00      	nop
 80078dc:	08008858 	.word	0x08008858
 80078e0:	08008862 	.word	0x08008862
 80078e4:	00000000 	.word	0x00000000
 80078e8:	08007639 	.word	0x08007639
 80078ec:	0800885e 	.word	0x0800885e

080078f0 <_sungetc_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	1c4b      	adds	r3, r1, #1
 80078f4:	4614      	mov	r4, r2
 80078f6:	d103      	bne.n	8007900 <_sungetc_r+0x10>
 80078f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078fc:	4628      	mov	r0, r5
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	8993      	ldrh	r3, [r2, #12]
 8007902:	f023 0320 	bic.w	r3, r3, #32
 8007906:	8193      	strh	r3, [r2, #12]
 8007908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800790a:	6852      	ldr	r2, [r2, #4]
 800790c:	b2cd      	uxtb	r5, r1
 800790e:	b18b      	cbz	r3, 8007934 <_sungetc_r+0x44>
 8007910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007912:	4293      	cmp	r3, r2
 8007914:	dd08      	ble.n	8007928 <_sungetc_r+0x38>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	1e5a      	subs	r2, r3, #1
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007920:	6863      	ldr	r3, [r4, #4]
 8007922:	3301      	adds	r3, #1
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	e7e9      	b.n	80078fc <_sungetc_r+0xc>
 8007928:	4621      	mov	r1, r4
 800792a:	f000 fdd1 	bl	80084d0 <__submore>
 800792e:	2800      	cmp	r0, #0
 8007930:	d0f1      	beq.n	8007916 <_sungetc_r+0x26>
 8007932:	e7e1      	b.n	80078f8 <_sungetc_r+0x8>
 8007934:	6921      	ldr	r1, [r4, #16]
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	b151      	cbz	r1, 8007950 <_sungetc_r+0x60>
 800793a:	4299      	cmp	r1, r3
 800793c:	d208      	bcs.n	8007950 <_sungetc_r+0x60>
 800793e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007942:	42a9      	cmp	r1, r5
 8007944:	d104      	bne.n	8007950 <_sungetc_r+0x60>
 8007946:	3b01      	subs	r3, #1
 8007948:	3201      	adds	r2, #1
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	6062      	str	r2, [r4, #4]
 800794e:	e7d5      	b.n	80078fc <_sungetc_r+0xc>
 8007950:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007958:	6363      	str	r3, [r4, #52]	; 0x34
 800795a:	2303      	movs	r3, #3
 800795c:	63a3      	str	r3, [r4, #56]	; 0x38
 800795e:	4623      	mov	r3, r4
 8007960:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	2301      	movs	r3, #1
 8007968:	e7dc      	b.n	8007924 <_sungetc_r+0x34>

0800796a <__ssrefill_r>:
 800796a:	b510      	push	{r4, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007970:	b169      	cbz	r1, 800798e <__ssrefill_r+0x24>
 8007972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007976:	4299      	cmp	r1, r3
 8007978:	d001      	beq.n	800797e <__ssrefill_r+0x14>
 800797a:	f000 fe0d 	bl	8008598 <_free_r>
 800797e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	2000      	movs	r0, #0
 8007984:	6360      	str	r0, [r4, #52]	; 0x34
 8007986:	b113      	cbz	r3, 800798e <__ssrefill_r+0x24>
 8007988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	bd10      	pop	{r4, pc}
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	2300      	movs	r3, #0
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f043 0320 	orr.w	r3, r3, #32
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a2:	e7f3      	b.n	800798c <__ssrefill_r+0x22>

080079a4 <__ssvfiscanf_r>:
 80079a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	460c      	mov	r4, r1
 80079aa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80079ae:	2100      	movs	r1, #0
 80079b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80079b4:	49b2      	ldr	r1, [pc, #712]	; (8007c80 <__ssvfiscanf_r+0x2dc>)
 80079b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80079b8:	f10d 0804 	add.w	r8, sp, #4
 80079bc:	49b1      	ldr	r1, [pc, #708]	; (8007c84 <__ssvfiscanf_r+0x2e0>)
 80079be:	4fb2      	ldr	r7, [pc, #712]	; (8007c88 <__ssvfiscanf_r+0x2e4>)
 80079c0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8007c8c <__ssvfiscanf_r+0x2e8>
 80079c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80079c8:	4606      	mov	r6, r0
 80079ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	f892 a000 	ldrb.w	sl, [r2]
 80079d2:	f1ba 0f00 	cmp.w	sl, #0
 80079d6:	f000 8151 	beq.w	8007c7c <__ssvfiscanf_r+0x2d8>
 80079da:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80079de:	f013 0308 	ands.w	r3, r3, #8
 80079e2:	f102 0501 	add.w	r5, r2, #1
 80079e6:	d019      	beq.n	8007a1c <__ssvfiscanf_r+0x78>
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dd0f      	ble.n	8007a0e <__ssvfiscanf_r+0x6a>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	781a      	ldrb	r2, [r3, #0]
 80079f2:	5cba      	ldrb	r2, [r7, r2]
 80079f4:	0712      	lsls	r2, r2, #28
 80079f6:	d401      	bmi.n	80079fc <__ssvfiscanf_r+0x58>
 80079f8:	462a      	mov	r2, r5
 80079fa:	e7e8      	b.n	80079ce <__ssvfiscanf_r+0x2a>
 80079fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079fe:	3201      	adds	r2, #1
 8007a00:	9245      	str	r2, [sp, #276]	; 0x114
 8007a02:	6862      	ldr	r2, [r4, #4]
 8007a04:	3301      	adds	r3, #1
 8007a06:	3a01      	subs	r2, #1
 8007a08:	6062      	str	r2, [r4, #4]
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	e7ec      	b.n	80079e8 <__ssvfiscanf_r+0x44>
 8007a0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a10:	4621      	mov	r1, r4
 8007a12:	4630      	mov	r0, r6
 8007a14:	4798      	blx	r3
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d0e9      	beq.n	80079ee <__ssvfiscanf_r+0x4a>
 8007a1a:	e7ed      	b.n	80079f8 <__ssvfiscanf_r+0x54>
 8007a1c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8007a20:	f040 8083 	bne.w	8007b2a <__ssvfiscanf_r+0x186>
 8007a24:	9341      	str	r3, [sp, #260]	; 0x104
 8007a26:	9343      	str	r3, [sp, #268]	; 0x10c
 8007a28:	7853      	ldrb	r3, [r2, #1]
 8007a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2c:	bf02      	ittt	eq
 8007a2e:	2310      	moveq	r3, #16
 8007a30:	1c95      	addeq	r5, r2, #2
 8007a32:	9341      	streq	r3, [sp, #260]	; 0x104
 8007a34:	220a      	movs	r2, #10
 8007a36:	46ab      	mov	fp, r5
 8007a38:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007a3c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007a40:	2b09      	cmp	r3, #9
 8007a42:	d91d      	bls.n	8007a80 <__ssvfiscanf_r+0xdc>
 8007a44:	4891      	ldr	r0, [pc, #580]	; (8007c8c <__ssvfiscanf_r+0x2e8>)
 8007a46:	2203      	movs	r2, #3
 8007a48:	f7f8 fbca 	bl	80001e0 <memchr>
 8007a4c:	b140      	cbz	r0, 8007a60 <__ssvfiscanf_r+0xbc>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	eba0 0009 	sub.w	r0, r0, r9
 8007a54:	fa03 f000 	lsl.w	r0, r3, r0
 8007a58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007a5a:	4318      	orrs	r0, r3
 8007a5c:	9041      	str	r0, [sp, #260]	; 0x104
 8007a5e:	465d      	mov	r5, fp
 8007a60:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a64:	2b78      	cmp	r3, #120	; 0x78
 8007a66:	d806      	bhi.n	8007a76 <__ssvfiscanf_r+0xd2>
 8007a68:	2b57      	cmp	r3, #87	; 0x57
 8007a6a:	d810      	bhi.n	8007a8e <__ssvfiscanf_r+0xea>
 8007a6c:	2b25      	cmp	r3, #37	; 0x25
 8007a6e:	d05c      	beq.n	8007b2a <__ssvfiscanf_r+0x186>
 8007a70:	d856      	bhi.n	8007b20 <__ssvfiscanf_r+0x17c>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d074      	beq.n	8007b60 <__ssvfiscanf_r+0x1bc>
 8007a76:	2303      	movs	r3, #3
 8007a78:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a7a:	230a      	movs	r3, #10
 8007a7c:	9342      	str	r3, [sp, #264]	; 0x108
 8007a7e:	e081      	b.n	8007b84 <__ssvfiscanf_r+0x1e0>
 8007a80:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007a82:	fb02 1303 	mla	r3, r2, r3, r1
 8007a86:	3b30      	subs	r3, #48	; 0x30
 8007a88:	9343      	str	r3, [sp, #268]	; 0x10c
 8007a8a:	465d      	mov	r5, fp
 8007a8c:	e7d3      	b.n	8007a36 <__ssvfiscanf_r+0x92>
 8007a8e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007a92:	2a20      	cmp	r2, #32
 8007a94:	d8ef      	bhi.n	8007a76 <__ssvfiscanf_r+0xd2>
 8007a96:	a101      	add	r1, pc, #4	; (adr r1, 8007a9c <__ssvfiscanf_r+0xf8>)
 8007a98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a9c:	08007b6f 	.word	0x08007b6f
 8007aa0:	08007a77 	.word	0x08007a77
 8007aa4:	08007a77 	.word	0x08007a77
 8007aa8:	08007bcd 	.word	0x08007bcd
 8007aac:	08007a77 	.word	0x08007a77
 8007ab0:	08007a77 	.word	0x08007a77
 8007ab4:	08007a77 	.word	0x08007a77
 8007ab8:	08007a77 	.word	0x08007a77
 8007abc:	08007a77 	.word	0x08007a77
 8007ac0:	08007a77 	.word	0x08007a77
 8007ac4:	08007a77 	.word	0x08007a77
 8007ac8:	08007be3 	.word	0x08007be3
 8007acc:	08007bb9 	.word	0x08007bb9
 8007ad0:	08007b27 	.word	0x08007b27
 8007ad4:	08007b27 	.word	0x08007b27
 8007ad8:	08007b27 	.word	0x08007b27
 8007adc:	08007a77 	.word	0x08007a77
 8007ae0:	08007bbd 	.word	0x08007bbd
 8007ae4:	08007a77 	.word	0x08007a77
 8007ae8:	08007a77 	.word	0x08007a77
 8007aec:	08007a77 	.word	0x08007a77
 8007af0:	08007a77 	.word	0x08007a77
 8007af4:	08007bf3 	.word	0x08007bf3
 8007af8:	08007bc5 	.word	0x08007bc5
 8007afc:	08007b67 	.word	0x08007b67
 8007b00:	08007a77 	.word	0x08007a77
 8007b04:	08007a77 	.word	0x08007a77
 8007b08:	08007bef 	.word	0x08007bef
 8007b0c:	08007a77 	.word	0x08007a77
 8007b10:	08007bb9 	.word	0x08007bb9
 8007b14:	08007a77 	.word	0x08007a77
 8007b18:	08007a77 	.word	0x08007a77
 8007b1c:	08007b6f 	.word	0x08007b6f
 8007b20:	3b45      	subs	r3, #69	; 0x45
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d8a7      	bhi.n	8007a76 <__ssvfiscanf_r+0xd2>
 8007b26:	2305      	movs	r3, #5
 8007b28:	e02b      	b.n	8007b82 <__ssvfiscanf_r+0x1de>
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd0d      	ble.n	8007b4c <__ssvfiscanf_r+0x1a8>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	4552      	cmp	r2, sl
 8007b36:	f040 80a1 	bne.w	8007c7c <__ssvfiscanf_r+0x2d8>
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	6862      	ldr	r2, [r4, #4]
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007b42:	3a01      	subs	r2, #1
 8007b44:	3301      	adds	r3, #1
 8007b46:	6062      	str	r2, [r4, #4]
 8007b48:	9345      	str	r3, [sp, #276]	; 0x114
 8007b4a:	e755      	b.n	80079f8 <__ssvfiscanf_r+0x54>
 8007b4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4630      	mov	r0, r6
 8007b52:	4798      	blx	r3
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d0eb      	beq.n	8007b30 <__ssvfiscanf_r+0x18c>
 8007b58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f040 8084 	bne.w	8007c68 <__ssvfiscanf_r+0x2c4>
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b64:	e086      	b.n	8007c74 <__ssvfiscanf_r+0x2d0>
 8007b66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007b68:	f042 0220 	orr.w	r2, r2, #32
 8007b6c:	9241      	str	r2, [sp, #260]	; 0x104
 8007b6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b74:	9241      	str	r2, [sp, #260]	; 0x104
 8007b76:	2210      	movs	r2, #16
 8007b78:	2b6f      	cmp	r3, #111	; 0x6f
 8007b7a:	9242      	str	r2, [sp, #264]	; 0x108
 8007b7c:	bf34      	ite	cc
 8007b7e:	2303      	movcc	r3, #3
 8007b80:	2304      	movcs	r3, #4
 8007b82:	9347      	str	r3, [sp, #284]	; 0x11c
 8007b84:	6863      	ldr	r3, [r4, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dd41      	ble.n	8007c0e <__ssvfiscanf_r+0x26a>
 8007b8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b8c:	0659      	lsls	r1, r3, #25
 8007b8e:	d404      	bmi.n	8007b9a <__ssvfiscanf_r+0x1f6>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	5cba      	ldrb	r2, [r7, r2]
 8007b96:	0712      	lsls	r2, r2, #28
 8007b98:	d440      	bmi.n	8007c1c <__ssvfiscanf_r+0x278>
 8007b9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	dc4f      	bgt.n	8007c40 <__ssvfiscanf_r+0x29c>
 8007ba0:	466b      	mov	r3, sp
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	a941      	add	r1, sp, #260	; 0x104
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 fa08 	bl	8007fbc <_scanf_chars>
 8007bac:	2801      	cmp	r0, #1
 8007bae:	d065      	beq.n	8007c7c <__ssvfiscanf_r+0x2d8>
 8007bb0:	2802      	cmp	r0, #2
 8007bb2:	f47f af21 	bne.w	80079f8 <__ssvfiscanf_r+0x54>
 8007bb6:	e7cf      	b.n	8007b58 <__ssvfiscanf_r+0x1b4>
 8007bb8:	220a      	movs	r2, #10
 8007bba:	e7dd      	b.n	8007b78 <__ssvfiscanf_r+0x1d4>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9342      	str	r3, [sp, #264]	; 0x108
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e7de      	b.n	8007b82 <__ssvfiscanf_r+0x1de>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	9342      	str	r3, [sp, #264]	; 0x108
 8007bc8:	2304      	movs	r3, #4
 8007bca:	e7da      	b.n	8007b82 <__ssvfiscanf_r+0x1de>
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f000 fb40 	bl	8008254 <__sccl>
 8007bd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bda:	9341      	str	r3, [sp, #260]	; 0x104
 8007bdc:	4605      	mov	r5, r0
 8007bde:	2301      	movs	r3, #1
 8007be0:	e7cf      	b.n	8007b82 <__ssvfiscanf_r+0x1de>
 8007be2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be8:	9341      	str	r3, [sp, #260]	; 0x104
 8007bea:	2300      	movs	r3, #0
 8007bec:	e7c9      	b.n	8007b82 <__ssvfiscanf_r+0x1de>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e7c7      	b.n	8007b82 <__ssvfiscanf_r+0x1de>
 8007bf2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007bf4:	06c3      	lsls	r3, r0, #27
 8007bf6:	f53f aeff 	bmi.w	80079f8 <__ssvfiscanf_r+0x54>
 8007bfa:	9b00      	ldr	r3, [sp, #0]
 8007bfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007bfe:	1d19      	adds	r1, r3, #4
 8007c00:	9100      	str	r1, [sp, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	07c0      	lsls	r0, r0, #31
 8007c06:	bf4c      	ite	mi
 8007c08:	801a      	strhmi	r2, [r3, #0]
 8007c0a:	601a      	strpl	r2, [r3, #0]
 8007c0c:	e6f4      	b.n	80079f8 <__ssvfiscanf_r+0x54>
 8007c0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007c10:	4621      	mov	r1, r4
 8007c12:	4630      	mov	r0, r6
 8007c14:	4798      	blx	r3
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d0b7      	beq.n	8007b8a <__ssvfiscanf_r+0x1e6>
 8007c1a:	e79d      	b.n	8007b58 <__ssvfiscanf_r+0x1b4>
 8007c1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007c1e:	3201      	adds	r2, #1
 8007c20:	9245      	str	r2, [sp, #276]	; 0x114
 8007c22:	6862      	ldr	r2, [r4, #4]
 8007c24:	3a01      	subs	r2, #1
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	6062      	str	r2, [r4, #4]
 8007c2a:	dd02      	ble.n	8007c32 <__ssvfiscanf_r+0x28e>
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	e7ae      	b.n	8007b90 <__ssvfiscanf_r+0x1ec>
 8007c32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007c34:	4621      	mov	r1, r4
 8007c36:	4630      	mov	r0, r6
 8007c38:	4798      	blx	r3
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d0a8      	beq.n	8007b90 <__ssvfiscanf_r+0x1ec>
 8007c3e:	e78b      	b.n	8007b58 <__ssvfiscanf_r+0x1b4>
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	dc06      	bgt.n	8007c52 <__ssvfiscanf_r+0x2ae>
 8007c44:	466b      	mov	r3, sp
 8007c46:	4622      	mov	r2, r4
 8007c48:	a941      	add	r1, sp, #260	; 0x104
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 fa0e 	bl	800806c <_scanf_i>
 8007c50:	e7ac      	b.n	8007bac <__ssvfiscanf_r+0x208>
 8007c52:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <__ssvfiscanf_r+0x2ec>)
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f43f aecf 	beq.w	80079f8 <__ssvfiscanf_r+0x54>
 8007c5a:	466b      	mov	r3, sp
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	a941      	add	r1, sp, #260	; 0x104
 8007c60:	4630      	mov	r0, r6
 8007c62:	f3af 8000 	nop.w
 8007c66:	e7a1      	b.n	8007bac <__ssvfiscanf_r+0x208>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c6e:	bf18      	it	ne
 8007c70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007c74:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007c7e:	e7f9      	b.n	8007c74 <__ssvfiscanf_r+0x2d0>
 8007c80:	080078f1 	.word	0x080078f1
 8007c84:	0800796b 	.word	0x0800796b
 8007c88:	080088a7 	.word	0x080088a7
 8007c8c:	0800885e 	.word	0x0800885e
 8007c90:	00000000 	.word	0x00000000

08007c94 <_printf_common>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	4616      	mov	r6, r2
 8007c9a:	4699      	mov	r9, r3
 8007c9c:	688a      	ldr	r2, [r1, #8]
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	bfb8      	it	lt
 8007ca8:	4613      	movlt	r3, r2
 8007caa:	6033      	str	r3, [r6, #0]
 8007cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	b10a      	cbz	r2, 8007cba <_printf_common+0x26>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	0699      	lsls	r1, r3, #26
 8007cbe:	bf42      	ittt	mi
 8007cc0:	6833      	ldrmi	r3, [r6, #0]
 8007cc2:	3302      	addmi	r3, #2
 8007cc4:	6033      	strmi	r3, [r6, #0]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d106      	bne.n	8007cdc <_printf_common+0x48>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	6832      	ldr	r2, [r6, #0]
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	42ab      	cmp	r3, r5
 8007cda:	dc26      	bgt.n	8007d2a <_printf_common+0x96>
 8007cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ce0:	1e13      	subs	r3, r2, #0
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	bf18      	it	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	0692      	lsls	r2, r2, #26
 8007cea:	d42b      	bmi.n	8007d44 <_printf_common+0xb0>
 8007cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	47c0      	blx	r8
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d01e      	beq.n	8007d38 <_printf_common+0xa4>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	68e5      	ldr	r5, [r4, #12]
 8007cfe:	6832      	ldr	r2, [r6, #0]
 8007d00:	f003 0306 	and.w	r3, r3, #6
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	bf08      	it	eq
 8007d08:	1aad      	subeq	r5, r5, r2
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	bf0c      	ite	eq
 8007d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d14:	2500      	movne	r5, #0
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bfc4      	itt	gt
 8007d1a:	1a9b      	subgt	r3, r3, r2
 8007d1c:	18ed      	addgt	r5, r5, r3
 8007d1e:	2600      	movs	r6, #0
 8007d20:	341a      	adds	r4, #26
 8007d22:	42b5      	cmp	r5, r6
 8007d24:	d11a      	bne.n	8007d5c <_printf_common+0xc8>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e008      	b.n	8007d3c <_printf_common+0xa8>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4638      	mov	r0, r7
 8007d32:	47c0      	blx	r8
 8007d34:	3001      	adds	r0, #1
 8007d36:	d103      	bne.n	8007d40 <_printf_common+0xac>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d40:	3501      	adds	r5, #1
 8007d42:	e7c6      	b.n	8007cd2 <_printf_common+0x3e>
 8007d44:	18e1      	adds	r1, r4, r3
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	2030      	movs	r0, #48	; 0x30
 8007d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d4e:	4422      	add	r2, r4
 8007d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d58:	3302      	adds	r3, #2
 8007d5a:	e7c7      	b.n	8007cec <_printf_common+0x58>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4622      	mov	r2, r4
 8007d60:	4649      	mov	r1, r9
 8007d62:	4638      	mov	r0, r7
 8007d64:	47c0      	blx	r8
 8007d66:	3001      	adds	r0, #1
 8007d68:	d0e6      	beq.n	8007d38 <_printf_common+0xa4>
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7d9      	b.n	8007d22 <_printf_common+0x8e>
	...

08007d70 <_printf_i>:
 8007d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	460c      	mov	r4, r1
 8007d76:	4691      	mov	r9, r2
 8007d78:	7e27      	ldrb	r7, [r4, #24]
 8007d7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d7c:	2f78      	cmp	r7, #120	; 0x78
 8007d7e:	4680      	mov	r8, r0
 8007d80:	469a      	mov	sl, r3
 8007d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d86:	d807      	bhi.n	8007d98 <_printf_i+0x28>
 8007d88:	2f62      	cmp	r7, #98	; 0x62
 8007d8a:	d80a      	bhi.n	8007da2 <_printf_i+0x32>
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	f000 80d8 	beq.w	8007f42 <_printf_i+0x1d2>
 8007d92:	2f58      	cmp	r7, #88	; 0x58
 8007d94:	f000 80a3 	beq.w	8007ede <_printf_i+0x16e>
 8007d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007da0:	e03a      	b.n	8007e18 <_printf_i+0xa8>
 8007da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007da6:	2b15      	cmp	r3, #21
 8007da8:	d8f6      	bhi.n	8007d98 <_printf_i+0x28>
 8007daa:	a001      	add	r0, pc, #4	; (adr r0, 8007db0 <_printf_i+0x40>)
 8007dac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e1d 	.word	0x08007e1d
 8007db8:	08007d99 	.word	0x08007d99
 8007dbc:	08007d99 	.word	0x08007d99
 8007dc0:	08007d99 	.word	0x08007d99
 8007dc4:	08007d99 	.word	0x08007d99
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007d99 	.word	0x08007d99
 8007dd0:	08007d99 	.word	0x08007d99
 8007dd4:	08007d99 	.word	0x08007d99
 8007dd8:	08007d99 	.word	0x08007d99
 8007ddc:	08007f29 	.word	0x08007f29
 8007de0:	08007e4d 	.word	0x08007e4d
 8007de4:	08007f0b 	.word	0x08007f0b
 8007de8:	08007d99 	.word	0x08007d99
 8007dec:	08007d99 	.word	0x08007d99
 8007df0:	08007f4b 	.word	0x08007f4b
 8007df4:	08007d99 	.word	0x08007d99
 8007df8:	08007e4d 	.word	0x08007e4d
 8007dfc:	08007d99 	.word	0x08007d99
 8007e00:	08007d99 	.word	0x08007d99
 8007e04:	08007f13 	.word	0x08007f13
 8007e08:	680b      	ldr	r3, [r1, #0]
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	600a      	str	r2, [r1, #0]
 8007e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0a3      	b.n	8007f64 <_printf_i+0x1f4>
 8007e1c:	6825      	ldr	r5, [r4, #0]
 8007e1e:	6808      	ldr	r0, [r1, #0]
 8007e20:	062e      	lsls	r6, r5, #24
 8007e22:	f100 0304 	add.w	r3, r0, #4
 8007e26:	d50a      	bpl.n	8007e3e <_printf_i+0xce>
 8007e28:	6805      	ldr	r5, [r0, #0]
 8007e2a:	600b      	str	r3, [r1, #0]
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	da03      	bge.n	8007e38 <_printf_i+0xc8>
 8007e30:	232d      	movs	r3, #45	; 0x2d
 8007e32:	426d      	negs	r5, r5
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	485e      	ldr	r0, [pc, #376]	; (8007fb4 <_printf_i+0x244>)
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	e019      	b.n	8007e72 <_printf_i+0x102>
 8007e3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e42:	6805      	ldr	r5, [r0, #0]
 8007e44:	600b      	str	r3, [r1, #0]
 8007e46:	bf18      	it	ne
 8007e48:	b22d      	sxthne	r5, r5
 8007e4a:	e7ef      	b.n	8007e2c <_printf_i+0xbc>
 8007e4c:	680b      	ldr	r3, [r1, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	1d18      	adds	r0, r3, #4
 8007e52:	6008      	str	r0, [r1, #0]
 8007e54:	0628      	lsls	r0, r5, #24
 8007e56:	d501      	bpl.n	8007e5c <_printf_i+0xec>
 8007e58:	681d      	ldr	r5, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <_printf_i+0xf2>
 8007e5c:	0669      	lsls	r1, r5, #25
 8007e5e:	d5fb      	bpl.n	8007e58 <_printf_i+0xe8>
 8007e60:	881d      	ldrh	r5, [r3, #0]
 8007e62:	4854      	ldr	r0, [pc, #336]	; (8007fb4 <_printf_i+0x244>)
 8007e64:	2f6f      	cmp	r7, #111	; 0x6f
 8007e66:	bf0c      	ite	eq
 8007e68:	2308      	moveq	r3, #8
 8007e6a:	230a      	movne	r3, #10
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e72:	6866      	ldr	r6, [r4, #4]
 8007e74:	60a6      	str	r6, [r4, #8]
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	bfa2      	ittt	ge
 8007e7a:	6821      	ldrge	r1, [r4, #0]
 8007e7c:	f021 0104 	bicge.w	r1, r1, #4
 8007e80:	6021      	strge	r1, [r4, #0]
 8007e82:	b90d      	cbnz	r5, 8007e88 <_printf_i+0x118>
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	d04d      	beq.n	8007f24 <_printf_i+0x1b4>
 8007e88:	4616      	mov	r6, r2
 8007e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e92:	5dc7      	ldrb	r7, [r0, r7]
 8007e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e98:	462f      	mov	r7, r5
 8007e9a:	42bb      	cmp	r3, r7
 8007e9c:	460d      	mov	r5, r1
 8007e9e:	d9f4      	bls.n	8007e8a <_printf_i+0x11a>
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d10b      	bne.n	8007ebc <_printf_i+0x14c>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	07df      	lsls	r7, r3, #31
 8007ea8:	d508      	bpl.n	8007ebc <_printf_i+0x14c>
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	6861      	ldr	r1, [r4, #4]
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	bfde      	ittt	le
 8007eb2:	2330      	movle	r3, #48	; 0x30
 8007eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eb8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007ebc:	1b92      	subs	r2, r2, r6
 8007ebe:	6122      	str	r2, [r4, #16]
 8007ec0:	f8cd a000 	str.w	sl, [sp]
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	aa03      	add	r2, sp, #12
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7ff fee2 	bl	8007c94 <_printf_common>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d14c      	bne.n	8007f6e <_printf_i+0x1fe>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ed8:	b004      	add	sp, #16
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	4835      	ldr	r0, [pc, #212]	; (8007fb4 <_printf_i+0x244>)
 8007ee0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	680e      	ldr	r6, [r1, #0]
 8007ee8:	061f      	lsls	r7, r3, #24
 8007eea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007eee:	600e      	str	r6, [r1, #0]
 8007ef0:	d514      	bpl.n	8007f1c <_printf_i+0x1ac>
 8007ef2:	07d9      	lsls	r1, r3, #31
 8007ef4:	bf44      	itt	mi
 8007ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8007efa:	6023      	strmi	r3, [r4, #0]
 8007efc:	b91d      	cbnz	r5, 8007f06 <_printf_i+0x196>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	f023 0320 	bic.w	r3, r3, #32
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	2310      	movs	r3, #16
 8007f08:	e7b0      	b.n	8007e6c <_printf_i+0xfc>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	f043 0320 	orr.w	r3, r3, #32
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	2378      	movs	r3, #120	; 0x78
 8007f14:	4828      	ldr	r0, [pc, #160]	; (8007fb8 <_printf_i+0x248>)
 8007f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f1a:	e7e3      	b.n	8007ee4 <_printf_i+0x174>
 8007f1c:	065e      	lsls	r6, r3, #25
 8007f1e:	bf48      	it	mi
 8007f20:	b2ad      	uxthmi	r5, r5
 8007f22:	e7e6      	b.n	8007ef2 <_printf_i+0x182>
 8007f24:	4616      	mov	r6, r2
 8007f26:	e7bb      	b.n	8007ea0 <_printf_i+0x130>
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	6826      	ldr	r6, [r4, #0]
 8007f2c:	6960      	ldr	r0, [r4, #20]
 8007f2e:	1d1d      	adds	r5, r3, #4
 8007f30:	600d      	str	r5, [r1, #0]
 8007f32:	0635      	lsls	r5, r6, #24
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	d501      	bpl.n	8007f3c <_printf_i+0x1cc>
 8007f38:	6018      	str	r0, [r3, #0]
 8007f3a:	e002      	b.n	8007f42 <_printf_i+0x1d2>
 8007f3c:	0671      	lsls	r1, r6, #25
 8007f3e:	d5fb      	bpl.n	8007f38 <_printf_i+0x1c8>
 8007f40:	8018      	strh	r0, [r3, #0]
 8007f42:	2300      	movs	r3, #0
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	4616      	mov	r6, r2
 8007f48:	e7ba      	b.n	8007ec0 <_printf_i+0x150>
 8007f4a:	680b      	ldr	r3, [r1, #0]
 8007f4c:	1d1a      	adds	r2, r3, #4
 8007f4e:	600a      	str	r2, [r1, #0]
 8007f50:	681e      	ldr	r6, [r3, #0]
 8007f52:	6862      	ldr	r2, [r4, #4]
 8007f54:	2100      	movs	r1, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7f8 f942 	bl	80001e0 <memchr>
 8007f5c:	b108      	cbz	r0, 8007f62 <_printf_i+0x1f2>
 8007f5e:	1b80      	subs	r0, r0, r6
 8007f60:	6060      	str	r0, [r4, #4]
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	2300      	movs	r3, #0
 8007f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6c:	e7a8      	b.n	8007ec0 <_printf_i+0x150>
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d0ab      	beq.n	8007ed4 <_printf_i+0x164>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	079b      	lsls	r3, r3, #30
 8007f80:	d413      	bmi.n	8007faa <_printf_i+0x23a>
 8007f82:	68e0      	ldr	r0, [r4, #12]
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	4298      	cmp	r0, r3
 8007f88:	bfb8      	it	lt
 8007f8a:	4618      	movlt	r0, r3
 8007f8c:	e7a4      	b.n	8007ed8 <_printf_i+0x168>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4632      	mov	r2, r6
 8007f92:	4649      	mov	r1, r9
 8007f94:	4640      	mov	r0, r8
 8007f96:	47d0      	blx	sl
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d09b      	beq.n	8007ed4 <_printf_i+0x164>
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	68e3      	ldr	r3, [r4, #12]
 8007fa0:	9903      	ldr	r1, [sp, #12]
 8007fa2:	1a5b      	subs	r3, r3, r1
 8007fa4:	42ab      	cmp	r3, r5
 8007fa6:	dcf2      	bgt.n	8007f8e <_printf_i+0x21e>
 8007fa8:	e7eb      	b.n	8007f82 <_printf_i+0x212>
 8007faa:	2500      	movs	r5, #0
 8007fac:	f104 0619 	add.w	r6, r4, #25
 8007fb0:	e7f5      	b.n	8007f9e <_printf_i+0x22e>
 8007fb2:	bf00      	nop
 8007fb4:	08008869 	.word	0x08008869
 8007fb8:	0800887a 	.word	0x0800887a

08007fbc <_scanf_chars>:
 8007fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	4615      	mov	r5, r2
 8007fc2:	688a      	ldr	r2, [r1, #8]
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	b932      	cbnz	r2, 8007fd8 <_scanf_chars+0x1c>
 8007fca:	698a      	ldr	r2, [r1, #24]
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	bf0c      	ite	eq
 8007fd0:	2201      	moveq	r2, #1
 8007fd2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007fd6:	608a      	str	r2, [r1, #8]
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008068 <_scanf_chars+0xac>
 8007fde:	06d1      	lsls	r1, r2, #27
 8007fe0:	bf5f      	itttt	pl
 8007fe2:	681a      	ldrpl	r2, [r3, #0]
 8007fe4:	1d11      	addpl	r1, r2, #4
 8007fe6:	6019      	strpl	r1, [r3, #0]
 8007fe8:	6816      	ldrpl	r6, [r2, #0]
 8007fea:	2700      	movs	r7, #0
 8007fec:	69a0      	ldr	r0, [r4, #24]
 8007fee:	b188      	cbz	r0, 8008014 <_scanf_chars+0x58>
 8007ff0:	2801      	cmp	r0, #1
 8007ff2:	d107      	bne.n	8008004 <_scanf_chars+0x48>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	781a      	ldrb	r2, [r3, #0]
 8007ff8:	6963      	ldr	r3, [r4, #20]
 8007ffa:	5c9b      	ldrb	r3, [r3, r2]
 8007ffc:	b953      	cbnz	r3, 8008014 <_scanf_chars+0x58>
 8007ffe:	bb27      	cbnz	r7, 800804a <_scanf_chars+0x8e>
 8008000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008004:	2802      	cmp	r0, #2
 8008006:	d120      	bne.n	800804a <_scanf_chars+0x8e>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008010:	071b      	lsls	r3, r3, #28
 8008012:	d41a      	bmi.n	800804a <_scanf_chars+0x8e>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	06da      	lsls	r2, r3, #27
 8008018:	bf5e      	ittt	pl
 800801a:	682b      	ldrpl	r3, [r5, #0]
 800801c:	781b      	ldrbpl	r3, [r3, #0]
 800801e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008022:	682a      	ldr	r2, [r5, #0]
 8008024:	686b      	ldr	r3, [r5, #4]
 8008026:	3201      	adds	r2, #1
 8008028:	602a      	str	r2, [r5, #0]
 800802a:	68a2      	ldr	r2, [r4, #8]
 800802c:	3b01      	subs	r3, #1
 800802e:	3a01      	subs	r2, #1
 8008030:	606b      	str	r3, [r5, #4]
 8008032:	3701      	adds	r7, #1
 8008034:	60a2      	str	r2, [r4, #8]
 8008036:	b142      	cbz	r2, 800804a <_scanf_chars+0x8e>
 8008038:	2b00      	cmp	r3, #0
 800803a:	dcd7      	bgt.n	8007fec <_scanf_chars+0x30>
 800803c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008040:	4629      	mov	r1, r5
 8008042:	4640      	mov	r0, r8
 8008044:	4798      	blx	r3
 8008046:	2800      	cmp	r0, #0
 8008048:	d0d0      	beq.n	8007fec <_scanf_chars+0x30>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	f013 0310 	ands.w	r3, r3, #16
 8008050:	d105      	bne.n	800805e <_scanf_chars+0xa2>
 8008052:	68e2      	ldr	r2, [r4, #12]
 8008054:	3201      	adds	r2, #1
 8008056:	60e2      	str	r2, [r4, #12]
 8008058:	69a2      	ldr	r2, [r4, #24]
 800805a:	b102      	cbz	r2, 800805e <_scanf_chars+0xa2>
 800805c:	7033      	strb	r3, [r6, #0]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	441f      	add	r7, r3
 8008062:	6127      	str	r7, [r4, #16]
 8008064:	2000      	movs	r0, #0
 8008066:	e7cb      	b.n	8008000 <_scanf_chars+0x44>
 8008068:	080088a7 	.word	0x080088a7

0800806c <_scanf_i>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	4698      	mov	r8, r3
 8008072:	4b74      	ldr	r3, [pc, #464]	; (8008244 <_scanf_i+0x1d8>)
 8008074:	460c      	mov	r4, r1
 8008076:	4682      	mov	sl, r0
 8008078:	4616      	mov	r6, r2
 800807a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800807e:	b087      	sub	sp, #28
 8008080:	ab03      	add	r3, sp, #12
 8008082:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008086:	4b70      	ldr	r3, [pc, #448]	; (8008248 <_scanf_i+0x1dc>)
 8008088:	69a1      	ldr	r1, [r4, #24]
 800808a:	4a70      	ldr	r2, [pc, #448]	; (800824c <_scanf_i+0x1e0>)
 800808c:	2903      	cmp	r1, #3
 800808e:	bf18      	it	ne
 8008090:	461a      	movne	r2, r3
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	9201      	str	r2, [sp, #4]
 8008096:	1e5a      	subs	r2, r3, #1
 8008098:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800809c:	bf88      	it	hi
 800809e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80080a2:	4627      	mov	r7, r4
 80080a4:	bf82      	ittt	hi
 80080a6:	eb03 0905 	addhi.w	r9, r3, r5
 80080aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80080ae:	60a3      	strhi	r3, [r4, #8]
 80080b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80080b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80080b8:	bf98      	it	ls
 80080ba:	f04f 0900 	movls.w	r9, #0
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	463d      	mov	r5, r7
 80080c2:	f04f 0b00 	mov.w	fp, #0
 80080c6:	6831      	ldr	r1, [r6, #0]
 80080c8:	ab03      	add	r3, sp, #12
 80080ca:	7809      	ldrb	r1, [r1, #0]
 80080cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80080d0:	2202      	movs	r2, #2
 80080d2:	f7f8 f885 	bl	80001e0 <memchr>
 80080d6:	b328      	cbz	r0, 8008124 <_scanf_i+0xb8>
 80080d8:	f1bb 0f01 	cmp.w	fp, #1
 80080dc:	d159      	bne.n	8008192 <_scanf_i+0x126>
 80080de:	6862      	ldr	r2, [r4, #4]
 80080e0:	b92a      	cbnz	r2, 80080ee <_scanf_i+0x82>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	2308      	movs	r3, #8
 80080e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6022      	str	r2, [r4, #0]
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80080f4:	6022      	str	r2, [r4, #0]
 80080f6:	68a2      	ldr	r2, [r4, #8]
 80080f8:	1e51      	subs	r1, r2, #1
 80080fa:	60a1      	str	r1, [r4, #8]
 80080fc:	b192      	cbz	r2, 8008124 <_scanf_i+0xb8>
 80080fe:	6832      	ldr	r2, [r6, #0]
 8008100:	1c51      	adds	r1, r2, #1
 8008102:	6031      	str	r1, [r6, #0]
 8008104:	7812      	ldrb	r2, [r2, #0]
 8008106:	f805 2b01 	strb.w	r2, [r5], #1
 800810a:	6872      	ldr	r2, [r6, #4]
 800810c:	3a01      	subs	r2, #1
 800810e:	2a00      	cmp	r2, #0
 8008110:	6072      	str	r2, [r6, #4]
 8008112:	dc07      	bgt.n	8008124 <_scanf_i+0xb8>
 8008114:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008118:	4631      	mov	r1, r6
 800811a:	4650      	mov	r0, sl
 800811c:	4790      	blx	r2
 800811e:	2800      	cmp	r0, #0
 8008120:	f040 8085 	bne.w	800822e <_scanf_i+0x1c2>
 8008124:	f10b 0b01 	add.w	fp, fp, #1
 8008128:	f1bb 0f03 	cmp.w	fp, #3
 800812c:	d1cb      	bne.n	80080c6 <_scanf_i+0x5a>
 800812e:	6863      	ldr	r3, [r4, #4]
 8008130:	b90b      	cbnz	r3, 8008136 <_scanf_i+0xca>
 8008132:	230a      	movs	r3, #10
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	6863      	ldr	r3, [r4, #4]
 8008138:	4945      	ldr	r1, [pc, #276]	; (8008250 <_scanf_i+0x1e4>)
 800813a:	6960      	ldr	r0, [r4, #20]
 800813c:	1ac9      	subs	r1, r1, r3
 800813e:	f000 f889 	bl	8008254 <__sccl>
 8008142:	f04f 0b00 	mov.w	fp, #0
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	6822      	ldr	r2, [r4, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d03d      	beq.n	80081ca <_scanf_i+0x15e>
 800814e:	6831      	ldr	r1, [r6, #0]
 8008150:	6960      	ldr	r0, [r4, #20]
 8008152:	f891 c000 	ldrb.w	ip, [r1]
 8008156:	f810 000c 	ldrb.w	r0, [r0, ip]
 800815a:	2800      	cmp	r0, #0
 800815c:	d035      	beq.n	80081ca <_scanf_i+0x15e>
 800815e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008162:	d124      	bne.n	80081ae <_scanf_i+0x142>
 8008164:	0510      	lsls	r0, r2, #20
 8008166:	d522      	bpl.n	80081ae <_scanf_i+0x142>
 8008168:	f10b 0b01 	add.w	fp, fp, #1
 800816c:	f1b9 0f00 	cmp.w	r9, #0
 8008170:	d003      	beq.n	800817a <_scanf_i+0x10e>
 8008172:	3301      	adds	r3, #1
 8008174:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008178:	60a3      	str	r3, [r4, #8]
 800817a:	6873      	ldr	r3, [r6, #4]
 800817c:	3b01      	subs	r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	6073      	str	r3, [r6, #4]
 8008182:	dd1b      	ble.n	80081bc <_scanf_i+0x150>
 8008184:	6833      	ldr	r3, [r6, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	6033      	str	r3, [r6, #0]
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	3b01      	subs	r3, #1
 800818e:	60a3      	str	r3, [r4, #8]
 8008190:	e7d9      	b.n	8008146 <_scanf_i+0xda>
 8008192:	f1bb 0f02 	cmp.w	fp, #2
 8008196:	d1ae      	bne.n	80080f6 <_scanf_i+0x8a>
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800819e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80081a2:	d1bf      	bne.n	8008124 <_scanf_i+0xb8>
 80081a4:	2310      	movs	r3, #16
 80081a6:	6063      	str	r3, [r4, #4]
 80081a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ac:	e7a2      	b.n	80080f4 <_scanf_i+0x88>
 80081ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80081b2:	6022      	str	r2, [r4, #0]
 80081b4:	780b      	ldrb	r3, [r1, #0]
 80081b6:	f805 3b01 	strb.w	r3, [r5], #1
 80081ba:	e7de      	b.n	800817a <_scanf_i+0x10e>
 80081bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081c0:	4631      	mov	r1, r6
 80081c2:	4650      	mov	r0, sl
 80081c4:	4798      	blx	r3
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d0df      	beq.n	800818a <_scanf_i+0x11e>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	05d9      	lsls	r1, r3, #23
 80081ce:	d50d      	bpl.n	80081ec <_scanf_i+0x180>
 80081d0:	42bd      	cmp	r5, r7
 80081d2:	d909      	bls.n	80081e8 <_scanf_i+0x17c>
 80081d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80081d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081dc:	4632      	mov	r2, r6
 80081de:	4650      	mov	r0, sl
 80081e0:	4798      	blx	r3
 80081e2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80081e6:	464d      	mov	r5, r9
 80081e8:	42bd      	cmp	r5, r7
 80081ea:	d028      	beq.n	800823e <_scanf_i+0x1d2>
 80081ec:	6822      	ldr	r2, [r4, #0]
 80081ee:	f012 0210 	ands.w	r2, r2, #16
 80081f2:	d113      	bne.n	800821c <_scanf_i+0x1b0>
 80081f4:	702a      	strb	r2, [r5, #0]
 80081f6:	6863      	ldr	r3, [r4, #4]
 80081f8:	9e01      	ldr	r6, [sp, #4]
 80081fa:	4639      	mov	r1, r7
 80081fc:	4650      	mov	r0, sl
 80081fe:	47b0      	blx	r6
 8008200:	f8d8 3000 	ldr.w	r3, [r8]
 8008204:	6821      	ldr	r1, [r4, #0]
 8008206:	1d1a      	adds	r2, r3, #4
 8008208:	f8c8 2000 	str.w	r2, [r8]
 800820c:	f011 0f20 	tst.w	r1, #32
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	d00f      	beq.n	8008234 <_scanf_i+0x1c8>
 8008214:	6018      	str	r0, [r3, #0]
 8008216:	68e3      	ldr	r3, [r4, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60e3      	str	r3, [r4, #12]
 800821c:	1bed      	subs	r5, r5, r7
 800821e:	44ab      	add	fp, r5
 8008220:	6925      	ldr	r5, [r4, #16]
 8008222:	445d      	add	r5, fp
 8008224:	6125      	str	r5, [r4, #16]
 8008226:	2000      	movs	r0, #0
 8008228:	b007      	add	sp, #28
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822e:	f04f 0b00 	mov.w	fp, #0
 8008232:	e7ca      	b.n	80081ca <_scanf_i+0x15e>
 8008234:	07ca      	lsls	r2, r1, #31
 8008236:	bf4c      	ite	mi
 8008238:	8018      	strhmi	r0, [r3, #0]
 800823a:	6018      	strpl	r0, [r3, #0]
 800823c:	e7eb      	b.n	8008216 <_scanf_i+0x1aa>
 800823e:	2001      	movs	r0, #1
 8008240:	e7f2      	b.n	8008228 <_scanf_i+0x1bc>
 8008242:	bf00      	nop
 8008244:	08008804 	.word	0x08008804
 8008248:	080084cd 	.word	0x080084cd
 800824c:	080083d1 	.word	0x080083d1
 8008250:	080088a4 	.word	0x080088a4

08008254 <__sccl>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	780b      	ldrb	r3, [r1, #0]
 8008258:	4604      	mov	r4, r0
 800825a:	2b5e      	cmp	r3, #94	; 0x5e
 800825c:	bf0b      	itete	eq
 800825e:	784b      	ldrbeq	r3, [r1, #1]
 8008260:	1c48      	addne	r0, r1, #1
 8008262:	1c88      	addeq	r0, r1, #2
 8008264:	2200      	movne	r2, #0
 8008266:	bf08      	it	eq
 8008268:	2201      	moveq	r2, #1
 800826a:	1e61      	subs	r1, r4, #1
 800826c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008270:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008274:	42a9      	cmp	r1, r5
 8008276:	d1fb      	bne.n	8008270 <__sccl+0x1c>
 8008278:	b90b      	cbnz	r3, 800827e <__sccl+0x2a>
 800827a:	3801      	subs	r0, #1
 800827c:	bd70      	pop	{r4, r5, r6, pc}
 800827e:	f082 0101 	eor.w	r1, r2, #1
 8008282:	54e1      	strb	r1, [r4, r3]
 8008284:	1c42      	adds	r2, r0, #1
 8008286:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800828a:	2d2d      	cmp	r5, #45	; 0x2d
 800828c:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8008290:	4610      	mov	r0, r2
 8008292:	d006      	beq.n	80082a2 <__sccl+0x4e>
 8008294:	2d5d      	cmp	r5, #93	; 0x5d
 8008296:	d0f1      	beq.n	800827c <__sccl+0x28>
 8008298:	b90d      	cbnz	r5, 800829e <__sccl+0x4a>
 800829a:	4630      	mov	r0, r6
 800829c:	e7ee      	b.n	800827c <__sccl+0x28>
 800829e:	462b      	mov	r3, r5
 80082a0:	e7ef      	b.n	8008282 <__sccl+0x2e>
 80082a2:	7816      	ldrb	r6, [r2, #0]
 80082a4:	2e5d      	cmp	r6, #93	; 0x5d
 80082a6:	d0fa      	beq.n	800829e <__sccl+0x4a>
 80082a8:	42b3      	cmp	r3, r6
 80082aa:	dcf8      	bgt.n	800829e <__sccl+0x4a>
 80082ac:	4618      	mov	r0, r3
 80082ae:	3001      	adds	r0, #1
 80082b0:	4286      	cmp	r6, r0
 80082b2:	5421      	strb	r1, [r4, r0]
 80082b4:	dcfb      	bgt.n	80082ae <__sccl+0x5a>
 80082b6:	43d8      	mvns	r0, r3
 80082b8:	4430      	add	r0, r6
 80082ba:	1c5d      	adds	r5, r3, #1
 80082bc:	42b3      	cmp	r3, r6
 80082be:	bfa8      	it	ge
 80082c0:	2000      	movge	r0, #0
 80082c2:	182b      	adds	r3, r5, r0
 80082c4:	3202      	adds	r2, #2
 80082c6:	e7de      	b.n	8008286 <__sccl+0x32>

080082c8 <_strtol_l.isra.0>:
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ce:	d001      	beq.n	80082d4 <_strtol_l.isra.0+0xc>
 80082d0:	2b24      	cmp	r3, #36	; 0x24
 80082d2:	d906      	bls.n	80082e2 <_strtol_l.isra.0+0x1a>
 80082d4:	f7ff f930 	bl	8007538 <__errno>
 80082d8:	2316      	movs	r3, #22
 80082da:	6003      	str	r3, [r0, #0]
 80082dc:	2000      	movs	r0, #0
 80082de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e2:	4f3a      	ldr	r7, [pc, #232]	; (80083cc <_strtol_l.isra.0+0x104>)
 80082e4:	468e      	mov	lr, r1
 80082e6:	4676      	mov	r6, lr
 80082e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80082ec:	5de5      	ldrb	r5, [r4, r7]
 80082ee:	f015 0508 	ands.w	r5, r5, #8
 80082f2:	d1f8      	bne.n	80082e6 <_strtol_l.isra.0+0x1e>
 80082f4:	2c2d      	cmp	r4, #45	; 0x2d
 80082f6:	d134      	bne.n	8008362 <_strtol_l.isra.0+0x9a>
 80082f8:	f89e 4000 	ldrb.w	r4, [lr]
 80082fc:	f04f 0801 	mov.w	r8, #1
 8008300:	f106 0e02 	add.w	lr, r6, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d05c      	beq.n	80083c2 <_strtol_l.isra.0+0xfa>
 8008308:	2b10      	cmp	r3, #16
 800830a:	d10c      	bne.n	8008326 <_strtol_l.isra.0+0x5e>
 800830c:	2c30      	cmp	r4, #48	; 0x30
 800830e:	d10a      	bne.n	8008326 <_strtol_l.isra.0+0x5e>
 8008310:	f89e 4000 	ldrb.w	r4, [lr]
 8008314:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008318:	2c58      	cmp	r4, #88	; 0x58
 800831a:	d14d      	bne.n	80083b8 <_strtol_l.isra.0+0xf0>
 800831c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008320:	2310      	movs	r3, #16
 8008322:	f10e 0e02 	add.w	lr, lr, #2
 8008326:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800832a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800832e:	2600      	movs	r6, #0
 8008330:	fbbc f9f3 	udiv	r9, ip, r3
 8008334:	4635      	mov	r5, r6
 8008336:	fb03 ca19 	mls	sl, r3, r9, ip
 800833a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800833e:	2f09      	cmp	r7, #9
 8008340:	d818      	bhi.n	8008374 <_strtol_l.isra.0+0xac>
 8008342:	463c      	mov	r4, r7
 8008344:	42a3      	cmp	r3, r4
 8008346:	dd24      	ble.n	8008392 <_strtol_l.isra.0+0xca>
 8008348:	2e00      	cmp	r6, #0
 800834a:	db1f      	blt.n	800838c <_strtol_l.isra.0+0xc4>
 800834c:	45a9      	cmp	r9, r5
 800834e:	d31d      	bcc.n	800838c <_strtol_l.isra.0+0xc4>
 8008350:	d101      	bne.n	8008356 <_strtol_l.isra.0+0x8e>
 8008352:	45a2      	cmp	sl, r4
 8008354:	db1a      	blt.n	800838c <_strtol_l.isra.0+0xc4>
 8008356:	fb05 4503 	mla	r5, r5, r3, r4
 800835a:	2601      	movs	r6, #1
 800835c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008360:	e7eb      	b.n	800833a <_strtol_l.isra.0+0x72>
 8008362:	2c2b      	cmp	r4, #43	; 0x2b
 8008364:	bf08      	it	eq
 8008366:	f89e 4000 	ldrbeq.w	r4, [lr]
 800836a:	46a8      	mov	r8, r5
 800836c:	bf08      	it	eq
 800836e:	f106 0e02 	addeq.w	lr, r6, #2
 8008372:	e7c7      	b.n	8008304 <_strtol_l.isra.0+0x3c>
 8008374:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008378:	2f19      	cmp	r7, #25
 800837a:	d801      	bhi.n	8008380 <_strtol_l.isra.0+0xb8>
 800837c:	3c37      	subs	r4, #55	; 0x37
 800837e:	e7e1      	b.n	8008344 <_strtol_l.isra.0+0x7c>
 8008380:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008384:	2f19      	cmp	r7, #25
 8008386:	d804      	bhi.n	8008392 <_strtol_l.isra.0+0xca>
 8008388:	3c57      	subs	r4, #87	; 0x57
 800838a:	e7db      	b.n	8008344 <_strtol_l.isra.0+0x7c>
 800838c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008390:	e7e4      	b.n	800835c <_strtol_l.isra.0+0x94>
 8008392:	2e00      	cmp	r6, #0
 8008394:	da05      	bge.n	80083a2 <_strtol_l.isra.0+0xda>
 8008396:	2322      	movs	r3, #34	; 0x22
 8008398:	6003      	str	r3, [r0, #0]
 800839a:	4665      	mov	r5, ip
 800839c:	b942      	cbnz	r2, 80083b0 <_strtol_l.isra.0+0xe8>
 800839e:	4628      	mov	r0, r5
 80083a0:	e79d      	b.n	80082de <_strtol_l.isra.0+0x16>
 80083a2:	f1b8 0f00 	cmp.w	r8, #0
 80083a6:	d000      	beq.n	80083aa <_strtol_l.isra.0+0xe2>
 80083a8:	426d      	negs	r5, r5
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	d0f7      	beq.n	800839e <_strtol_l.isra.0+0xd6>
 80083ae:	b10e      	cbz	r6, 80083b4 <_strtol_l.isra.0+0xec>
 80083b0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80083b4:	6011      	str	r1, [r2, #0]
 80083b6:	e7f2      	b.n	800839e <_strtol_l.isra.0+0xd6>
 80083b8:	2430      	movs	r4, #48	; 0x30
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1b3      	bne.n	8008326 <_strtol_l.isra.0+0x5e>
 80083be:	2308      	movs	r3, #8
 80083c0:	e7b1      	b.n	8008326 <_strtol_l.isra.0+0x5e>
 80083c2:	2c30      	cmp	r4, #48	; 0x30
 80083c4:	d0a4      	beq.n	8008310 <_strtol_l.isra.0+0x48>
 80083c6:	230a      	movs	r3, #10
 80083c8:	e7ad      	b.n	8008326 <_strtol_l.isra.0+0x5e>
 80083ca:	bf00      	nop
 80083cc:	080088a7 	.word	0x080088a7

080083d0 <_strtol_r>:
 80083d0:	f7ff bf7a 	b.w	80082c8 <_strtol_l.isra.0>

080083d4 <_strtoul_l.isra.0>:
 80083d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083d8:	4e3b      	ldr	r6, [pc, #236]	; (80084c8 <_strtoul_l.isra.0+0xf4>)
 80083da:	4686      	mov	lr, r0
 80083dc:	468c      	mov	ip, r1
 80083de:	4660      	mov	r0, ip
 80083e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80083e4:	5da5      	ldrb	r5, [r4, r6]
 80083e6:	f015 0508 	ands.w	r5, r5, #8
 80083ea:	d1f8      	bne.n	80083de <_strtoul_l.isra.0+0xa>
 80083ec:	2c2d      	cmp	r4, #45	; 0x2d
 80083ee:	d134      	bne.n	800845a <_strtoul_l.isra.0+0x86>
 80083f0:	f89c 4000 	ldrb.w	r4, [ip]
 80083f4:	f04f 0801 	mov.w	r8, #1
 80083f8:	f100 0c02 	add.w	ip, r0, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d05e      	beq.n	80084be <_strtoul_l.isra.0+0xea>
 8008400:	2b10      	cmp	r3, #16
 8008402:	d10c      	bne.n	800841e <_strtoul_l.isra.0+0x4a>
 8008404:	2c30      	cmp	r4, #48	; 0x30
 8008406:	d10a      	bne.n	800841e <_strtoul_l.isra.0+0x4a>
 8008408:	f89c 0000 	ldrb.w	r0, [ip]
 800840c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008410:	2858      	cmp	r0, #88	; 0x58
 8008412:	d14f      	bne.n	80084b4 <_strtoul_l.isra.0+0xe0>
 8008414:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008418:	2310      	movs	r3, #16
 800841a:	f10c 0c02 	add.w	ip, ip, #2
 800841e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008422:	2500      	movs	r5, #0
 8008424:	fbb7 f7f3 	udiv	r7, r7, r3
 8008428:	fb03 f907 	mul.w	r9, r3, r7
 800842c:	ea6f 0909 	mvn.w	r9, r9
 8008430:	4628      	mov	r0, r5
 8008432:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008436:	2e09      	cmp	r6, #9
 8008438:	d818      	bhi.n	800846c <_strtoul_l.isra.0+0x98>
 800843a:	4634      	mov	r4, r6
 800843c:	42a3      	cmp	r3, r4
 800843e:	dd24      	ble.n	800848a <_strtoul_l.isra.0+0xb6>
 8008440:	2d00      	cmp	r5, #0
 8008442:	db1f      	blt.n	8008484 <_strtoul_l.isra.0+0xb0>
 8008444:	4287      	cmp	r7, r0
 8008446:	d31d      	bcc.n	8008484 <_strtoul_l.isra.0+0xb0>
 8008448:	d101      	bne.n	800844e <_strtoul_l.isra.0+0x7a>
 800844a:	45a1      	cmp	r9, r4
 800844c:	db1a      	blt.n	8008484 <_strtoul_l.isra.0+0xb0>
 800844e:	fb00 4003 	mla	r0, r0, r3, r4
 8008452:	2501      	movs	r5, #1
 8008454:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008458:	e7eb      	b.n	8008432 <_strtoul_l.isra.0+0x5e>
 800845a:	2c2b      	cmp	r4, #43	; 0x2b
 800845c:	bf08      	it	eq
 800845e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008462:	46a8      	mov	r8, r5
 8008464:	bf08      	it	eq
 8008466:	f100 0c02 	addeq.w	ip, r0, #2
 800846a:	e7c7      	b.n	80083fc <_strtoul_l.isra.0+0x28>
 800846c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008470:	2e19      	cmp	r6, #25
 8008472:	d801      	bhi.n	8008478 <_strtoul_l.isra.0+0xa4>
 8008474:	3c37      	subs	r4, #55	; 0x37
 8008476:	e7e1      	b.n	800843c <_strtoul_l.isra.0+0x68>
 8008478:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800847c:	2e19      	cmp	r6, #25
 800847e:	d804      	bhi.n	800848a <_strtoul_l.isra.0+0xb6>
 8008480:	3c57      	subs	r4, #87	; 0x57
 8008482:	e7db      	b.n	800843c <_strtoul_l.isra.0+0x68>
 8008484:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008488:	e7e4      	b.n	8008454 <_strtoul_l.isra.0+0x80>
 800848a:	2d00      	cmp	r5, #0
 800848c:	da07      	bge.n	800849e <_strtoul_l.isra.0+0xca>
 800848e:	2322      	movs	r3, #34	; 0x22
 8008490:	f8ce 3000 	str.w	r3, [lr]
 8008494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008498:	b942      	cbnz	r2, 80084ac <_strtoul_l.isra.0+0xd8>
 800849a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800849e:	f1b8 0f00 	cmp.w	r8, #0
 80084a2:	d000      	beq.n	80084a6 <_strtoul_l.isra.0+0xd2>
 80084a4:	4240      	negs	r0, r0
 80084a6:	2a00      	cmp	r2, #0
 80084a8:	d0f7      	beq.n	800849a <_strtoul_l.isra.0+0xc6>
 80084aa:	b10d      	cbz	r5, 80084b0 <_strtoul_l.isra.0+0xdc>
 80084ac:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80084b0:	6011      	str	r1, [r2, #0]
 80084b2:	e7f2      	b.n	800849a <_strtoul_l.isra.0+0xc6>
 80084b4:	2430      	movs	r4, #48	; 0x30
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1b1      	bne.n	800841e <_strtoul_l.isra.0+0x4a>
 80084ba:	2308      	movs	r3, #8
 80084bc:	e7af      	b.n	800841e <_strtoul_l.isra.0+0x4a>
 80084be:	2c30      	cmp	r4, #48	; 0x30
 80084c0:	d0a2      	beq.n	8008408 <_strtoul_l.isra.0+0x34>
 80084c2:	230a      	movs	r3, #10
 80084c4:	e7ab      	b.n	800841e <_strtoul_l.isra.0+0x4a>
 80084c6:	bf00      	nop
 80084c8:	080088a7 	.word	0x080088a7

080084cc <_strtoul_r>:
 80084cc:	f7ff bf82 	b.w	80083d4 <_strtoul_l.isra.0>

080084d0 <__submore>:
 80084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d4:	460c      	mov	r4, r1
 80084d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80084d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084dc:	4299      	cmp	r1, r3
 80084de:	d11d      	bne.n	800851c <__submore+0x4c>
 80084e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084e4:	f000 f8a8 	bl	8008638 <_malloc_r>
 80084e8:	b918      	cbnz	r0, 80084f2 <__submore+0x22>
 80084ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80084f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80084fc:	6360      	str	r0, [r4, #52]	; 0x34
 80084fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008502:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008506:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800850a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800850e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008512:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008516:	6020      	str	r0, [r4, #0]
 8008518:	2000      	movs	r0, #0
 800851a:	e7e8      	b.n	80084ee <__submore+0x1e>
 800851c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800851e:	0077      	lsls	r7, r6, #1
 8008520:	463a      	mov	r2, r7
 8008522:	f000 f8e3 	bl	80086ec <_realloc_r>
 8008526:	4605      	mov	r5, r0
 8008528:	2800      	cmp	r0, #0
 800852a:	d0de      	beq.n	80084ea <__submore+0x1a>
 800852c:	eb00 0806 	add.w	r8, r0, r6
 8008530:	4601      	mov	r1, r0
 8008532:	4632      	mov	r2, r6
 8008534:	4640      	mov	r0, r8
 8008536:	f000 f807 	bl	8008548 <memcpy>
 800853a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800853e:	f8c4 8000 	str.w	r8, [r4]
 8008542:	e7e9      	b.n	8008518 <__submore+0x48>

08008544 <__retarget_lock_acquire_recursive>:
 8008544:	4770      	bx	lr

08008546 <__retarget_lock_release_recursive>:
 8008546:	4770      	bx	lr

08008548 <memcpy>:
 8008548:	440a      	add	r2, r1
 800854a:	4291      	cmp	r1, r2
 800854c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008550:	d100      	bne.n	8008554 <memcpy+0xc>
 8008552:	4770      	bx	lr
 8008554:	b510      	push	{r4, lr}
 8008556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800855e:	4291      	cmp	r1, r2
 8008560:	d1f9      	bne.n	8008556 <memcpy+0xe>
 8008562:	bd10      	pop	{r4, pc}

08008564 <memmove>:
 8008564:	4288      	cmp	r0, r1
 8008566:	b510      	push	{r4, lr}
 8008568:	eb01 0402 	add.w	r4, r1, r2
 800856c:	d902      	bls.n	8008574 <memmove+0x10>
 800856e:	4284      	cmp	r4, r0
 8008570:	4623      	mov	r3, r4
 8008572:	d807      	bhi.n	8008584 <memmove+0x20>
 8008574:	1e43      	subs	r3, r0, #1
 8008576:	42a1      	cmp	r1, r4
 8008578:	d008      	beq.n	800858c <memmove+0x28>
 800857a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800857e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008582:	e7f8      	b.n	8008576 <memmove+0x12>
 8008584:	4402      	add	r2, r0
 8008586:	4601      	mov	r1, r0
 8008588:	428a      	cmp	r2, r1
 800858a:	d100      	bne.n	800858e <memmove+0x2a>
 800858c:	bd10      	pop	{r4, pc}
 800858e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008596:	e7f7      	b.n	8008588 <memmove+0x24>

08008598 <_free_r>:
 8008598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800859a:	2900      	cmp	r1, #0
 800859c:	d048      	beq.n	8008630 <_free_r+0x98>
 800859e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a2:	9001      	str	r0, [sp, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f1a1 0404 	sub.w	r4, r1, #4
 80085aa:	bfb8      	it	lt
 80085ac:	18e4      	addlt	r4, r4, r3
 80085ae:	f000 f8d3 	bl	8008758 <__malloc_lock>
 80085b2:	4a20      	ldr	r2, [pc, #128]	; (8008634 <_free_r+0x9c>)
 80085b4:	9801      	ldr	r0, [sp, #4]
 80085b6:	6813      	ldr	r3, [r2, #0]
 80085b8:	4615      	mov	r5, r2
 80085ba:	b933      	cbnz	r3, 80085ca <_free_r+0x32>
 80085bc:	6063      	str	r3, [r4, #4]
 80085be:	6014      	str	r4, [r2, #0]
 80085c0:	b003      	add	sp, #12
 80085c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c6:	f000 b8cd 	b.w	8008764 <__malloc_unlock>
 80085ca:	42a3      	cmp	r3, r4
 80085cc:	d90b      	bls.n	80085e6 <_free_r+0x4e>
 80085ce:	6821      	ldr	r1, [r4, #0]
 80085d0:	1862      	adds	r2, r4, r1
 80085d2:	4293      	cmp	r3, r2
 80085d4:	bf04      	itt	eq
 80085d6:	681a      	ldreq	r2, [r3, #0]
 80085d8:	685b      	ldreq	r3, [r3, #4]
 80085da:	6063      	str	r3, [r4, #4]
 80085dc:	bf04      	itt	eq
 80085de:	1852      	addeq	r2, r2, r1
 80085e0:	6022      	streq	r2, [r4, #0]
 80085e2:	602c      	str	r4, [r5, #0]
 80085e4:	e7ec      	b.n	80085c0 <_free_r+0x28>
 80085e6:	461a      	mov	r2, r3
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	b10b      	cbz	r3, 80085f0 <_free_r+0x58>
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	d9fa      	bls.n	80085e6 <_free_r+0x4e>
 80085f0:	6811      	ldr	r1, [r2, #0]
 80085f2:	1855      	adds	r5, r2, r1
 80085f4:	42a5      	cmp	r5, r4
 80085f6:	d10b      	bne.n	8008610 <_free_r+0x78>
 80085f8:	6824      	ldr	r4, [r4, #0]
 80085fa:	4421      	add	r1, r4
 80085fc:	1854      	adds	r4, r2, r1
 80085fe:	42a3      	cmp	r3, r4
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	d1dd      	bne.n	80085c0 <_free_r+0x28>
 8008604:	681c      	ldr	r4, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	6053      	str	r3, [r2, #4]
 800860a:	4421      	add	r1, r4
 800860c:	6011      	str	r1, [r2, #0]
 800860e:	e7d7      	b.n	80085c0 <_free_r+0x28>
 8008610:	d902      	bls.n	8008618 <_free_r+0x80>
 8008612:	230c      	movs	r3, #12
 8008614:	6003      	str	r3, [r0, #0]
 8008616:	e7d3      	b.n	80085c0 <_free_r+0x28>
 8008618:	6825      	ldr	r5, [r4, #0]
 800861a:	1961      	adds	r1, r4, r5
 800861c:	428b      	cmp	r3, r1
 800861e:	bf04      	itt	eq
 8008620:	6819      	ldreq	r1, [r3, #0]
 8008622:	685b      	ldreq	r3, [r3, #4]
 8008624:	6063      	str	r3, [r4, #4]
 8008626:	bf04      	itt	eq
 8008628:	1949      	addeq	r1, r1, r5
 800862a:	6021      	streq	r1, [r4, #0]
 800862c:	6054      	str	r4, [r2, #4]
 800862e:	e7c7      	b.n	80085c0 <_free_r+0x28>
 8008630:	b003      	add	sp, #12
 8008632:	bd30      	pop	{r4, r5, pc}
 8008634:	200000b8 	.word	0x200000b8

08008638 <_malloc_r>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	1ccd      	adds	r5, r1, #3
 800863c:	f025 0503 	bic.w	r5, r5, #3
 8008640:	3508      	adds	r5, #8
 8008642:	2d0c      	cmp	r5, #12
 8008644:	bf38      	it	cc
 8008646:	250c      	movcc	r5, #12
 8008648:	2d00      	cmp	r5, #0
 800864a:	4606      	mov	r6, r0
 800864c:	db01      	blt.n	8008652 <_malloc_r+0x1a>
 800864e:	42a9      	cmp	r1, r5
 8008650:	d903      	bls.n	800865a <_malloc_r+0x22>
 8008652:	230c      	movs	r3, #12
 8008654:	6033      	str	r3, [r6, #0]
 8008656:	2000      	movs	r0, #0
 8008658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800865a:	f000 f87d 	bl	8008758 <__malloc_lock>
 800865e:	4921      	ldr	r1, [pc, #132]	; (80086e4 <_malloc_r+0xac>)
 8008660:	680a      	ldr	r2, [r1, #0]
 8008662:	4614      	mov	r4, r2
 8008664:	b99c      	cbnz	r4, 800868e <_malloc_r+0x56>
 8008666:	4f20      	ldr	r7, [pc, #128]	; (80086e8 <_malloc_r+0xb0>)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	b923      	cbnz	r3, 8008676 <_malloc_r+0x3e>
 800866c:	4621      	mov	r1, r4
 800866e:	4630      	mov	r0, r6
 8008670:	f000 f862 	bl	8008738 <_sbrk_r>
 8008674:	6038      	str	r0, [r7, #0]
 8008676:	4629      	mov	r1, r5
 8008678:	4630      	mov	r0, r6
 800867a:	f000 f85d 	bl	8008738 <_sbrk_r>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d123      	bne.n	80086ca <_malloc_r+0x92>
 8008682:	230c      	movs	r3, #12
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	4630      	mov	r0, r6
 8008688:	f000 f86c 	bl	8008764 <__malloc_unlock>
 800868c:	e7e3      	b.n	8008656 <_malloc_r+0x1e>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	1b5b      	subs	r3, r3, r5
 8008692:	d417      	bmi.n	80086c4 <_malloc_r+0x8c>
 8008694:	2b0b      	cmp	r3, #11
 8008696:	d903      	bls.n	80086a0 <_malloc_r+0x68>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	441c      	add	r4, r3
 800869c:	6025      	str	r5, [r4, #0]
 800869e:	e004      	b.n	80086aa <_malloc_r+0x72>
 80086a0:	6863      	ldr	r3, [r4, #4]
 80086a2:	42a2      	cmp	r2, r4
 80086a4:	bf0c      	ite	eq
 80086a6:	600b      	streq	r3, [r1, #0]
 80086a8:	6053      	strne	r3, [r2, #4]
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 f85a 	bl	8008764 <__malloc_unlock>
 80086b0:	f104 000b 	add.w	r0, r4, #11
 80086b4:	1d23      	adds	r3, r4, #4
 80086b6:	f020 0007 	bic.w	r0, r0, #7
 80086ba:	1ac2      	subs	r2, r0, r3
 80086bc:	d0cc      	beq.n	8008658 <_malloc_r+0x20>
 80086be:	1a1b      	subs	r3, r3, r0
 80086c0:	50a3      	str	r3, [r4, r2]
 80086c2:	e7c9      	b.n	8008658 <_malloc_r+0x20>
 80086c4:	4622      	mov	r2, r4
 80086c6:	6864      	ldr	r4, [r4, #4]
 80086c8:	e7cc      	b.n	8008664 <_malloc_r+0x2c>
 80086ca:	1cc4      	adds	r4, r0, #3
 80086cc:	f024 0403 	bic.w	r4, r4, #3
 80086d0:	42a0      	cmp	r0, r4
 80086d2:	d0e3      	beq.n	800869c <_malloc_r+0x64>
 80086d4:	1a21      	subs	r1, r4, r0
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 f82e 	bl	8008738 <_sbrk_r>
 80086dc:	3001      	adds	r0, #1
 80086de:	d1dd      	bne.n	800869c <_malloc_r+0x64>
 80086e0:	e7cf      	b.n	8008682 <_malloc_r+0x4a>
 80086e2:	bf00      	nop
 80086e4:	200000b8 	.word	0x200000b8
 80086e8:	200000bc 	.word	0x200000bc

080086ec <_realloc_r>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	4607      	mov	r7, r0
 80086f0:	4614      	mov	r4, r2
 80086f2:	460e      	mov	r6, r1
 80086f4:	b921      	cbnz	r1, 8008700 <_realloc_r+0x14>
 80086f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086fa:	4611      	mov	r1, r2
 80086fc:	f7ff bf9c 	b.w	8008638 <_malloc_r>
 8008700:	b922      	cbnz	r2, 800870c <_realloc_r+0x20>
 8008702:	f7ff ff49 	bl	8008598 <_free_r>
 8008706:	4625      	mov	r5, r4
 8008708:	4628      	mov	r0, r5
 800870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870c:	f000 f830 	bl	8008770 <_malloc_usable_size_r>
 8008710:	42a0      	cmp	r0, r4
 8008712:	d20f      	bcs.n	8008734 <_realloc_r+0x48>
 8008714:	4621      	mov	r1, r4
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ff8e 	bl	8008638 <_malloc_r>
 800871c:	4605      	mov	r5, r0
 800871e:	2800      	cmp	r0, #0
 8008720:	d0f2      	beq.n	8008708 <_realloc_r+0x1c>
 8008722:	4631      	mov	r1, r6
 8008724:	4622      	mov	r2, r4
 8008726:	f7ff ff0f 	bl	8008548 <memcpy>
 800872a:	4631      	mov	r1, r6
 800872c:	4638      	mov	r0, r7
 800872e:	f7ff ff33 	bl	8008598 <_free_r>
 8008732:	e7e9      	b.n	8008708 <_realloc_r+0x1c>
 8008734:	4635      	mov	r5, r6
 8008736:	e7e7      	b.n	8008708 <_realloc_r+0x1c>

08008738 <_sbrk_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4d06      	ldr	r5, [pc, #24]	; (8008754 <_sbrk_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	602b      	str	r3, [r5, #0]
 8008744:	f7f8 fd2a 	bl	800119c <_sbrk>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_sbrk_r+0x1a>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_sbrk_r+0x1a>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	200002cc 	.word	0x200002cc

08008758 <__malloc_lock>:
 8008758:	4801      	ldr	r0, [pc, #4]	; (8008760 <__malloc_lock+0x8>)
 800875a:	f7ff bef3 	b.w	8008544 <__retarget_lock_acquire_recursive>
 800875e:	bf00      	nop
 8008760:	200002d4 	.word	0x200002d4

08008764 <__malloc_unlock>:
 8008764:	4801      	ldr	r0, [pc, #4]	; (800876c <__malloc_unlock+0x8>)
 8008766:	f7ff beee 	b.w	8008546 <__retarget_lock_release_recursive>
 800876a:	bf00      	nop
 800876c:	200002d4 	.word	0x200002d4

08008770 <_malloc_usable_size_r>:
 8008770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008774:	1f18      	subs	r0, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfbc      	itt	lt
 800877a:	580b      	ldrlt	r3, [r1, r0]
 800877c:	18c0      	addlt	r0, r0, r3
 800877e:	4770      	bx	lr

08008780 <_init>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr

0800878c <_fini>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr
